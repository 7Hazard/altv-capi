TYPEDEF CLASS alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout = alt::VectorLayout
ClassTemplateSpecializationDecl 0x232e2e82708 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:16:5, line:55:5> line:17:11 class VectorLayout definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-CXXRecordDecl 0x232e2eb8ee0 prev 0x232e2e82708 <col:5, col:11> col:11 implicit class VectorLayout
|-AccessSpecDecl 0x232e2eb8f70 <line:19:5, col:11> col:5 public
|-TypeAliasDecl 0x232e2eb8fd8 <line:20:9, col:25> col:15 Element 'float':'float'
| `-SubstTemplateTypeParmType 0x232e2eb8fa0 'float' sugar
|   |-TemplateTypeParmType 0x232e2e7ae40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x232e2e7adf0 'T'
|   `-BuiltinType 0x232e1c2b640 'float'
|-VarDecl 0x232e2eb9038 <line:22:9, col:42> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-SubstNonTypeTemplateParmExpr 0x232e2eb90d8 <col:42> 'unsigned long long'
|   `-IntegerLiteral 0x232e2eb90b0 <col:42> 'unsigned long long' 4
|-CXXConstructorDecl 0x232e2eb9178 <line:24:9, col:42> col:9 used VectorLayout 'void ()'
| |-CXXCtorInitializer Field 0x232e2ebabc8 'elements' 'alt::VectorLayout<float, 4>::Element [4]'
| | `-InitListExpr 0x232e3756810 <col:34, col:38> 'alt::VectorLayout<float, 4>::Element [4]'
| |   |-array_filler: ImplicitValueInitExpr 0x232e3756870 <<invalid sloc>> 'alt::VectorLayout<float, 4>::Element':'float'
| |   `-ImplicitCastExpr 0x232e3756850 <col:36> 'alt::VectorLayout<float, 4>::Element':'float' <IntegralToFloating>
| |     `-IntegerLiteral 0x232e3756718 <col:36> 'int' 0
| `-CompoundStmt 0x232e37567b8 <col:40, col:42>
|-CXXConstructorDecl 0x232e2eb9508 <line:25:9, col:55> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4>::Element (&)[4])'
| `-ParmVarDecl 0x232e2eb93f8 <col:22, col:54> col:38 _elements 'const alt::VectorLayout<float, 4>::Element (&)[4]'
|-CXXConstructorDecl 0x232e2eb9718 <line:26:9, col:39> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4>::Element &)'
| `-ParmVarDecl 0x232e2eb9608 <col:22, col:37> col:37 el 'const alt::VectorLayout<float, 4>::Element &'
|-FunctionTemplateDecl 0x232e2eb9de0 <line:28:9, line:29:41> col:9 VectorLayout
| |-TemplateTypeParmDecl 0x232e2eb97d8 <line:28:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x232e2eb9858 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x232e2eb9d38 <line:29:9, col:41> col:9 VectorLayout 'void (const Args &...)'
|   `-ParmVarDecl 0x232e2eb9c20 <col:22, col:37> col:37 args 'const Args &...' pack
|-FunctionTemplateDecl 0x232e2eba3f0 <line:31:9, line:32:44> col:9 VectorLayout
| |-TemplateTypeParmDecl 0x232e2eb9ec0 <line:31:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x232e2eb9f38 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x232e2eba348 <line:32:9, col:44> col:9 VectorLayout 'void (const ULayout &)'
| | `-ParmVarDecl 0x232e2eba268 <col:22, col:37> col:37 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x232e2ebfaa8 <col:9, col:44> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4> &)'
|   |-TemplateArgument type 'alt::VectorLayout<float, 4>'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x232e2ebf9e8 <col:22, col:37> col:37 _layout 'const alt::VectorLayout<float, 4> &'
|-CXXMethodDecl 0x232e2eba5b8 <line:37:9, col:44> col:18 operator[] 'alt::VectorLayout<float, 4>::Element &(std::size_t)'
| `-ParmVarDecl 0x232e2eba4f8 <col:29, col:41> col:41 key 'std::size_t':'unsigned long long'
|-CXXMethodDecl 0x232e2eba738 <line:38:9, col:52> col:24 operator[] 'const alt::VectorLayout<float, 4>::Element &(std::size_t) const'
| `-ParmVarDecl 0x232e2eba670 <col:35, col:47> col:47 key 'std::size_t':'unsigned long long'
|-FriendDecl 0x232e2ebaa90 <line:40:9, line:51:9> line:40:30
| `-FunctionDecl 0x232e2eba9c0 parent 0x232e2e7ab10 <col:9, line:51:9> line:40:30 used operator<< 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|   |-ParmVarDecl 0x232e2eba7f0 <col:41, col:55> col:55 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e2eba898 <col:63, col:83> col:83 used layout 'const alt::VectorLayout<float, 4> &'
|   `-CompoundStmt 0x232e378df38 <line:41:9, line:51:9>
|     |-CXXOperatorCallExpr 0x232e378c9c8 <line:42:13, col:79> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | |-ImplicitCastExpr 0x232e378c9b0 <col:76> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x232e378c990 <col:76> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | |-CXXOperatorCallExpr 0x232e378c940 <col:13, col:70> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | |-ImplicitCastExpr 0x232e378c928 <col:67> 'std::basic_ostream<char, std::char_traits<char> > &(*)(unsigned long long)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x232e378c908 <col:67> 'std::basic_ostream<char, std::char_traits<char> > &(unsigned long long)' lvalue CXXMethod 0x232e2e926d8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(unsigned long long)'
|     | | |-CXXOperatorCallExpr 0x232e378c878 <col:13, col:62> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | |-ImplicitCastExpr 0x232e378c860 <col:59> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | `-DeclRefExpr 0x232e378c840 <col:59> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | |-CXXOperatorCallExpr 0x232e378c7f0 <col:13, col:57> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | | |-ImplicitCastExpr 0x232e378c7d8 <col:33> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | | `-DeclRefExpr 0x232e378c7b8 <col:33> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | | |-CXXOperatorCallExpr 0x232e378c700 <col:13, col:23> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | | | |-ImplicitCastExpr 0x232e378c6e8 <col:20> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | | | `-DeclRefExpr 0x232e378c6c8 <col:20> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | | | |-DeclRefExpr 0x232e378c690 <col:13> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e2eba7f0 'stream' 'std::ostream &'
|     | | | | | `-ImplicitCastExpr 0x232e378c6b0 <col:23> 'const char *' <ArrayToPointerDecay>
|     | | | | |   `-StringLiteral 0x232e37827d8 <col:23> 'const char [8]' lvalue "Vector<"
|     | | | | `-CXXMemberCallExpr 0x232e378c798 <col:36, col:57> 'const char *'
|     | | | |   `-MemberExpr 0x232e378c768 <col:36, col:52> '<bound member function type>' .name 0x232e2a95ec8
|     | | | |     `-CXXTypeidExpr 0x232e378c748 <col:36, col:50> 'const type_info' lvalue
|     | | | `-ImplicitCastExpr 0x232e378c828 <col:62> 'const char *' <ArrayToPointerDecay>
|     | | |   `-StringLiteral 0x232e3784990 <col:62> 'const char [3]' lvalue ", "
|     | | `-ImplicitCastExpr 0x232e378c8f0 <col:70> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | |   `-DeclRefExpr 0x232e378c8d0 <col:70> 'const std::size_t':'const unsigned long long' lvalue Var 0x232e2eb9038 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     | `-ImplicitCastExpr 0x232e378c978 <col:79> 'const char *' <ArrayToPointerDecay>
|     |   `-StringLiteral 0x232e3789058 <col:79> 'const char [4]' lvalue ">{ "
|     |-ForStmt 0x232e378de48 <line:44:13, line:48:13>
|     | |-DeclStmt 0x232e378ca80 <line:44:18, col:35>
|     | | `-VarDecl 0x232e378ca00 <col:18, col:34> col:30 used i 'std::size_t':'unsigned long long' cinit
|     | |   `-ImplicitCastExpr 0x232e378ca68 <col:34> 'std::size_t':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x232e378a1e0 <col:34> 'int' 0
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x232e378cb28 <col:37, col:41> 'bool' '<'
|     | | |-ImplicitCastExpr 0x232e378cad8 <col:37> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | | | `-DeclRefExpr 0x232e378ca98 <col:37> 'std::size_t':'unsigned long long' lvalue Var 0x232e378ca00 'i' 'std::size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x232e378cb10 <col:41> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | |   `-DeclRefExpr 0x232e378caf0 <col:41> 'const std::size_t':'const unsigned long long' lvalue Var 0x232e2eb9038 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     | |-UnaryOperator 0x232e378cb68 <col:48, col:50> 'std::size_t':'unsigned long long' lvalue prefix '++'
|     | | `-DeclRefExpr 0x232e378cb48 <col:50> 'std::size_t':'unsigned long long' lvalue Var 0x232e378ca00 'i' 'std::size_t':'unsigned long long'
|     | `-CompoundStmt 0x232e378de28 <line:45:13, line:48:13>
|     |   |-IfStmt 0x232e378cc98 <line:46:17, col:39>
|     |   | |-BinaryOperator 0x232e378cbd0 <col:21, col:26> 'bool' '!='
|     |   | | |-ImplicitCastExpr 0x232e378cba0 <col:21> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |   | | | `-DeclRefExpr 0x232e378cb80 <col:21> 'std::size_t':'unsigned long long' lvalue Var 0x232e378ca00 'i' 'std::size_t':'unsigned long long'
|     |   | | `-ImplicitCastExpr 0x232e378cbb8 <col:26> 'unsigned long long' <IntegralCast>
|     |   | |   `-IntegerLiteral 0x232e378a320 <col:26> 'int' 0
|     |   | `-CXXOperatorCallExpr 0x232e378cc60 <col:29, col:39> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     |   |   |-ImplicitCastExpr 0x232e378cc48 <col:36> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x232e378cc28 <col:36> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     |   |   |-DeclRefExpr 0x232e378cbf0 <col:29> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e2eba7f0 'stream' 'std::ostream &'
|     |   |   `-ImplicitCastExpr 0x232e378cc10 <col:39> 'const char *' <ArrayToPointerDecay>
|     |   |     `-StringLiteral 0x232e378a3b8 <col:39> 'const char [3]' lvalue ", "
|     |   `-CXXOperatorCallExpr 0x232e378ddf0 <line:47:17, col:44> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     |     |-ImplicitCastExpr 0x232e378ddd8 <col:24> 'std::basic_ostream<char, std::char_traits<char> > &(*)(float)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x232e378ddb8 <col:24> 'std::basic_ostream<char, std::char_traits<char> > &(float)' lvalue CXXMethod 0x232e2e92858 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(float)'
|     |     |-DeclRefExpr 0x232e378ccb0 <col:17> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e2eba7f0 'stream' 'std::ostream &'
|     |     `-ImplicitCastExpr 0x232e378dda0 <col:27, col:44> 'alt::VectorLayout<float, 4>::Element':'float' <LValueToRValue>
|     |       `-ArraySubscriptExpr 0x232e378cd70 <col:27, col:44> 'const alt::VectorLayout<float, 4>::Element':'const float' lvalue
|     |         |-ImplicitCastExpr 0x232e378cd40 <col:27, col:34> 'const alt::VectorLayout<float, 4>::Element *' <ArrayToPointerDecay>
|     |         | `-MemberExpr 0x232e378ccf0 <col:27, col:34> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x232e2ebabc8
|     |         |   `-DeclRefExpr 0x232e378ccd0 <col:27> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x232e2eba898 'layout' 'const alt::VectorLayout<float, 4> &'
|     |         `-ImplicitCastExpr 0x232e378cd58 <col:43> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |           `-DeclRefExpr 0x232e378cd20 <col:43> 'std::size_t':'unsigned long long' lvalue Var 0x232e378ca00 'i' 'std::size_t':'unsigned long long'
|     `-ReturnStmt 0x232e378df28 <line:50:13, col:30>
|       `-CXXOperatorCallExpr 0x232e378def0 <col:20, col:30> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|         |-ImplicitCastExpr 0x232e378ded8 <col:27> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e378deb8 <col:27> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e378de80 <col:20> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e2eba7f0 'stream' 'std::ostream &'
|         `-ImplicitCastExpr 0x232e378dea0 <col:30> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x232e378b5c0 <col:30> 'const char [3]' lvalue " }"
|-AccessSpecDecl 0x232e2ebaad0 <line:53:5, col:12> col:5 private
|-FieldDecl 0x232e2ebabc8 <line:54:9, col:31> col:17 referenced elements 'alt::VectorLayout<float, 4>::Element [4]'
|-CXXDestructorDecl 0x232e2ebcb48 <line:17:11> col:11 implicit ~VectorLayout 'void ()' inline default trivial noexcept-unevaluated 0x232e2ebcb48
|-CXXConstructorDecl 0x232e2ebf1f0 <col:11> col:11 implicit used constexpr VectorLayout 'void (const alt::VectorLayout<float, 4> &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e2ebf2d8 <col:11> col:11 used 'const alt::VectorLayout<float, 4> &'
| |-CXXCtorInitializer Field 0x232e2ebabc8 'elements' 'alt::VectorLayout<float, 4>::Element [4]'
| | `-ArrayInitLoopExpr 0x232e2ec2168 <col:11> 'alt::VectorLayout<float, 4>::Element [4]'
| |   |-OpaqueValueExpr 0x232e2ec20c8 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue
| |   | `-MemberExpr 0x232e2ec2080 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x232e2ebabc8
| |   |   `-DeclRefExpr 0x232e2ec2060 <col:11> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x232e2ebf2d8 '' 'const alt::VectorLayout<float, 4> &'
| |   `-ImplicitCastExpr 0x232e2ec2150 <col:11> 'alt::VectorLayout<float, 4>::Element':'float' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x232e2ec2130 <col:11> 'const alt::VectorLayout<float, 4>::Element':'const float' lvalue
| |       |-ImplicitCastExpr 0x232e2ec2118 <col:11> 'const alt::VectorLayout<float, 4>::Element *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x232e2ec20c8 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue
| |       |   `-MemberExpr 0x232e2ec2080 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x232e2ebabc8
| |       |     `-DeclRefExpr 0x232e2ec2060 <col:11> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x232e2ebf2d8 '' 'const alt::VectorLayout<float, 4> &'
| |       `-ArrayInitIndexExpr 0x232e2ec20e0 <<invalid sloc>> 'unsigned long long'
| `-CompoundStmt 0x232e2ec21b8 <col:11>
|-CXXConstructorDecl 0x232e2ebf378 <col:11> col:11 implicit constexpr VectorLayout 'void (alt::VectorLayout<float, 4> &&)' inline default trivial noexcept-unevaluated 0x232e2ebf378
| `-ParmVarDecl 0x232e2ebf488 <col:11> col:11 'alt::VectorLayout<float, 4> &&'
|-CXXMethodDecl 0x232e376e558 <col:11> col:11 implicit operator= 'alt::VectorLayout<float, 4> &(const alt::VectorLayout<float, 4> &) noexcept' inline default trivial
| `-ParmVarDecl 0x232e376e668 <col:11> col:11 'const alt::VectorLayout<float, 4> &'
`-CXXMethodDecl 0x232e376e6d8 <col:11> col:11 implicit operator= 'alt::VectorLayout<float, 4> &(alt::VectorLayout<float, 4> &&)' inline default trivial noexcept-unevaluated 0x232e376e6d8
  `-ParmVarDecl 0x232e376e7e8 <col:11> col:11 'alt::VectorLayout<float, 4> &&'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector2f = alt::Vector
ClassTemplateSpecializationDecl 0x232e2e7f960 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 2
`-TemplateArgument type 'alt::VectorLayout<float, 2>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector2i = alt::Vector
ClassTemplateSpecializationDecl 0x232e2e80dd0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 2
`-TemplateArgument type 'alt::VectorLayout<int, 2>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector3f = alt::Vector
ClassTemplateSpecializationDecl 0x232e2e81850 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::VectorLayout<float, 3>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector3i = alt::Vector
ClassTemplateSpecializationDecl 0x232e2e81e40 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::VectorLayout<int, 3>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector4f = alt::Vector
ClassTemplateSpecializationDecl 0x232e2e828c0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument type 'alt::VectorLayout<float, 4>'
|-CXXRecordDecl 0x232e2ebac68 prev 0x232e2e828c0 <col:5, col:11> col:11 implicit class Vector
|-AccessSpecDecl 0x232e2ebacf8 <line:60:5, col:11> col:5 public
|-TypeAliasDecl 0x232e2ebad38 <line:61:9, col:24> col:15 Layout 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| `-SubstTemplateTypeParmType 0x232e2eb8e40 'alt::VectorLayout<float, 4>' sugar
|   |-TemplateTypeParmType 0x232e2e7d2e0 '_Layout' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x232e2e7d288 '_Layout'
|   `-RecordType 0x232e2e82800 'alt::VectorLayout<float, 4>'
|     `-ClassTemplateSpecialization 0x232e2e82708 'VectorLayout'
|-TypeAliasDecl 0x232e2ebada8 <line:62:9, col:25> col:15 referenced Element 'float':'float'
| `-SubstTemplateTypeParmType 0x232e2e7f700 'float' sugar
|   |-TemplateTypeParmType 0x232e2e7d090 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x232e2e7d040 'T'
|   `-BuiltinType 0x232e1c2b640 'float'
|-VarDecl 0x232e2ebae08 <line:64:9, col:50> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x232e2ebaf38 <col:42, col:50> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x232e2ebaf08 <col:42, col:50> 'const std::size_t':'const unsigned long long' lvalue Var 0x232e2eb9038 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-CXXConstructorDecl 0x232e2ebafd0 <line:66:9, col:26> col:9 used Vector 'void () noexcept(false)' default
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x232e2ec0628 <col:9> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void ()'
| `-CompoundStmt 0x232e2ec0690 <col:26>
|-CXXConstructorDecl 0x232e2ebb298 <line:67:9, col:39> col:9 Vector 'void (const float (&)[4])'
| `-ParmVarDecl 0x232e2ebb1b8 <col:16, col:38> col:26 _elements 'const float (&)[4]'
|-CXXConstructorDecl 0x232e2ebb4a8 <line:68:9, col:36> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &)'
| `-ParmVarDecl 0x232e2ebb398 <col:16, col:30> col:30 layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &'
|-FunctionTemplateDecl 0x232e2ebbae0 <line:70:9, line:71:35> col:9 Vector
| |-TemplateTypeParmDecl 0x232e2ebb568 <line:70:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x232e2ebb5e8 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x232e2ebba38 <line:71:9, col:35> col:9 Vector 'void (const Args &...)'
|   `-ParmVarDecl 0x232e2ebb950 <col:16, col:31> col:31 args 'const Args &...' pack
|-FunctionTemplateDecl 0x232e2ebc0f0 <line:73:9, line:74:38> col:9 Vector
| |-TemplateTypeParmDecl 0x232e2ebbbc0 <line:73:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x232e2ebbc38 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x232e2ebc048 <line:74:9, col:38> col:9 Vector 'void (const ULayout &)'
| | `-ParmVarDecl 0x232e2ebbf68 <col:16, col:31> col:31 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x232e2ec1a88 <col:9, col:38> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-TemplateArgument type 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x232e2ec19c8 <col:16, col:31> col:31 _layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXMethodDecl 0x232e2ebc248 <line:76:9, col:21> col:11 LengthSqr 'float ()'
|-CXXMethodDecl 0x232e2ebc318 <line:86:9, col:18> col:11 Length 'float ()'
|-FriendDecl 0x232e2ebc648 <line:91:9, col:65> col:24
| `-FunctionDecl 0x232e2ebc578 parent 0x232e2e7ab10 <col:9, col:65> col:24 operator-= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x232e2ebc408 <col:35, col:43> col:43 lhs 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x232e2ebc4a8 <col:48, col:62> col:62 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-FriendDecl 0x232e2ebc8b8 <line:99:9, col:69> col:23
| `-FunctionDecl 0x232e2ebc7e8 parent 0x232e2e7ab10 <col:9, col:69> col:23 operator- 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x232e2ebc698 <col:33, col:47> col:47 lhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x232e2ebc710 <col:52, col:66> col:66 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXDestructorDecl 0x232e2ebf108 <line:58:11> col:11 implicit ~Vector 'void ()' inline default trivial noexcept-unevaluated 0x232e2ebf108
|-CXXConstructorDecl 0x232e2ebfbc8 <col:11> col:11 implicit used constexpr Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e2ebfca8 <col:11> col:11 used 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x232e2ec21c8 <col:11> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void (const alt::VectorLayout<float, 4> &) noexcept'
| |   `-ImplicitCastExpr 0x232e2ec1c30 <col:11> 'const alt::VectorLayout<float, 4>':'const alt::VectorLayout<float, 4>' lvalue <UncheckedDerivedToBase (VectorLayout)>
| |     `-DeclRefExpr 0x232e2ec1c10 <col:11> 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x232e2ebfca8 '' 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| `-CompoundStmt 0x232e2ec2238 <col:11>
|-CXXConstructorDecl 0x232e2ec0160 <col:11> col:11 implicit constexpr Vector 'void (alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x232e2ec0160
| `-ParmVarDecl 0x232e2ec0278 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'
|-CXXMethodDecl 0x232e376e3a8 <col:11> col:11 implicit referenced operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| `-ParmVarDecl 0x232e376e4b8 <col:11> col:11 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
`-CXXMethodDecl 0x232e376e858 <col:11> col:11 implicit operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x232e376e858
  `-ParmVarDecl 0x232e376e968 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector4i = alt::Vector
ClassTemplateSpecializationDecl 0x232e2e82eb0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::VectorLayout<int, 4>'

--- END OF NODE ---

TYPEDEF CLASS alt::DXMatrix = alt::Matrix
ClassTemplateSpecializationDecl 0x232e2e88a60 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:173:5, line:208:5> line:174:11 class Matrix
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::MatrixLayout<float, 4, 4>'

--- END OF NODE ---

TYPEDEF CLASS alt::Point = alt::Vector
ClassTemplateSpecializationDecl 0x232e2ea79a8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::PointPadded = alt::Vector
ClassTemplateSpecializationDecl 0x232e2ea7cf8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::Position = alt::Vector
ClassTemplateSpecializationDecl 0x232e2ea79a8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::PositionPadded = alt::Vector
ClassTemplateSpecializationDecl 0x232e2ea7cf8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::Rotation = alt::Vector
ClassTemplateSpecializationDecl 0x232e2eb84f8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::RotationPadded = alt::Vector
ClassTemplateSpecializationDecl 0x232e2eb8848 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrixLayout::Row = alt::Vector
ClassTemplateSpecializationDecl 0x232e2e828c0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument type 'alt::VectorLayout<float, 4>'
|-CXXRecordDecl 0x232e2ebac68 prev 0x232e2e828c0 <col:5, col:11> col:11 implicit class Vector
|-AccessSpecDecl 0x232e2ebacf8 <line:60:5, col:11> col:5 public
|-TypeAliasDecl 0x232e2ebad38 <line:61:9, col:24> col:15 Layout 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| `-SubstTemplateTypeParmType 0x232e2eb8e40 'alt::VectorLayout<float, 4>' sugar
|   |-TemplateTypeParmType 0x232e2e7d2e0 '_Layout' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x232e2e7d288 '_Layout'
|   `-RecordType 0x232e2e82800 'alt::VectorLayout<float, 4>'
|     `-ClassTemplateSpecialization 0x232e2e82708 'VectorLayout'
|-TypeAliasDecl 0x232e2ebada8 <line:62:9, col:25> col:15 referenced Element 'float':'float'
| `-SubstTemplateTypeParmType 0x232e2e7f700 'float' sugar
|   |-TemplateTypeParmType 0x232e2e7d090 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x232e2e7d040 'T'
|   `-BuiltinType 0x232e1c2b640 'float'
|-VarDecl 0x232e2ebae08 <line:64:9, col:50> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x232e2ebaf38 <col:42, col:50> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x232e2ebaf08 <col:42, col:50> 'const std::size_t':'const unsigned long long' lvalue Var 0x232e2eb9038 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-CXXConstructorDecl 0x232e2ebafd0 <line:66:9, col:26> col:9 used Vector 'void () noexcept(false)' default
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x232e2ec0628 <col:9> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void ()'
| `-CompoundStmt 0x232e2ec0690 <col:26>
|-CXXConstructorDecl 0x232e2ebb298 <line:67:9, col:39> col:9 Vector 'void (const float (&)[4])'
| `-ParmVarDecl 0x232e2ebb1b8 <col:16, col:38> col:26 _elements 'const float (&)[4]'
|-CXXConstructorDecl 0x232e2ebb4a8 <line:68:9, col:36> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &)'
| `-ParmVarDecl 0x232e2ebb398 <col:16, col:30> col:30 layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &'
|-FunctionTemplateDecl 0x232e2ebbae0 <line:70:9, line:71:35> col:9 Vector
| |-TemplateTypeParmDecl 0x232e2ebb568 <line:70:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x232e2ebb5e8 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x232e2ebba38 <line:71:9, col:35> col:9 Vector 'void (const Args &...)'
|   `-ParmVarDecl 0x232e2ebb950 <col:16, col:31> col:31 args 'const Args &...' pack
|-FunctionTemplateDecl 0x232e2ebc0f0 <line:73:9, line:74:38> col:9 Vector
| |-TemplateTypeParmDecl 0x232e2ebbbc0 <line:73:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x232e2ebbc38 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x232e2ebc048 <line:74:9, col:38> col:9 Vector 'void (const ULayout &)'
| | `-ParmVarDecl 0x232e2ebbf68 <col:16, col:31> col:31 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x232e2ec1a88 <col:9, col:38> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-TemplateArgument type 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x232e2ec19c8 <col:16, col:31> col:31 _layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXMethodDecl 0x232e2ebc248 <line:76:9, col:21> col:11 LengthSqr 'float ()'
|-CXXMethodDecl 0x232e2ebc318 <line:86:9, col:18> col:11 Length 'float ()'
|-FriendDecl 0x232e2ebc648 <line:91:9, col:65> col:24
| `-FunctionDecl 0x232e2ebc578 parent 0x232e2e7ab10 <col:9, col:65> col:24 operator-= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x232e2ebc408 <col:35, col:43> col:43 lhs 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x232e2ebc4a8 <col:48, col:62> col:62 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-FriendDecl 0x232e2ebc8b8 <line:99:9, col:69> col:23
| `-FunctionDecl 0x232e2ebc7e8 parent 0x232e2e7ab10 <col:9, col:69> col:23 operator- 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x232e2ebc698 <col:33, col:47> col:47 lhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x232e2ebc710 <col:52, col:66> col:66 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXDestructorDecl 0x232e2ebf108 <line:58:11> col:11 implicit ~Vector 'void ()' inline default trivial noexcept-unevaluated 0x232e2ebf108
|-CXXConstructorDecl 0x232e2ebfbc8 <col:11> col:11 implicit used constexpr Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e2ebfca8 <col:11> col:11 used 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x232e2ec21c8 <col:11> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void (const alt::VectorLayout<float, 4> &) noexcept'
| |   `-ImplicitCastExpr 0x232e2ec1c30 <col:11> 'const alt::VectorLayout<float, 4>':'const alt::VectorLayout<float, 4>' lvalue <UncheckedDerivedToBase (VectorLayout)>
| |     `-DeclRefExpr 0x232e2ec1c10 <col:11> 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x232e2ebfca8 '' 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| `-CompoundStmt 0x232e2ec2238 <col:11>
|-CXXConstructorDecl 0x232e2ec0160 <col:11> col:11 implicit constexpr Vector 'void (alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x232e2ec0160
| `-ParmVarDecl 0x232e2ec0278 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'
|-CXXMethodDecl 0x232e376e3a8 <col:11> col:11 implicit referenced operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| `-ParmVarDecl 0x232e376e4b8 <col:11> col:11 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
`-CXXMethodDecl 0x232e376e858 <col:11> col:11 implicit operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x232e376e858
  `-ParmVarDecl 0x232e376e968 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrixLayout::Transposed = alt::ViewMatrixLayout
CXXRecordDecl 0x232e2eb8b10 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:318:5, line:360:5> line:318:11 referenced class ViewMatrixLayout definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x232e2eb8c28 <col:5, col:11> col:11 implicit referenced class ViewMatrixLayout
|-AccessSpecDecl 0x232e2eb8cb8 <line:320:5, col:11> col:5 public
|-TypeAliasDecl 0x232e2eb8d20 <line:321:9, col:21> col:15 referenced Row 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| `-TypedefType 0x232e2eb8cf0 'alt::Vector4f' sugar
|   |-TypeAlias 0x232e2e82b38 'Vector4f'
|   `-TemplateSpecializationType 0x232e2e82a90 'Vector4<float>' sugar alias Vector4
|     |-TemplateArgument type 'float'
|     |-TemplateSpecializationType 0x232e2e829f0 'Vector<float, 4>' sugar Vector
|     | |-TemplateArgument type 'float':'float'
|     | |-TemplateArgument expr
|     | | `-ConstantExpr 0x232e2e82670 <line:114:49> 'std::size_t':'unsigned long long' 4
|     | |   `-ImplicitCastExpr 0x232e2e82658 <col:49> 'std::size_t':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x232e2e821c0 <col:49> 'int' 4
|     | `-RecordType 0x232e2e829d0 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|     |   `-ClassTemplateSpecialization 0x232e2e828c0 'Vector'
|     `-TemplateSpecializationType 0x232e2e829f0 'Vector<float, 4>' sugar Vector
|       |-TemplateArgument type 'float':'float'
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x232e2e82670 <col:49> 'std::size_t':'unsigned long long' 4
|       |   `-ImplicitCastExpr 0x232e2e82658 <col:49> 'std::size_t':'unsigned long long' <IntegralCast>
|       |     `-IntegerLiteral 0x232e2e821c0 <col:49> 'int' 4
|       `-RecordType 0x232e2e829d0 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|         `-ClassTemplateSpecialization 0x232e2e828c0 'Vector'
|-TypeAliasDecl 0x232e2ebccc0 <line:322:9, col:39> col:15 referenced Element 'typename Row::Element':'float'
| `-ElaboratedType 0x232e2ebcc50 'typename Row::Element' sugar
|   `-TypedefType 0x232e2ebcc30 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Element' sugar
|     |-TypeAlias 0x232e2ebada8 'Element'
|     `-SubstTemplateTypeParmType 0x232e2e7f700 'float' sugar
|       |-TemplateTypeParmType 0x232e2e7d090 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x232e2e7d040 'T'
|       `-BuiltinType 0x232e1c2b640 'float'
|-TypeAliasDecl 0x232e2ebcd30 <line:323:9, col:28> col:15 Transposed 'alt::ViewMatrixLayout'
| `-RecordType 0x232e2eb8ba0 'alt::ViewMatrixLayout'
|   `-CXXRecord 0x232e2eb8b10 'ViewMatrixLayout'
|-VarDecl 0x232e2ebcde0 <line:325:9, col:47> col:34 referenced Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x232e2ebcee0 <col:42, col:47> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x232e2ebceb0 <col:42, col:47> 'const std::size_t':'const unsigned long long' lvalue Var 0x232e2ebae08 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-VarDecl 0x232e2ebcf90 <line:326:9, col:43> col:34 used Height 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x232e2ebd020 <col:43> 'const std::size_t':'const unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x232e2ebcff8 <col:43> 'int' 4
|-CXXConstructorDecl 0x232e2ebd0e0 <line:328:9, col:36> col:9 ViewMatrixLayout 'void ()' default noexcept-unevaluated 0x232e2ebd0e0
|-CXXConstructorDecl 0x232e2ebd5a8 <line:329:9, col:98> col:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Row (&)[4])'
| |-ParmVarDecl 0x232e2ebd4b8 <col:26, col:51> col:38 used _rows 'const alt::ViewMatrixLayout::Row (&)[4]'
| |-CXXCtorInitializer Field 0x232e2ebed30 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec06a0 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x232e2ebed98 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec0868 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x232e2ebee00 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec0a38 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x232e2ebee68 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec0c08 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x232e2ec1460 <col:54, col:98>
|   `-CallExpr 0x232e2ec1410 <col:56, col:95> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *':'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *'
|     |-ImplicitCastExpr 0x232e2ec13f8 <col:56, col:61> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(*)(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x232e2ec1360 <col:56, col:61> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' lvalue Function 0x232e2ec1238 'copy' 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' (FunctionTemplate 0x232e22459f8 'copy')
|     |-ImplicitCastExpr 0x232e2ec1448 <col:66> 'const alt::ViewMatrixLayout::Row *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x232e2ec0ce8 <col:66> 'const alt::ViewMatrixLayout::Row [4]':'const alt::ViewMatrixLayout::Row [4]' lvalue ParmVar 0x232e2ebd4b8 '_rows' 'const alt::ViewMatrixLayout::Row (&)[4]'
|     |-UnaryOperator 0x232e2ec0e18 <col:73, col:86> 'const alt::ViewMatrixLayout::Row *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x232e2ec0df8 <col:74, col:86> 'const alt::ViewMatrixLayout::Row':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|     |   |-ImplicitCastExpr 0x232e2ec0da8 <col:74> 'const alt::ViewMatrixLayout::Row *' <ArrayToPointerDecay>
|     |   | `-DeclRefExpr 0x232e2ec0d08 <col:74> 'const alt::ViewMatrixLayout::Row [4]':'const alt::ViewMatrixLayout::Row [4]' lvalue ParmVar 0x232e2ebd4b8 '_rows' 'const alt::ViewMatrixLayout::Row (&)[4]'
|     |   `-ImplicitCastExpr 0x232e2ec0de0 <col:80> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |     `-DeclRefExpr 0x232e2ec0dc0 <col:80> 'const std::size_t':'const unsigned long long' lvalue Var 0x232e2ebcf90 'Height' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     `-UnaryOperator 0x232e2ec0ec8 <col:89, col:90> 'alt::Vector4f *' prefix '&' cannot overflow
|       `-MemberExpr 0x232e2ec0e40 <col:90> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x232e2ebed30
|         `-CXXThisExpr 0x232e2ec0e30 <col:90> 'alt::ViewMatrixLayout *' implicit this
|-CXXConstructorDecl 0x232e2ebd788 <line:331:9, col:59> col:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Row &)'
| |-ParmVarDecl 0x232e2ebd698 <col:26, col:37> col:37 used row 'const alt::ViewMatrixLayout::Row &'
| |-CXXCtorInitializer Field 0x232e2ebed30 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec2248 <col:44, col:55> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x232e2ec1478 <col:51> 'const alt::ViewMatrixLayout::Row':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x232e2ebd698 'row' 'const alt::ViewMatrixLayout::Row &'
| |-CXXCtorInitializer Field 0x232e2ebed98 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec2418 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x232e2ebee00 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec25e8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x232e2ebee68 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec27b8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x232e2ec2828 <col:57, col:59>
|-CXXConstructorDecl 0x232e2ebdb78 <line:333:9, line:336:9> line:333:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Element (&)[16])'
| |-ParmVarDecl 0x232e2ebda88 <col:26, col:66> col:42 used elements 'const alt::ViewMatrixLayout::Element (&)[16]'
| |-CXXCtorInitializer Field 0x232e2ebed30 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec29b8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x232e2ebed98 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec2b88 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x232e2ebee00 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec2d58 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x232e2ebee68 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ec2f28 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x232e2ed3778 <line:334:9, line:336:9>
|   `-CallExpr 0x232e2ed3740 <line:335:13, col:72> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *':'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *'
|     |-ImplicitCastExpr 0x232e2ed3728 <col:13, col:18> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(*)(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x232e2ed3690 <col:13, col:18> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' lvalue Function 0x232e2ed3568 'copy' 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' (FunctionTemplate 0x232e22459f8 'copy')
|     |-CStyleCastExpr 0x232e2ec30b0 <col:23, col:29> 'alt::ViewMatrixLayout::Row *' <BitCast>
|     | `-ImplicitCastExpr 0x232e2ec3098 <col:29> 'const alt::ViewMatrixLayout::Element *' <ArrayToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x232e2ec3008 <col:29> 'const alt::ViewMatrixLayout::Element [16]':'const alt::ViewMatrixLayout::Element [16]' lvalue ParmVar 0x232e2ebda88 'elements' 'const alt::ViewMatrixLayout::Element (&)[16]'
|     |-UnaryOperator 0x232e2ec31e0 <col:39, col:63> 'alt::ViewMatrixLayout::Row *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x232e2ec31c0 <col:40, col:63> 'alt::ViewMatrixLayout::Row':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|     |   |-ParenExpr 0x232e2ec3148 <col:40, col:55> 'alt::ViewMatrixLayout::Row *'
|     |   | `-CStyleCastExpr 0x232e2ec3120 <col:41, col:47> 'alt::ViewMatrixLayout::Row *' <BitCast>
|     |   |   `-ImplicitCastExpr 0x232e2ec3108 <col:47> 'const alt::ViewMatrixLayout::Element *' <ArrayToPointerDecay> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x232e2ec30d8 <col:47> 'const alt::ViewMatrixLayout::Element [16]':'const alt::ViewMatrixLayout::Element [16]' lvalue ParmVar 0x232e2ebda88 'elements' 'const alt::ViewMatrixLayout::Element (&)[16]'
|     |   `-ImplicitCastExpr 0x232e2ec31a8 <col:57> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |     `-DeclRefExpr 0x232e2ec3188 <col:57> 'const std::size_t':'const unsigned long long' lvalue Var 0x232e2ebcf90 'Height' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     `-UnaryOperator 0x232e2ec3238 <col:66, col:67> 'alt::Vector4f *' prefix '&' cannot overflow
|       `-MemberExpr 0x232e2ec3208 <col:67> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x232e2ebed30
|         `-CXXThisExpr 0x232e2ec31f8 <col:67> 'alt::ViewMatrixLayout *' implicit this
|-CXXConstructorDecl 0x232e2ebdf18 <line:338:9, col:184> col:9 ViewMatrixLayout 'void (const alt::Vector4f &, const alt::Vector4f &, const alt::Vector4f &, const alt::Vector4f &)'
| |-ParmVarDecl 0x232e2ebdc68 <col:26, col:42> col:42 used _right 'const alt::Vector4f &'
| |-ParmVarDecl 0x232e2ebdce0 <col:50, col:66> col:66 used _up 'const alt::Vector4f &'
| |-ParmVarDecl 0x232e2ebdd58 <col:71, col:87> col:87 used _forward 'const alt::Vector4f &'
| |-ParmVarDecl 0x232e2ebddd0 <col:97, col:113> col:113 used _pos 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x232e2ebed30 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ed3c10 <col:121, col:135> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x232e2ed3790 <col:128> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x232e2ebdc68 '_right' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x232e2ebed98 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ed40e0 <col:138, col:146> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x232e2ed3c68 <col:142> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x232e2ebdce0 '_up' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x232e2ebee00 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ed45b0 <col:149, col:167> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x232e2ed4138 <col:158> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x232e2ebdd58 '_forward' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x232e2ebee68 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x232e2ed4a80 <col:170, col:180> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x232e2ed4608 <col:175> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x232e2ebddd0 '_pos' 'const alt::Vector4f &'
| `-CompoundStmt 0x232e2ed4af8 <col:182, col:184>
|-FunctionTemplateDecl 0x232e2ebe530 <line:340:9, line:341:48> col:9 ViewMatrixLayout
| |-TemplateTypeParmDecl 0x232e2ebdfe0 <line:340:18, col:24> col:24 referenced class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x232e2ebe2f0 <col:33, col:96> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Height == Height>::type'
| `-CXXConstructorDecl 0x232e2ebe488 <line:341:9, col:48> col:9 ViewMatrixLayout 'void (const ULayout &)'
|   |-ParmVarDecl 0x232e2ebe3c8 <col:26, col:41> col:41 _layout 'const ULayout &'
|   `-<<<NULL>>>
|-CXXMethodDecl 0x232e2ebe708 <line:346:9, col:66> col:14 operator[] 'alt::ViewMatrixLayout::Row &(std::size_t)'
| |-ParmVarDecl 0x232e2ebe5e0 <col:25, col:37> col:37 used key 'std::size_t':'unsigned long long'
| `-CompoundStmt 0x232e2ed4be8 <col:42, col:66>
|   `-ReturnStmt 0x232e2ed4bd8 <col:44, col:63>
|     `-ArraySubscriptExpr 0x232e2ed4bb8 <col:51, col:63> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|       |-ParenExpr 0x232e2ed4b60 <col:51, col:58> 'alt::Vector4f *'
|       | `-UnaryOperator 0x232e2ed4b48 <col:52, col:53> 'alt::Vector4f *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x232e2ed4b18 <col:53> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x232e2ebed30
|       |     `-CXXThisExpr 0x232e2ed4b08 <col:53> 'alt::ViewMatrixLayout *' implicit this
|       `-ImplicitCastExpr 0x232e2ed4ba0 <col:60> 'std::size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x232e2ed4b80 <col:60> 'std::size_t':'unsigned long long' lvalue ParmVar 0x232e2ebe5e0 'key' 'std::size_t':'unsigned long long'
|-CXXMethodDecl 0x232e2ebe928 <line:347:9, col:78> col:20 operator[] 'const alt::ViewMatrixLayout::Row &(std::size_t) const'
| |-ParmVarDecl 0x232e2ebe800 <col:31, col:43> col:43 used key 'std::size_t':'unsigned long long'
| `-CompoundStmt 0x232e2ed4d08 <col:54, col:78>
|   `-ReturnStmt 0x232e2ed4cf8 <col:56, col:75>
|     `-ArraySubscriptExpr 0x232e2ed4cd8 <col:63, col:75> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|       |-ParenExpr 0x232e2ed4c80 <col:63, col:70> 'const alt::Vector4f *'
|       | `-UnaryOperator 0x232e2ed4c68 <col:64, col:65> 'const alt::Vector4f *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x232e2ed4c10 <col:65> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x232e2ebed30
|       |     `-CXXThisExpr 0x232e2ed4c00 <col:65> 'const alt::ViewMatrixLayout *' implicit this
|       `-ImplicitCastExpr 0x232e2ed4cc0 <col:72> 'std::size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x232e2ed4ca0 <col:72> 'std::size_t':'unsigned long long' lvalue ParmVar 0x232e2ebe800 'key' 'std::size_t':'unsigned long long'
|-FriendDecl 0x232e2ebece0 <line:349:9, line:357:9> line:349:30
| `-FunctionDecl 0x232e2ebec20 parent 0x232e2e7ab10 <col:9, line:357:9> line:349:30 operator<< 'std::ostream &(std::ostream &, const alt::ViewMatrixLayout &)'
|   |-ParmVarDecl 0x232e2ebea58 <col:41, col:55> col:55 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e2ebeaf8 <col:63, col:87> col:87 used layout 'const alt::ViewMatrixLayout &'
|   `-CompoundStmt 0x232e2f04dc8 <line:350:9, line:357:9>
|     `-ReturnStmt 0x232e2f04db8 <line:351:13, line:356:20>
|       `-CXXOperatorCallExpr 0x232e2f04d80 <line:351:20, line:356:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e2f04d68 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e2f04d48 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-CXXOperatorCallExpr 0x232e2ee1658 <line:351:20, line:355:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | |-ImplicitCastExpr 0x232e2ee1640 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e2ee1620 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x232e2eba9c0 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | |-CXXOperatorCallExpr 0x232e2ee0660 <line:351:20, line:355:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | |-ImplicitCastExpr 0x232e2ee0648 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x232e2ee0628 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | |-CXXOperatorCallExpr 0x232e2edf5f8 <line:351:20, line:354:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | |-ImplicitCastExpr 0x232e2edf5e0 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | `-DeclRefExpr 0x232e2edf5c0 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x232e2eba9c0 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | |-CXXOperatorCallExpr 0x232e2ede600 <line:351:20, line:354:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | |-ImplicitCastExpr 0x232e2ede5e8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | `-DeclRefExpr 0x232e2ede5c8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | |-CXXOperatorCallExpr 0x232e2edd598 <line:351:20, line:353:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | |-ImplicitCastExpr 0x232e2edd580 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | | | `-DeclRefExpr 0x232e2edd560 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x232e2eba9c0 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | | | |-CXXOperatorCallExpr 0x232e2edc5a0 <line:351:20, line:353:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | |-ImplicitCastExpr 0x232e2edc588 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | `-DeclRefExpr 0x232e2edc568 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | |-CXXOperatorCallExpr 0x232e2edb530 <line:351:20, line:352:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | |-ImplicitCastExpr 0x232e2edb518 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | | | | | `-DeclRefExpr 0x232e2edb4a0 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x232e2eba9c0 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | | | | | |-CXXOperatorCallExpr 0x232e2ed7e00 <line:351:20, line:352:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | | |-ImplicitCastExpr 0x232e2ed7de8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | | | `-DeclRefExpr 0x232e2ed7dc8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | | | |-CXXOperatorCallExpr 0x232e2ed6d90 <line:351:20, col:30> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | | | |-ImplicitCastExpr 0x232e2ed6d78 <col:27> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | | | | `-DeclRefExpr 0x232e2ed6d58 <col:27> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | | | | |-DeclRefExpr 0x232e2ed4d20 <col:20> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e2ebea58 'stream' 'std::ostream &'
|         | | | | | | | | | `-ImplicitCastExpr 0x232e2ed6d40 <col:30> 'const char *' <ArrayToPointerDecay>
|         | | | | | | | | |   `-StringLiteral 0x232e2ed4d40 <col:30> 'const char [13]' lvalue "\nViewMatrix{"
|         | | | | | | | | `-ImplicitCastExpr 0x232e2ed7db0 <line:352:20> 'const char *' <ArrayToPointerDecay>
|         | | | | | | | |   `-StringLiteral 0x232e2ed6dc8 <col:20> 'const char [13]' lvalue "\n  right:   "
|         | | | | | | | `-ImplicitCastExpr 0x232e2edb480 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | | | | | |   `-MemberExpr 0x232e2ed7e58 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .right 0x232e2ebed30
|         | | | | | | |     `-DeclRefExpr 0x232e2ed7e38 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x232e2ebeaf8 'layout' 'const alt::ViewMatrixLayout &'
|         | | | | | | `-ImplicitCastExpr 0x232e2edc550 <line:353:20> 'const char *' <ArrayToPointerDecay>
|         | | | | | |   `-StringLiteral 0x232e2edb568 <col:20> 'const char [13]' lvalue "\n  up:      "
|         | | | | | `-ImplicitCastExpr 0x232e2edd540 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | | | |   `-MemberExpr 0x232e2edc5f8 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .up 0x232e2ebed98
|         | | | | |     `-DeclRefExpr 0x232e2edc5d8 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x232e2ebeaf8 'layout' 'const alt::ViewMatrixLayout &'
|         | | | | `-ImplicitCastExpr 0x232e2ede5b0 <line:354:20> 'const char *' <ArrayToPointerDecay>
|         | | | |   `-StringLiteral 0x232e2edd5d0 <col:20> 'const char [13]' lvalue "\n  forward: "
|         | | | `-ImplicitCastExpr 0x232e2edf5a0 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | |   `-MemberExpr 0x232e2ede658 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .forward 0x232e2ebee00
|         | | |     `-DeclRefExpr 0x232e2ede638 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x232e2ebeaf8 'layout' 'const alt::ViewMatrixLayout &'
|         | | `-ImplicitCastExpr 0x232e2ee0610 <line:355:20> 'const char *' <ArrayToPointerDecay>
|         | |   `-StringLiteral 0x232e2edf630 <col:20> 'const char [13]' lvalue "\n  pos:     "
|         | `-ImplicitCastExpr 0x232e2ee1600 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         |   `-MemberExpr 0x232e2ee06b8 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .pos 0x232e2ebee68
|         |     `-DeclRefExpr 0x232e2ee0698 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x232e2ebeaf8 'layout' 'const alt::ViewMatrixLayout &'
|         `-ImplicitCastExpr 0x232e2f04d30 <line:356:20> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x232e2ee1690 <col:20> 'const char [4]' lvalue "\n}\n"
|-FieldDecl 0x232e2ebed30 <line:359:9, col:18> col:18 referenced right 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|-FieldDecl 0x232e2ebed98 <col:9, col:25> col:25 referenced up 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|-FieldDecl 0x232e2ebee00 <col:9, col:29> col:29 referenced forward 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
`-FieldDecl 0x232e2ebee68 <col:9, col:38> col:38 referenced pos 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrix = alt::Matrix
ClassTemplateSpecializationDecl 0x232e2f04ec8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:173:5, line:208:5> line:174:11 class Matrix
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::ViewMatrixLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::String = alt::String
CXXRecordDecl 0x232e3156868 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/String.h:13:2, line:142:2> line:13:8 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x232e3156988 <col:2, col:8> col:8 implicit referenced class String
|-AccessSpecDecl 0x232e3156a18 <line:15:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e3156c08 <line:16:3, line:22:3> line:16:3 used String 'void (alt::Size, char)'
| |-ParmVarDecl 0x232e3156a80 <col:10, col:15> col:15 used _size 'alt::Size':'unsigned long long'
| |-ParmVarDecl 0x232e3156af8 <col:22, col:34> col:27 used fill 'char' cinit
| | `-CharacterLiteral 0x232e315a248 <col:34> 'char' 0
| |-CXXCtorInitializer Field 0x232e3159cf0 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e315a2a0 <line:17:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e315a260 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3156a80 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e315a750 <line:18:3, line:22:3>
|   |-BinaryOperator 0x232e315a458 <line:19:4, col:28> 'char *' lvalue '='
|   | |-MemberExpr 0x232e315a2f8 <col:4> 'char *' lvalue ->data 0x232e3159c88
|   | | `-CXXThisExpr 0x232e315a2e8 <col:4> 'alt::String *' implicit this
|   | `-CXXNewExpr 0x232e315a418 <col:11, col:28> 'char *' array Function 0x232e1e658b8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|   |   `-BinaryOperator 0x232e315a3c0 <col:20, col:27> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x232e315a390 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x232e315a338 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
|   |     |   `-CXXThisExpr 0x232e315a328 <col:20> 'alt::String *' implicit this
|   |     `-ImplicitCastExpr 0x232e315a3a8 <col:27> 'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x232e315a368 <col:27> 'int' 1
|   |-CallExpr 0x232e315a598 <line:20:4, col:27> 'void *'
|   | |-ImplicitCastExpr 0x232e315a580 <col:4> 'void *(*)(void *, int, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x232e315a560 <col:4> 'void *(void *, int, size_t) __attribute__((cdecl))':'void *(void *, int, size_t)' lvalue Function 0x232e1f2fc98 'memset' 'void *(void *, int, size_t) __attribute__((cdecl))':'void *(void *, int, size_t)'
|   | |-ImplicitCastExpr 0x232e315a5e8 <col:11> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x232e315a5d0 <col:11> 'char *' <LValueToRValue>
|   | |   `-MemberExpr 0x232e315a4d0 <col:11> 'char *' lvalue ->data 0x232e3159c88
|   | |     `-CXXThisExpr 0x232e315a4c0 <col:11> 'alt::String *' implicit this
|   | |-ImplicitCastExpr 0x232e315a618 <col:17> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x232e315a600 <col:17> 'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e315a500 <col:17> 'char' lvalue ParmVar 0x232e3156af8 'fill' 'char'
|   | `-ImplicitCastExpr 0x232e315a630 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e315a530 <col:23> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
|   |     `-CXXThisExpr 0x232e315a520 <col:23> 'alt::String *' implicit this
|   `-BinaryOperator 0x232e315a730 <line:21:4, col:17> 'char' lvalue '='
|     |-ArraySubscriptExpr 0x232e315a6f8 <col:4, col:13> 'char' lvalue
|     | |-ImplicitCastExpr 0x232e315a6c8 <col:4> 'char *' <LValueToRValue>
|     | | `-MemberExpr 0x232e315a658 <col:4> 'char *' lvalue ->data 0x232e3159c88
|     | |   `-CXXThisExpr 0x232e315a648 <col:4> 'alt::String *' implicit this
|     | `-ImplicitCastExpr 0x232e315a6e0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   `-MemberExpr 0x232e315a698 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
|     |     `-CXXThisExpr 0x232e315a688 <col:9> 'alt::String *' implicit this
|     `-CharacterLiteral 0x232e315a718 <col:17> 'char' 0
|-FunctionTemplateDecl 0x232e3156f50 <line:24:3, line:35:3> line:25:3 String
| |-TemplateTypeParmDecl 0x232e3156cc0 <line:24:12, col:18> col:18 referenced class depth 0 index 0 Iter
| |-CXXConstructorDecl 0x232e3156ea8 <line:25:3, line:35:3> line:25:3 String 'void (Iter, Iter)'
| | |-ParmVarDecl 0x232e3156d60 <col:10, col:15> col:15 referenced first 'Iter'
| | |-ParmVarDecl 0x232e3156dd8 <col:22, col:27> col:27 referenced last 'Iter'
| | `-CompoundStmt 0x232e38547e0 <line:26:3, line:35:3>
| |   |-BinaryOperator 0x232e3854248 <line:27:4, col:36> '<dependent type>' '='
| |   | |-MemberExpr 0x232e3854140 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
| |   | | `-CXXThisExpr 0x232e3854130 <col:4> 'alt::String *' implicit this
| |   | `-CallExpr 0x232e3854218 <col:11, col:36> '<dependent type>'
| |   |   |-UnresolvedLookupExpr 0x232e3854190 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = 'distance' 0x232e27e1b18
| |   |   |-DeclRefExpr 0x232e38541d8 <col:25> 'Iter' lvalue ParmVar 0x232e3156d60 'first' 'Iter'
| |   |   `-DeclRefExpr 0x232e38541f8 <col:32> 'Iter' lvalue ParmVar 0x232e3156dd8 'last' 'Iter'
| |   |-BinaryOperator 0x232e38543b0 <line:29:4, col:28> 'char *' lvalue '='
| |   | |-MemberExpr 0x232e3854278 <col:4> 'char *' lvalue ->data 0x232e3159c88
| |   | | `-CXXThisExpr 0x232e3854268 <col:4> 'alt::String *' implicit this
| |   | `-CXXNewExpr 0x232e3854370 <col:11, col:28> 'char *' array Function 0x232e1e658b8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |   `-BinaryOperator 0x232e3854340 <col:20, col:27> 'unsigned long long' '+'
| |   |     |-ImplicitCastExpr 0x232e3854310 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   |     | `-MemberExpr 0x232e38542b8 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
| |   |     |   `-CXXThisExpr 0x232e38542a8 <col:20> 'alt::String *' implicit this
| |   |     `-ImplicitCastExpr 0x232e3854328 <col:27> 'unsigned long long' <IntegralCast>
| |   |       `-IntegerLiteral 0x232e38542e8 <col:27> 'int' 1
| |   |-ForStmt 0x232e38546a0 <line:31:4, line:32:24>
| |   | |-DeclStmt 0x232e3854488 <line:31:9, col:19>
| |   | | `-VarDecl 0x232e38543e0 <col:9, col:18> col:14 referenced i 'alt::Size':'unsigned long long' cinit
| |   | |   `-ImplicitCastExpr 0x232e3854470 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
| |   | |     `-IntegerLiteral 0x232e3854448 <col:18> 'int' 0
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x232e38544e0 <col:21, col:30> '<dependent type>' '!='
| |   | | |-DeclRefExpr 0x232e38544a0 <col:21> 'Iter' lvalue ParmVar 0x232e3156d60 'first' 'Iter'
| |   | | `-DeclRefExpr 0x232e38544c0 <col:30> 'Iter' lvalue ParmVar 0x232e3156dd8 'last' 'Iter'
| |   | |-UnaryOperator 0x232e3854520 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
| |   | | `-DeclRefExpr 0x232e3854500 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x232e38543e0 'i' 'alt::Size':'unsigned long long'
| |   | `-BinaryOperator 0x232e3854680 <line:32:5, col:24> '<dependent type>' '='
| |   |   |-ArraySubscriptExpr 0x232e38545c8 <col:5, col:11> 'char' lvalue
| |   |   | |-ImplicitCastExpr 0x232e3854598 <col:5> 'char *' <LValueToRValue>
| |   |   | | `-MemberExpr 0x232e3854548 <col:5> 'char *' lvalue ->data 0x232e3159c88
| |   |   | |   `-CXXThisExpr 0x232e3854538 <col:5> 'alt::String *' implicit this
| |   |   | `-ImplicitCastExpr 0x232e38545b0 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   |   |   `-DeclRefExpr 0x232e3854578 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x232e38543e0 'i' 'alt::Size':'unsigned long long'
| |   |   `-UnaryOperator 0x232e3854668 <col:15, col:24> '<dependent type>' prefix '*' cannot overflow
| |   |     `-ParenExpr 0x232e3854648 <col:16, col:24> '<dependent type>'
| |   |       `-UnaryOperator 0x232e3854630 <col:17, col:22> '<dependent type>' postfix '++' cannot overflow
| |   |         `-DeclRefExpr 0x232e38545e8 <col:17> 'Iter' lvalue ParmVar 0x232e3156d60 'first' 'Iter'
| |   `-BinaryOperator 0x232e38547c0 <line:34:4, col:17> 'char' lvalue '='
| |     |-ArraySubscriptExpr 0x232e3854788 <col:4, col:13> 'char' lvalue
| |     | |-ImplicitCastExpr 0x232e3854758 <col:4> 'char *' <LValueToRValue>
| |     | | `-MemberExpr 0x232e38546e8 <col:4> 'char *' lvalue ->data 0x232e3159c88
| |     | |   `-CXXThisExpr 0x232e38546d8 <col:4> 'alt::String *' implicit this
| |     | `-ImplicitCastExpr 0x232e3854770 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     |   `-MemberExpr 0x232e3854728 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
| |     |     `-CXXThisExpr 0x232e3854718 <col:9> 'alt::String *' implicit this
| |     `-CharacterLiteral 0x232e38547a8 <col:17> 'char' 0
| `-CXXConstructorDecl 0x232e315aae8 <line:25:3, line:35:3> line:25:3 used String 'void (const char *, const char *)'
|   |-TemplateArgument type 'const char *'
|   |-ParmVarDecl 0x232e315a958 <col:10, col:15> col:15 used first 'const char *':'const char *'
|   |-ParmVarDecl 0x232e315a9d0 <col:22, col:27> col:27 used last 'const char *':'const char *'
|   `-CompoundStmt 0x232e385a618 <line:26:3, line:35:3>
|     |-BinaryOperator 0x232e385a228 <line:27:4, col:36> 'alt::Size':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x232e3854140 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
|     | | `-CXXThisExpr 0x232e3854130 <col:4> 'alt::String *' implicit this
|     | `-ImplicitCastExpr 0x232e385a210 <col:11, col:36> 'alt::Size':'unsigned long long' <IntegralCast>
|     |   `-CallExpr 0x232e385a1b0 <col:11, col:36> '_Iter_diff_t<const char *>':'long long'
|     |     |-ImplicitCastExpr 0x232e385a198 <col:11, col:16> '_Iter_diff_t<const char *> (*)(const char *, const char *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x232e3858fd0 <col:11, col:16> '_Iter_diff_t<const char *> (const char *, const char *)' lvalue Function 0x232e3858e88 'distance' '_Iter_diff_t<const char *> (const char *, const char *)' (FunctionTemplate 0x232e27e1b18 'distance')
|     |     |-ImplicitCastExpr 0x232e385a1e0 <col:25> 'const char *':'const char *' <LValueToRValue>
|     |     | `-DeclRefExpr 0x232e3854858 <col:25> 'const char *':'const char *' lvalue ParmVar 0x232e315a958 'first' 'const char *':'const char *'
|     |     `-ImplicitCastExpr 0x232e385a1f8 <col:32> 'const char *':'const char *' <LValueToRValue>
|     |       `-DeclRefExpr 0x232e3854878 <col:32> 'const char *':'const char *' lvalue ParmVar 0x232e315a9d0 'last' 'const char *':'const char *'
|     |-BinaryOperator 0x232e385a2d8 <line:29:4, col:11> 'char *' lvalue '='
|     | |-MemberExpr 0x232e3854278 <col:4> 'char *' lvalue ->data 0x232e3159c88
|     | | `-CXXThisExpr 0x232e3854268 <col:4> 'alt::String *' implicit this
|     | `-CXXNewExpr 0x232e385a298 <col:11> 'char *' array Function 0x232e1e658b8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |   `-BinaryOperator 0x232e385a278 <col:20, col:27> 'unsigned long long' '+'
|     |     |-ImplicitCastExpr 0x232e385a248 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |     | `-MemberExpr 0x232e38542b8 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
|     |     |   `-CXXThisExpr 0x232e38542a8 <col:20> 'alt::String *' implicit this
|     |     `-ImplicitCastExpr 0x232e385a260 <col:27> 'unsigned long long' <IntegralCast>
|     |       `-IntegerLiteral 0x232e38542e8 <col:27> 'int' 1
|     |-ForStmt 0x232e385a570 <line:31:4, line:32:24>
|     | |-DeclStmt 0x232e385a378 <line:31:9, col:19>
|     | | `-VarDecl 0x232e385a2f8 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|     | |   `-ImplicitCastExpr 0x232e385a360 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x232e3854448 <col:18> 'int' 0
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x232e385a400 <col:21, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x232e385a3d0 <col:21> 'const char *':'const char *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x232e385a390 <col:21> 'const char *':'const char *' lvalue ParmVar 0x232e315a958 'first' 'const char *':'const char *'
|     | | `-ImplicitCastExpr 0x232e385a3e8 <col:30> 'const char *':'const char *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x232e385a3b0 <col:30> 'const char *':'const char *' lvalue ParmVar 0x232e315a9d0 'last' 'const char *':'const char *'
|     | |-UnaryOperator 0x232e385a440 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
|     | | `-DeclRefExpr 0x232e385a420 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x232e385a2f8 'i' 'alt::Size':'unsigned long long'
|     | `-BinaryOperator 0x232e385a550 <line:32:5, col:24> 'char' lvalue '='
|     |   |-ArraySubscriptExpr 0x232e385a4a8 <col:5, col:11> 'char' lvalue
|     |   | |-ImplicitCastExpr 0x232e385a478 <col:5> 'char *' <LValueToRValue>
|     |   | | `-MemberExpr 0x232e3854548 <col:5> 'char *' lvalue ->data 0x232e3159c88
|     |   | |   `-CXXThisExpr 0x232e3854538 <col:5> 'alt::String *' implicit this
|     |   | `-ImplicitCastExpr 0x232e385a490 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x232e385a458 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x232e385a2f8 'i' 'alt::Size':'unsigned long long'
|     |   `-ImplicitCastExpr 0x232e385a538 <col:15, col:24> 'char' <LValueToRValue>
|     |     `-UnaryOperator 0x232e385a520 <col:15, col:24> 'const char' lvalue prefix '*' cannot overflow
|     |       `-ParenExpr 0x232e385a500 <col:16, col:24> 'const char *':'const char *'
|     |         `-UnaryOperator 0x232e385a4e8 <col:17, col:22> 'const char *':'const char *' postfix '++'
|     |           `-DeclRefExpr 0x232e385a4c8 <col:17> 'const char *':'const char *' lvalue ParmVar 0x232e315a958 'first' 'const char *':'const char *'
|     `-BinaryOperator 0x232e385a5f8 <line:34:4, col:17> 'char' lvalue '='
|       |-ArraySubscriptExpr 0x232e385a5d8 <col:4, col:13> 'char' lvalue
|       | |-ImplicitCastExpr 0x232e385a5a8 <col:4> 'char *' <LValueToRValue>
|       | | `-MemberExpr 0x232e38546e8 <col:4> 'char *' lvalue ->data 0x232e3159c88
|       | |   `-CXXThisExpr 0x232e38546d8 <col:4> 'alt::String *' implicit this
|       | `-ImplicitCastExpr 0x232e385a5c0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e3854728 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
|       |     `-CXXThisExpr 0x232e3854718 <col:9> 'alt::String *' implicit this
|       `-CharacterLiteral 0x232e38547a8 <col:17> 'char' 0
|-CXXConstructorDecl 0x232e3157118 <line:37:3, line:41:3> line:37:3 used String 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e3156fd0 <col:10, col:22> col:22 used _data 'const char *'
| |-ParmVarDecl 0x232e3157048 <col:29, col:34> col:34 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x232e315ac10 <line:38:4, col:30> 'alt::String' 'void (const char *, const char *)'
| |   |-ImplicitCastExpr 0x232e315abf8 <col:11> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e315a778 <col:11> 'const char *' lvalue ParmVar 0x232e3156fd0 '_data' 'const char *'
| |   `-BinaryOperator 0x232e315a808 <col:18, col:26> 'const char *' '+'
| |     |-ImplicitCastExpr 0x232e315a7d8 <col:18> 'const char *' <LValueToRValue>
| |     | `-DeclRefExpr 0x232e315a798 <col:18> 'const char *' lvalue ParmVar 0x232e3156fd0 '_data' 'const char *'
| |     `-ImplicitCastExpr 0x232e315a7f0 <col:26> 'alt::Size':'unsigned long long' <LValueToRValue>
| |       `-DeclRefExpr 0x232e315a7b8 <col:26> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3157048 'size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e315ac78 <line:39:3, line:41:3>
|-CXXConstructorDecl 0x232e31571f0 <line:43:3, line:47:3> line:43:3 used String 'void ()'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x232e315ad60 <line:44:4, col:21> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e315ad30 <col:11> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e315ac88 <col:11> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e315ad48 <col:20> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e315ac98 <col:20> 'int' 0
| `-CompoundStmt 0x232e315adc8 <line:45:3, line:47:3>
|-CXXConstructorDecl 0x232e3157340 <line:49:3, line:53:3> line:49:3 used String 'void (const char *)'
| |-ParmVarDecl 0x232e31572b0 <col:10, col:22> col:22 used _str 'const char *'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x232e315af60 <line:50:4, col:29> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e315af48 <col:11> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e315add8 <col:11> 'const char *' lvalue ParmVar 0x232e31572b0 '_str' 'const char *'
| |   `-CallExpr 0x232e315ae98 <col:17, col:28> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e315ae80 <col:17> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e315ae60 <col:17> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e315aec0 <col:24> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e315ae40 <col:24> 'const char *' lvalue ParmVar 0x232e31572b0 '_str' 'const char *'
| `-CompoundStmt 0x232e315afc8 <line:51:3, line:53:3>
|-FunctionTemplateDecl 0x232e3157700 <line:55:3, line:56:34> col:3 String
| |-NonTypeTemplateParmDecl 0x232e3157400 <line:55:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e3157658 <line:56:3, col:34> col:3 String 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e3157568 <col:10, col:33> col:22 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e34219e8 <col:3, col:34> col:3 String 'void (const char (&)[9])'
|   |-TemplateArgument integral 9
|   `-ParmVarDecl 0x232e34218f8 <col:10, col:33> col:22 _data 'const char (&)[9]'
|-CXXConstructorDecl 0x232e31578f8 <line:62:3, line:66:3> line:62:3 used String 'void (const std::string &)'
| |-ParmVarDecl 0x232e3157830 <col:10, col:29> col:29 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x232e315b188 <line:63:4, col:35> 'alt::String' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e315b088 <col:11, col:21> 'const char *'
| |   | `-MemberExpr 0x232e315b058 <col:11, col:16> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e315afd8 <col:11> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e3157830 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e315b0f8 <col:24, col:34> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e315b0c8 <col:24, col:29> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e315b0a8 <col:24> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e3157830 '_str' 'const std::string &'
| `-CompoundStmt 0x232e315b1f0 <line:64:3, line:66:3>
|-CXXConstructorDecl 0x232e3157aa8 <line:68:3, line:72:3> line:68:3 used String 'void (const alt::String &)'
| |-ParmVarDecl 0x232e31579e8 <col:10, col:24> col:24 used that 'const alt::String &'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x232e315b358 <line:69:4, col:31> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e315b328 <col:11, col:16> 'const char *' <NoOp>
| |   | `-ImplicitCastExpr 0x232e315b310 <col:11, col:16> 'char *' <LValueToRValue>
| |   |   `-MemberExpr 0x232e315b220 <col:11, col:16> 'char *const' lvalue .data 0x232e3159c88
| |   |     `-DeclRefExpr 0x232e315b200 <col:11> 'const alt::String' lvalue ParmVar 0x232e31579e8 'that' 'const alt::String &'
| |   `-ImplicitCastExpr 0x232e315b340 <col:22, col:27> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     `-MemberExpr 0x232e315b270 <col:22, col:27> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e3159cf0
| |       `-DeclRefExpr 0x232e315b250 <col:22> 'const alt::String' lvalue ParmVar 0x232e31579e8 'that' 'const alt::String &'
| `-CompoundStmt 0x232e315b3c0 <line:70:3, line:72:3>
|-CXXConstructorDecl 0x232e3157c58 <line:74:3, line:80:3> line:74:3 used String 'void (alt::String &&)'
| |-ParmVarDecl 0x232e3157b98 <col:10, col:19> col:19 used that 'alt::String &&'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x232e315b3f8 <line:75:4, col:11> 'alt::String' 'void ()'
| `-CompoundStmt 0x232e315b628 <line:76:3, line:80:3>
|   |-DeclStmt 0x232e315b4f0 <line:77:4, col:14>
|   | `-VarDecl 0x232e315b460 <col:4, col:11> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x232e315b4c8 <col:11> 'alt::String' 'void ()'
|   |-CXXMemberCallExpr 0x232e315b578 <line:78:4, col:17> 'void'
|   | |-MemberExpr 0x232e315b528 <col:4, col:8> '<bound member function type>' .Swap 0x232e3159e18
|   | | `-DeclRefExpr 0x232e315b508 <col:4> 'alt::String' lvalue Var 0x232e315b460 'tmp' 'alt::String'
|   | `-DeclRefExpr 0x232e315b558 <col:13> 'alt::String' lvalue ParmVar 0x232e3157b98 'that' 'alt::String &&'
|   `-CXXMemberCallExpr 0x232e315b600 <line:79:4, col:12> 'void'
|     |-MemberExpr 0x232e315b5b0 <col:4> '<bound member function type>' ->Swap 0x232e3159e18
|     | `-CXXThisExpr 0x232e315b5a0 <col:4> 'alt::String *' implicit this
|     `-DeclRefExpr 0x232e315b5e0 <col:9> 'alt::String' lvalue Var 0x232e315b460 'tmp' 'alt::String'
|-CXXDestructorDecl 0x232e3157d50 <line:82:3, col:30> col:3 used ~String 'void () noexcept'
| `-CompoundStmt 0x232e315b6c8 <col:13, col:30>
|   `-CXXDeleteExpr 0x232e315b6a8 <col:15, col:24> 'void' array Function 0x232e1e661c8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x232e315b690 <col:24> 'char *' <LValueToRValue>
|       `-MemberExpr 0x232e315b660 <col:24> 'char *' lvalue ->data 0x232e3159c88
|         `-CXXThisExpr 0x232e315b650 <col:24> 'alt::String *' implicit this
|-CXXMethodDecl 0x232e3157f10 <line:84:3, col:50> col:9 used operator[] 'char &(alt::Size)'
| |-ParmVarDecl 0x232e3157e40 <col:20, col:25> col:25 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e315b7a0 <col:30, col:50>
|   `-ReturnStmt 0x232e315b790 <col:32, col:47>
|     `-ArraySubscriptExpr 0x232e315b770 <col:39, col:47> 'char' lvalue
|       |-ImplicitCastExpr 0x232e315b740 <col:39> 'char *' <LValueToRValue>
|       | `-MemberExpr 0x232e315b6f0 <col:39> 'char *' lvalue ->data 0x232e3159c88
|       |   `-CXXThisExpr 0x232e315b6e0 <col:39> 'alt::String *' implicit this
|       `-ImplicitCastExpr 0x232e315b758 <col:44> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x232e315b720 <col:44> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3157e40 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e31580e8 <line:85:3, col:55> col:8 used operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e3157fc8 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e315b890 <col:35, col:55>
|   `-ReturnStmt 0x232e315b880 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e315b868 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e315b848 <col:44, col:52> 'char' lvalue
|         |-ImplicitCastExpr 0x232e315b818 <col:44> 'char *' <LValueToRValue>
|         | `-MemberExpr 0x232e315b7c8 <col:44> 'char *const' lvalue ->data 0x232e3159c88
|         |   `-CXXThisExpr 0x232e315b7b8 <col:44> 'const alt::String *' implicit this
|         `-ImplicitCastExpr 0x232e315b830 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e315b7f8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3157fc8 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e3158298 <line:87:3, line:92:3> line:87:11 used operator= 'alt::String &(const alt::String &)'
| |-ParmVarDecl 0x232e31581a0 <col:21, col:35> col:35 used that 'const alt::String &'
| `-CompoundStmt 0x232e315ba98 <line:88:3, line:92:3>
|   |-DeclStmt 0x232e315b9c0 <line:89:4, col:20>
|   | `-VarDecl 0x232e315b8d8 <col:4, col:19> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x232e315b990 <col:11, col:19> 'alt::String' 'void (const alt::String &)'
|   |     `-DeclRefExpr 0x232e315b8a8 <col:15> 'const alt::String' lvalue ParmVar 0x232e31581a0 'that' 'const alt::String &'
|   |-CXXMemberCallExpr 0x232e315ba38 <line:90:4, col:12> 'void'
|   | |-MemberExpr 0x232e315b9e8 <col:4> '<bound member function type>' ->Swap 0x232e3159e18
|   | | `-CXXThisExpr 0x232e315b9d8 <col:4> 'alt::String *' implicit this
|   | `-DeclRefExpr 0x232e315ba18 <col:9> 'alt::String' lvalue Var 0x232e315b8d8 'tmp' 'alt::String'
|   `-ReturnStmt 0x232e315ba88 <line:91:4, col:12>
|     `-UnaryOperator 0x232e315ba70 <col:11, col:12> 'alt::String' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e315ba60 <col:12> 'alt::String *' this
|-CXXMethodDecl 0x232e3158418 <line:94:3, line:99:3> line:94:11 used operator= 'alt::String &(alt::String &&)'
| |-ParmVarDecl 0x232e3158350 <col:21, col:30> col:30 used that 'alt::String &&'
| `-CompoundStmt 0x232e315bcc8 <line:95:3, line:99:3>
|   |-DeclStmt 0x232e315bbf0 <line:96:4, col:20>
|   | `-VarDecl 0x232e315baf0 <col:4, col:19> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x232e315bbc0 <col:11, col:19> 'alt::String' 'void (const alt::String &)'
|   |     `-ImplicitCastExpr 0x232e315bba8 <col:15> 'const alt::String' lvalue <NoOp>
|   |       `-DeclRefExpr 0x232e315bac0 <col:15> 'alt::String' lvalue ParmVar 0x232e3158350 'that' 'alt::String &&'
|   |-CXXMemberCallExpr 0x232e315bc68 <line:97:4, col:12> 'void'
|   | |-MemberExpr 0x232e315bc18 <col:4> '<bound member function type>' ->Swap 0x232e3159e18
|   | | `-CXXThisExpr 0x232e315bc08 <col:4> 'alt::String *' implicit this
|   | `-DeclRefExpr 0x232e315bc48 <col:9> 'alt::String' lvalue Var 0x232e315baf0 'tmp' 'alt::String'
|   `-ReturnStmt 0x232e315bcb8 <line:98:4, col:12>
|     `-UnaryOperator 0x232e315bca0 <col:11, col:12> 'alt::String' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e315bc90 <col:12> 'alt::String *' this
|-CXXMethodDecl 0x232e31584e0 <line:101:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e315bdb8 <col:24, col:44>
|   `-ReturnStmt 0x232e315bda8 <col:26, col:41>
|     `-BinaryOperator 0x232e315bd88 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e315bd58 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e315bd00 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e3159cf0
|       |   `-CXXThisExpr 0x232e315bcf0 <col:33> 'const alt::String *' implicit this
|       `-ImplicitCastExpr 0x232e315bd70 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e315bd30 <col:41> 'int' 0
|-CXXMethodDecl 0x232e31585a8 <line:103:3, col:46> col:15 used GetData 'const char *() const'
| `-CompoundStmt 0x232e315be50 <col:31, col:46>
|   `-ReturnStmt 0x232e315be40 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e315be28 <col:40> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x232e315be10 <col:40> 'char *' <LValueToRValue>
|         `-MemberExpr 0x232e315bde0 <col:40> 'char *const' lvalue ->data 0x232e3159c88
|           `-CXXThisExpr 0x232e315bdd0 <col:40> 'const alt::String *' implicit this
|-CXXMethodDecl 0x232e3158670 <line:104:3, col:34> col:9 GetData 'char *()'
| `-CompoundStmt 0x232e315bed0 <col:19, col:34>
|   `-ReturnStmt 0x232e315bec0 <col:21, col:28>
|     `-ImplicitCastExpr 0x232e315bea8 <col:28> 'char *' <LValueToRValue>
|       `-MemberExpr 0x232e315be78 <col:28> 'char *' lvalue ->data 0x232e3159c88
|         `-CXXThisExpr 0x232e315be68 <col:28> 'alt::String *' implicit this
|-CXXMethodDecl 0x232e3158788 <line:105:3, col:39> col:8 used GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e315bf50 <col:24, col:39>
|   `-ReturnStmt 0x232e315bf40 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e315bf28 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e315bef8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e3159cf0
|         `-CXXThisExpr 0x232e315bee8 <col:33> 'const alt::String *' implicit this
|-CXXMethodDecl 0x232e31588f8 <line:107:3, col:104> col:8 used operator== 'bool (alt::String) const'
| |-ParmVarDecl 0x232e3158838 <col:19, col:26> col:26 used that 'alt::String'
| `-CompoundStmt 0x232e315c3e8 <col:38, col:104>
|   `-ReturnStmt 0x232e315c3d8 <col:40, col:101>
|     `-BinaryOperator 0x232e315c2e8 <col:47, col:101> 'bool' '&&'
|       |-BinaryOperator 0x232e315c028 <col:47, col:60> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e315bff8 <col:47> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e315bf78 <col:47> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e3159cf0
|       | |   `-CXXThisExpr 0x232e315bf68 <col:47> 'const alt::String *' implicit this
|       | `-ImplicitCastExpr 0x232e315c010 <col:55, col:60> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e315bfc8 <col:55, col:60> 'alt::Size':'unsigned long long' lvalue .size 0x232e3159cf0
|       |     `-DeclRefExpr 0x232e315bfa8 <col:55> 'alt::String' lvalue ParmVar 0x232e3158838 'that' 'alt::String'
|       `-BinaryOperator 0x232e315c2c8 <col:68, col:101> 'bool' '=='
|         |-CallExpr 0x232e315c1f0 <col:68, col:96> 'int'
|         | |-ImplicitCastExpr 0x232e315c1d8 <col:68> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e315c160 <col:68> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e315c240 <col:75> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e315c228 <col:75> 'char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e315c0a0 <col:75> 'char *const' lvalue ->data 0x232e3159c88
|         | |     `-CXXThisExpr 0x232e315c090 <col:75> 'const alt::String *' implicit this
|         | |-ImplicitCastExpr 0x232e315c270 <col:81, col:86> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e315c258 <col:81, col:86> 'char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e315c0f0 <col:81, col:86> 'char *' lvalue .data 0x232e3159c88
|         | |     `-DeclRefExpr 0x232e315c0d0 <col:81> 'alt::String' lvalue ParmVar 0x232e3158838 'that' 'alt::String'
|         | `-ImplicitCastExpr 0x232e315c288 <col:92> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e315c130 <col:92> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e3159cf0
|         |     `-CXXThisExpr 0x232e315c120 <col:92> 'const alt::String *' implicit this
|         `-IntegerLiteral 0x232e315c2a0 <col:101> 'int' 0
|-CXXMethodDecl 0x232e3158a40 <line:108:3, col:65> col:8 operator!= 'bool (alt::String) const'
| |-ParmVarDecl 0x232e31589b0 <col:19, col:26> col:26 used that 'alt::String'
| `-CompoundStmt 0x232e315c5e8 <col:38, col:65>
|   `-ReturnStmt 0x232e315c5d8 <col:40, col:62>
|     `-ExprWithCleanups 0x232e315c5c0 <col:47, col:62> 'bool'
|       `-UnaryOperator 0x232e315c5a8 <col:47, col:62> 'bool' prefix '!' cannot overflow
|         `-ParenExpr 0x232e315c588 <col:48, col:62> 'bool'
|           `-CXXOperatorCallExpr 0x232e315c550 <col:49, col:58> 'bool'
|             |-ImplicitCastExpr 0x232e315c538 <col:55> 'bool (*)(alt::String) const' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x232e315c4e8 <col:55> 'bool (alt::String) const' lvalue CXXMethod 0x232e31588f8 'operator==' 'bool (alt::String) const'
|             |-UnaryOperator 0x232e315c410 <col:49, col:50> 'const alt::String' lvalue prefix '*' cannot overflow
|             | `-CXXThisExpr 0x232e315c400 <col:50> 'const alt::String *' this
|             `-CXXBindTemporaryExpr 0x232e315c4c8 <col:58> 'alt::String' (CXXTemporary 0x232e315c4c0)
|               `-CXXConstructExpr 0x232e315c490 <col:58> 'alt::String' 'void (const alt::String &)'
|                 `-ImplicitCastExpr 0x232e315c478 <col:58> 'const alt::String' lvalue <NoOp>
|                   `-DeclRefExpr 0x232e315c428 <col:58> 'alt::String' lvalue ParmVar 0x232e31589b0 'that' 'alt::String'
|-CXXMethodDecl 0x232e3158b78 <line:110:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e3161db8 <col:32, col:66>
|   `-ReturnStmt 0x232e3161da8 <col:34, col:63>
|     `-ExprWithCleanups 0x232e3161d90 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e3161d70 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3161d68)
|         `-CXXTemporaryObjectExpr 0x232e3161d28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e3161cf8 <col:53> 'const char *' <NoOp>
|           | `-ImplicitCastExpr 0x232e3161ce0 <col:53> 'char *' <LValueToRValue>
|           |   `-MemberExpr 0x232e315c658 <col:53> 'char *const' lvalue ->data 0x232e3159c88
|           |     `-CXXThisExpr 0x232e315c648 <col:53> 'const alt::String *' implicit this
|           `-ImplicitCastExpr 0x232e3161d10 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e315c698 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e3159cf0
|               `-CXXThisExpr 0x232e315c688 <col:59> 'const alt::String *' implicit this
|-CXXMethodDecl 0x232e3158c40 <line:111:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e3161e50 <col:28, col:43>
|   `-ReturnStmt 0x232e3161e40 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e3161e28 <col:37> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x232e3161e10 <col:37> 'char *' <LValueToRValue>
|         `-MemberExpr 0x232e3161de0 <col:37> 'char *const' lvalue ->data 0x232e3159c88
|           `-CXXThisExpr 0x232e3161dd0 <col:37> 'const alt::String *' implicit this
|-FriendDecl 0x232e3158ef8 <line:113:3, col:139> col:17
| `-FunctionDecl 0x232e3158e38 parent 0x232e31567f8 <col:3, col:139> col:17 operator+ 'alt::String (const alt::String &, const alt::String &)'
|   |-ParmVarDecl 0x232e3158cf0 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x232e3158d68 <col:46, col:60> col:60 used rhs 'const alt::String &'
|   `-CompoundStmt 0x232e31621b0 <col:65, col:139>
|     `-ReturnStmt 0x232e31621a0 <col:67, col:136>
|       `-ExprWithCleanups 0x232e3162188 <col:74, col:136> 'alt::String'
|         `-CXXBindTemporaryExpr 0x232e3162168 <col:74, col:136> 'alt::String' (CXXTemporary 0x232e3162160)
|           `-CallExpr 0x232e3162120 <col:74, col:136> 'alt::String'
|             |-ImplicitCastExpr 0x232e3162108 <col:74> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x232e3161e68 <col:74> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x232e315a188 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x232e3161ed8 <col:81, col:90> 'const char *'
|             | `-MemberExpr 0x232e3161ea8 <col:81, col:85> '<bound member function type>' .CStr 0x232e3158c40
|             |   `-DeclRefExpr 0x232e3161e88 <col:81> 'const alt::String' lvalue ParmVar 0x232e3158cf0 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x232e3161f48 <col:93, col:105> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x232e3161f18 <col:93, col:97> '<bound member function type>' .GetSize 0x232e3158788
|             |   `-DeclRefExpr 0x232e3161ef8 <col:93> 'const alt::String' lvalue ParmVar 0x232e3158cf0 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x232e3162018 <col:108, col:120> 'const char *'
|             | `-MemberExpr 0x232e3161fe8 <col:108, col:112> '<bound member function type>' .GetData 0x232e31585a8
|             |   `-DeclRefExpr 0x232e3161f68 <col:108> 'const alt::String' lvalue ParmVar 0x232e3158d68 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x232e3162088 <col:123, col:135> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x232e3162058 <col:123, col:127> '<bound member function type>' .GetSize 0x232e3158788
|                 `-DeclRefExpr 0x232e3162038 <col:123> 'const alt::String' lvalue ParmVar 0x232e3158d68 'rhs' 'const alt::String &'
|-FriendDecl 0x232e3159158 <line:115:3, col:125> col:17
| `-FunctionDecl 0x232e3159098 parent 0x232e31567f8 <col:3, col:125> col:17 operator+ 'alt::String (const alt::String &, const char *)'
|   |-ParmVarDecl 0x232e3158f48 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x232e3158fc8 <col:46, col:58> col:58 used rhs 'const char *'
|   `-CompoundStmt 0x232e3162488 <col:63, col:125>
|     `-ReturnStmt 0x232e3162478 <col:65, col:122>
|       `-ExprWithCleanups 0x232e3162460 <col:72, col:122> 'alt::String'
|         `-CXXBindTemporaryExpr 0x232e3162440 <col:72, col:122> 'alt::String' (CXXTemporary 0x232e3162438)
|           `-CallExpr 0x232e31623e0 <col:72, col:122> 'alt::String'
|             |-ImplicitCastExpr 0x232e31623c8 <col:72> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x232e31621c8 <col:72> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x232e315a188 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x232e3162238 <col:79, col:88> 'const char *'
|             | `-MemberExpr 0x232e3162208 <col:79, col:83> '<bound member function type>' .CStr 0x232e3158c40
|             |   `-DeclRefExpr 0x232e31621e8 <col:79> 'const alt::String' lvalue ParmVar 0x232e3158f48 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x232e31622a8 <col:91, col:103> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x232e3162278 <col:91, col:95> '<bound member function type>' .GetSize 0x232e3158788
|             |   `-DeclRefExpr 0x232e3162258 <col:91> 'const alt::String' lvalue ParmVar 0x232e3158f48 'lhs' 'const alt::String &'
|             |-ImplicitCastExpr 0x232e3162420 <col:106> 'const char *' <LValueToRValue>
|             | `-DeclRefExpr 0x232e31622c8 <col:106> 'const char *' lvalue ParmVar 0x232e3158fc8 'rhs' 'const char *'
|             `-CallExpr 0x232e3162388 <col:111, col:121> 'size_t':'unsigned long long'
|               |-ImplicitCastExpr 0x232e3162370 <col:111> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x232e3162350 <col:111> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
|               `-ImplicitCastExpr 0x232e31623b0 <col:118> 'const char *' <LValueToRValue>
|                 `-DeclRefExpr 0x232e3162330 <col:118> 'const char *' lvalue ParmVar 0x232e3158fc8 'rhs' 'const char *'
|-FriendDecl 0x232e31593b8 <line:116:3, col:128> col:17
| `-FunctionDecl 0x232e31592f8 parent 0x232e31567f8 <col:3, col:128> col:17 operator+ 'alt::String (const char *, const alt::String &)'
|   |-ParmVarDecl 0x232e31591b0 <col:27, col:39> col:39 used lhs 'const char *'
|   |-ParmVarDecl 0x232e3159228 <col:44, col:58> col:58 used rhs 'const alt::String &'
|   `-CompoundStmt 0x232e31627c0 <col:63, col:128>
|     `-ReturnStmt 0x232e31627b0 <col:65, col:125>
|       `-ExprWithCleanups 0x232e3162798 <col:72, col:125> 'alt::String'
|         `-CXXBindTemporaryExpr 0x232e3162778 <col:72, col:125> 'alt::String' (CXXTemporary 0x232e3162770)
|           `-CallExpr 0x232e3162718 <col:72, col:125> 'alt::String'
|             |-ImplicitCastExpr 0x232e3162700 <col:72> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x232e31624a0 <col:72> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x232e315a188 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-ImplicitCastExpr 0x232e3162758 <col:79> 'const char *' <LValueToRValue>
|             | `-DeclRefExpr 0x232e31624c0 <col:79> 'const char *' lvalue ParmVar 0x232e31591b0 'lhs' 'const char *'
|             |-CallExpr 0x232e3162580 <col:84, col:94> 'size_t':'unsigned long long'
|             | |-ImplicitCastExpr 0x232e3162568 <col:84> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x232e3162548 <col:84> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
|             | `-ImplicitCastExpr 0x232e31625a8 <col:91> 'const char *' <LValueToRValue>
|             |   `-DeclRefExpr 0x232e3162528 <col:91> 'const char *' lvalue ParmVar 0x232e31591b0 'lhs' 'const char *'
|             |-CXXMemberCallExpr 0x232e3162670 <col:97, col:109> 'const char *'
|             | `-MemberExpr 0x232e3162640 <col:97, col:101> '<bound member function type>' .GetData 0x232e31585a8
|             |   `-DeclRefExpr 0x232e31625c0 <col:97> 'const alt::String' lvalue ParmVar 0x232e3159228 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x232e31626e0 <col:112, col:124> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x232e31626b0 <col:112, col:116> '<bound member function type>' .GetSize 0x232e3158788
|                 `-DeclRefExpr 0x232e3162690 <col:112> 'const alt::String' lvalue ParmVar 0x232e3159228 'rhs' 'const alt::String &'
|-FriendDecl 0x232e3159618 <line:118:3, col:109> col:17
| `-FunctionDecl 0x232e3159558 parent 0x232e31567f8 <col:3, col:109> col:17 operator+ 'alt::String (const alt::String &, char)'
|   |-ParmVarDecl 0x232e3159408 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x232e3159480 <col:46, col:51> col:51 used rhs 'char'
|   `-CompoundStmt 0x232e3162a10 <col:56, col:109>
|     `-ReturnStmt 0x232e3162a00 <col:58, col:106>
|       `-ExprWithCleanups 0x232e31629e8 <col:65, col:106> 'alt::String'
|         `-CXXBindTemporaryExpr 0x232e31629c8 <col:65, col:106> 'alt::String' (CXXTemporary 0x232e31629c0)
|           `-CallExpr 0x232e3162950 <col:65, col:106> 'alt::String'
|             |-ImplicitCastExpr 0x232e3162938 <col:65> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x232e31627d8 <col:65> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x232e315a188 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x232e3162848 <col:72, col:81> 'const char *'
|             | `-MemberExpr 0x232e3162818 <col:72, col:76> '<bound member function type>' .CStr 0x232e3158c40
|             |   `-DeclRefExpr 0x232e31627f8 <col:72> 'const alt::String' lvalue ParmVar 0x232e3159408 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x232e31628b8 <col:84, col:96> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x232e3162888 <col:84, col:88> '<bound member function type>' .GetSize 0x232e3158788
|             |   `-DeclRefExpr 0x232e3162868 <col:84> 'const alt::String' lvalue ParmVar 0x232e3159408 'lhs' 'const alt::String &'
|             |-ImplicitCastExpr 0x232e3162990 <col:99, col:100> 'const char *' <NoOp>
|             | `-UnaryOperator 0x232e31628f8 <col:99, col:100> 'char *' prefix '&' cannot overflow
|             |   `-DeclRefExpr 0x232e31628d8 <col:100> 'char' lvalue ParmVar 0x232e3159480 'rhs' 'char'
|             `-ImplicitCastExpr 0x232e31629a8 <col:105> 'alt::Size':'unsigned long long' <IntegralCast>
|               `-IntegerLiteral 0x232e3162910 <col:105> 'int' 1
|-FriendDecl 0x232e3159878 <line:119:3, col:112> col:17
| `-FunctionDecl 0x232e31597b8 parent 0x232e31567f8 <col:3, col:112> col:17 operator+ 'alt::String (char, const alt::String &)'
|   |-ParmVarDecl 0x232e3159668 <col:27, col:32> col:32 used lhs 'char'
|   |-ParmVarDecl 0x232e31596e0 <col:37, col:51> col:51 used rhs 'const alt::String &'
|   `-CompoundStmt 0x232e3162cc0 <col:56, col:112>
|     `-ReturnStmt 0x232e3162cb0 <col:58, col:109>
|       `-ExprWithCleanups 0x232e3162c98 <col:65, col:109> 'alt::String'
|         `-CXXBindTemporaryExpr 0x232e3162c78 <col:65, col:109> 'alt::String' (CXXTemporary 0x232e3162c70)
|           `-CallExpr 0x232e3162c00 <col:65, col:109> 'alt::String'
|             |-ImplicitCastExpr 0x232e3162be8 <col:65> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x232e3162a28 <col:65> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x232e315a188 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-ImplicitCastExpr 0x232e3162c40 <col:72, col:73> 'const char *' <NoOp>
|             | `-UnaryOperator 0x232e3162a68 <col:72, col:73> 'char *' prefix '&' cannot overflow
|             |   `-DeclRefExpr 0x232e3162a48 <col:73> 'char' lvalue ParmVar 0x232e3159668 'lhs' 'char'
|             |-ImplicitCastExpr 0x232e3162c58 <col:78> 'alt::Size':'unsigned long long' <IntegralCast>
|             | `-IntegerLiteral 0x232e3162a80 <col:78> 'int' 1
|             |-CXXMemberCallExpr 0x232e3162b58 <col:81, col:93> 'const char *'
|             | `-MemberExpr 0x232e3162b28 <col:81, col:85> '<bound member function type>' .GetData 0x232e31585a8
|             |   `-DeclRefExpr 0x232e3162aa8 <col:81> 'const alt::String' lvalue ParmVar 0x232e31596e0 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x232e3162bc8 <col:96, col:108> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x232e3162b98 <col:96, col:100> '<bound member function type>' .GetSize 0x232e3158788
|                 `-DeclRefExpr 0x232e3162b78 <col:96> 'const alt::String' lvalue ParmVar 0x232e31596e0 'rhs' 'const alt::String &'
|-FriendDecl 0x232e3159c00 <line:121:3, col:100> col:24
| `-FunctionDecl 0x232e3159b40 parent 0x232e31567f8 <col:3, col:100> col:24 operator<< 'std::ostream &(std::ostream &, alt::String)'
|   |-ParmVarDecl 0x232e31599a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e3159a18 <col:57, col:64> col:64 used str 'alt::String'
|   `-CompoundStmt 0x232e3164e10 <col:69, col:100>
|     `-ReturnStmt 0x232e3164e00 <col:71, col:97>
|       `-CXXOperatorCallExpr 0x232e3164dc8 <col:78, col:97> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3164db0 <col:85> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3164d90 <col:85> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e3162cd8 <col:78> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e31599a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e3162d48 <col:88, col:97> 'const char *'
|           `-MemberExpr 0x232e3162d18 <col:88, col:92> '<bound member function type>' .CStr 0x232e3158c40
|             `-ImplicitCastExpr 0x232e3162d68 <col:88> 'const alt::String' lvalue <NoOp>
|               `-DeclRefExpr 0x232e3162cf8 <col:88> 'alt::String' lvalue ParmVar 0x232e3159a18 'str' 'alt::String'
|-AccessSpecDecl 0x232e3159c40 <line:123:2, col:9> col:2 private
|-FieldDecl 0x232e3159c88 <line:124:3, col:9> col:9 referenced data 'char *'
|-FieldDecl 0x232e3159cf0 <line:125:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e3159e18 <line:127:3, line:131:3> line:127:8 used Swap 'void (alt::String &)'
| |-ParmVarDecl 0x232e3159d58 <col:13, col:21> col:21 used that 'alt::String &'
| `-CompoundStmt 0x232e3169930 <line:128:3, line:131:3>
|   |-CallExpr 0x232e3167380 <line:129:4, col:29> 'void'
|   | |-ImplicitCastExpr 0x232e3167368 <col:4, col:9> 'void (*)(char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x232e31672d0 <col:4, col:9> 'void (char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' lvalue Function 0x232e3166488 'swap' 'void (char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' (FunctionTemplate 0x232e2701318 'swap')
|   | |-MemberExpr 0x232e3164ee0 <col:14> 'char *' lvalue ->data 0x232e3159c88
|   | | `-CXXThisExpr 0x232e3164ed0 <col:14> 'alt::String *' implicit this
|   | `-MemberExpr 0x232e3164f30 <col:20, col:25> 'char *' lvalue .data 0x232e3159c88
|   |   `-DeclRefExpr 0x232e3164f10 <col:20> 'alt::String' lvalue ParmVar 0x232e3159d58 'that' 'alt::String &'
|   `-CallExpr 0x232e3169900 <line:130:4, col:29> 'void'
|     |-ImplicitCastExpr 0x232e31698e8 <col:4, col:9> 'void (*)(unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x232e3169850 <col:4, col:9> 'void (unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' lvalue Function 0x232e3168a08 'swap' 'void (unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' (FunctionTemplate 0x232e2701318 'swap')
|     |-MemberExpr 0x232e3167468 <col:14> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3159cf0
|     | `-CXXThisExpr 0x232e3167458 <col:14> 'alt::String *' implicit this
|     `-MemberExpr 0x232e31674b8 <col:20, col:25> 'alt::Size':'unsigned long long' lvalue .size 0x232e3159cf0
|       `-DeclRefExpr 0x232e3167498 <col:20> 'alt::String' lvalue ParmVar 0x232e3159d58 'that' 'alt::String &'
`-CXXMethodDecl 0x232e315a188 <line:133:3, line:141:3> line:133:17 used Concat 'alt::String (const char *, alt::Size, const char *, alt::Size)' static
  |-ParmVarDecl 0x232e3159ed8 <col:24, col:36> col:36 used lData 'const char *'
  |-ParmVarDecl 0x232e3159f50 <col:43, col:48> col:48 used lSize 'alt::Size':'unsigned long long'
  |-ParmVarDecl 0x232e3159fd0 <col:55, col:67> col:67 used rData 'const char *'
  |-ParmVarDecl 0x232e315a048 <col:74, col:79> col:79 used rSize 'alt::Size':'unsigned long long'
  `-CompoundStmt 0x232e316a1b0 <line:134:3, line:141:3>
    |-DeclStmt 0x232e3169b60 <line:135:4, col:29>
    | `-VarDecl 0x232e3169980 <col:4, col:28> col:11 used res 'alt::String' nrvo callinit
    |   `-CXXConstructExpr 0x232e3169b28 <col:11, col:28> 'alt::String' 'void (alt::Size, char)'
    |     |-BinaryOperator 0x232e3169a38 <col:15, col:23> 'unsigned long long' '+'
    |     | |-ImplicitCastExpr 0x232e3169a08 <col:15> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     | | `-DeclRefExpr 0x232e3169950 <col:15> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3159f50 'lSize' 'alt::Size':'unsigned long long'
    |     | `-ImplicitCastExpr 0x232e3169a20 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     |   `-DeclRefExpr 0x232e31699e8 <col:23> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e315a048 'rSize' 'alt::Size':'unsigned long long'
    |     `-CXXDefaultArgExpr 0x232e3169b08 <<invalid sloc>> 'char'
    |-ForStmt 0x232e316a0c8 <line:137:4, line:138:52>
    | |-DeclStmt 0x232e3169c30 <line:137:9, col:19>
    | | `-VarDecl 0x232e3169b88 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
    | |   `-ImplicitCastExpr 0x232e3169c18 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
    | |     `-IntegerLiteral 0x232e3169bf0 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x232e3169d10 <col:21, col:33> 'bool' '<'
    | | |-ImplicitCastExpr 0x232e3169cf8 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-DeclRefExpr 0x232e3169c48 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x232e3169b88 'i' 'alt::Size':'unsigned long long'
    | | `-BinaryOperator 0x232e3169cd8 <col:25, col:33> 'unsigned long long' '+'
    | |   |-ImplicitCastExpr 0x232e3169ca8 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   | `-DeclRefExpr 0x232e3169c68 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3159f50 'lSize' 'alt::Size':'unsigned long long'
    | |   `-ImplicitCastExpr 0x232e3169cc0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |     `-DeclRefExpr 0x232e3169c88 <col:33> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e315a048 'rSize' 'alt::Size':'unsigned long long'
    | |-UnaryOperator 0x232e3169d50 <col:40, col:42> 'alt::Size':'unsigned long long' lvalue prefix '++'
    | | `-DeclRefExpr 0x232e3169d30 <col:42> 'alt::Size':'unsigned long long' lvalue Var 0x232e3169b88 'i' 'alt::Size':'unsigned long long'
    | `-BinaryOperator 0x232e316a0a8 <line:138:5, col:52> 'char' lvalue '='
    |   |-CXXOperatorCallExpr 0x232e3169e20 <col:5, col:10> 'char' lvalue
    |   | |-ImplicitCastExpr 0x232e3169e08 <col:8, col:10> 'char &(*)(alt::Size)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x232e3169dc0 <col:8, col:10> 'char &(alt::Size)' lvalue CXXMethod 0x232e3157f10 'operator[]' 'char &(alt::Size)'
    |   | |-DeclRefExpr 0x232e3169d68 <col:5> 'alt::String' lvalue Var 0x232e3169980 'res' 'alt::String'
    |   | `-ImplicitCastExpr 0x232e3169da8 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x232e3169d88 <col:9> 'alt::Size':'unsigned long long' lvalue Var 0x232e3169b88 'i' 'alt::Size':'unsigned long long'
    |   `-ImplicitCastExpr 0x232e316a090 <col:14, col:52> 'char' <LValueToRValue>
    |     `-ConditionalOperator 0x232e316a060 <col:14, col:52> 'const char' lvalue
    |       |-BinaryOperator 0x232e3169ec8 <col:14, col:18> 'bool' '<'
    |       | |-ImplicitCastExpr 0x232e3169e98 <col:14> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       | | `-DeclRefExpr 0x232e3169e58 <col:14> 'alt::Size':'unsigned long long' lvalue Var 0x232e3169b88 'i' 'alt::Size':'unsigned long long'
    |       | `-ImplicitCastExpr 0x232e3169eb0 <col:18> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x232e3169e78 <col:18> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3159f50 'lSize' 'alt::Size':'unsigned long long'
    |       |-ArraySubscriptExpr 0x232e3169f58 <col:26, col:33> 'const char' lvalue
    |       | |-ImplicitCastExpr 0x232e3169f28 <col:26> 'const char *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x232e3169ee8 <col:26> 'const char *' lvalue ParmVar 0x232e3159ed8 'lData' 'const char *'
    |       | `-ImplicitCastExpr 0x232e3169f40 <col:32> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x232e3169f08 <col:32> 'alt::Size':'unsigned long long' lvalue Var 0x232e3169b88 'i' 'alt::Size':'unsigned long long'
    |       `-ArraySubscriptExpr 0x232e316a040 <col:37, col:52> 'const char' lvalue
    |         |-ImplicitCastExpr 0x232e316a028 <col:37> 'const char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x232e3169f78 <col:37> 'const char *' lvalue ParmVar 0x232e3159fd0 'rData' 'const char *'
    |         `-BinaryOperator 0x232e316a008 <col:43, col:47> 'unsigned long long' '-'
    |           |-ImplicitCastExpr 0x232e3169fd8 <col:43> 'alt::Size':'unsigned long long' <LValueToRValue>
    |           | `-DeclRefExpr 0x232e3169f98 <col:43> 'alt::Size':'unsigned long long' lvalue Var 0x232e3169b88 'i' 'alt::Size':'unsigned long long'
    |           `-ImplicitCastExpr 0x232e3169ff0 <col:47> 'alt::Size':'unsigned long long' <LValueToRValue>
    |             `-DeclRefExpr 0x232e3169fb8 <col:47> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3159f50 'lSize' 'alt::Size':'unsigned long long'
    `-ReturnStmt 0x232e316a198 <line:140:4, col:11>
      `-CXXConstructExpr 0x232e316a168 <col:11> 'alt::String' 'void (alt::String &&)' elidable
        `-ImplicitCastExpr 0x232e316a150 <col:11> 'alt::String' xvalue <NoOp>
          `-DeclRefExpr 0x232e316a100 <col:11> 'alt::String' lvalue Var 0x232e3169980 'res' 'alt::String'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::List = alt::Array
ClassTemplateSpecializationDecl 0x232e339f2d8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::MValue'
|-CXXRecordDecl 0x232e34231f0 prev 0x232e339f2d8 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x232e3423280 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e34232e8 <line:13:3, col:19> col:3 used constexpr Array 'void () noexcept' default
| |-CXXCtorInitializer Field 0x232e3424f08 'data' 'alt::MValue *'
| | `-CXXDefaultInitExpr 0x232e3425260 <col:3> 'alt::MValue *'
| |-CXXCtorInitializer Field 0x232e3424f60 'size' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x232e34252a8 <col:3> 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e3424fb8 'capacity' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x232e34252f0 <col:3> 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e3425350 <col:19>
|-FunctionTemplateDecl 0x232e3423650 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x232e34233a0 <line:15:12, col:18> col:18 class depth 0 index 0 It
| |-CXXConstructorDecl 0x232e34235a8 <line:16:3, col:25> col:3 Array 'void (It, It)'
| | |-ParmVarDecl 0x232e3423440 <col:9, col:12> col:12 begin 'It'
| | `-ParmVarDecl 0x232e34234b8 <col:19, col:22> col:22 end 'It'
| `-CXXConstructorDecl 0x232e3a26318 <col:3, line:29:3> line:16:3 used Array 'void (const alt::MValue *, const alt::MValue *)'
|   |-TemplateArgument type 'const alt::MValue *'
|   |-ParmVarDecl 0x232e3a26188 <col:9, col:12> col:12 used begin 'const alt::MValue *':'const alt::MValue *'
|   |-ParmVarDecl 0x232e3a26200 <col:19, col:22> col:22 used end 'const alt::MValue *':'const alt::MValue *'
|   |-CXXCtorInitializer Field 0x232e3424f08 'data' 'alt::MValue *'
|   | `-CXXDefaultInitExpr 0x232e3a26b10 <col:3> 'alt::MValue *'
|   |-CXXCtorInitializer Field 0x232e3424f60 'size' 'alt::Size':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x232e3a26b58 <col:3> 'alt::Size':'unsigned long long'
|   |-CXXCtorInitializer Field 0x232e3424fb8 'capacity' 'alt::Size':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x232e3a26ba0 <col:3> 'alt::Size':'unsigned long long'
|   `-CompoundStmt 0x232e3a2cb30 <line:17:3, line:29:3>
|     |-DeclStmt 0x232e3a2c498 <line:18:4, col:42>
|     | `-VarDecl 0x232e3a26c00 <col:4, col:41> col:9 used _size 'alt::Size':'unsigned long long' cinit
|     |   `-ImplicitCastExpr 0x232e3a2c480 <col:17, col:41> 'alt::Size':'unsigned long long' <IntegralCast>
|     |     `-CallExpr 0x232e3a2c420 <col:17, col:41> '_Iter_diff_t<const alt::MValue *>':'long long'
|     |       |-ImplicitCastExpr 0x232e3a2c408 <col:17, col:22> '_Iter_diff_t<const alt::MValue *> (*)(const alt::MValue *, const alt::MValue *)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x232e3a2b360 <col:17, col:22> '_Iter_diff_t<const alt::MValue *> (const alt::MValue *, const alt::MValue *)' lvalue Function 0x232e3a2b218 'distance' '_Iter_diff_t<const alt::MValue *> (const alt::MValue *, const alt::MValue *)' (FunctionTemplate 0x232e27e1b18 'distance')
|     |       |-ImplicitCastExpr 0x232e3a2c450 <col:31> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |       | `-DeclRefExpr 0x232e3a26cb0 <col:31> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x232e3a26188 'begin' 'const alt::MValue *':'const alt::MValue *'
|     |       `-ImplicitCastExpr 0x232e3a2c468 <col:38> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |         `-DeclRefExpr 0x232e3a26cd0 <col:38> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x232e3a26200 'end' 'const alt::MValue *':'const alt::MValue *'
|     |-CXXMemberCallExpr 0x232e3a2c510 <line:20:4, col:17> 'void'
|     | |-MemberExpr 0x232e3a2c4c0 <col:4> '<bound member function type>' ->Realloc 0x232e34250a0
|     | | `-CXXThisExpr 0x232e3a2c4b0 <col:4> 'alt::Array<alt::MValue> *' implicit this
|     | `-ImplicitCastExpr 0x232e3a2c538 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   `-DeclRefExpr 0x232e3a2c4f0 <col:12> 'alt::Size':'unsigned long long' lvalue Var 0x232e3a26c00 '_size' 'alt::Size':'unsigned long long'
|     |-DeclStmt 0x232e3a2c698 <line:22:4, col:21>
|     | `-VarDecl 0x232e3a2c550 <col:4, col:16> col:9 used from 'const alt::MValue *':'const alt::MValue *' cinit
|     |   `-ImplicitCastExpr 0x232e3a2c680 <col:16> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |     `-DeclRefExpr 0x232e3a2c5b8 <col:16> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x232e3a26188 'begin' 'const alt::MValue *':'const alt::MValue *'
|     |-DeclStmt 0x232e3a2c818 <line:23:4, col:18>
|     | `-VarDecl 0x232e3a2c6b0 <col:4, col:14> col:9 used to 'alt::MValue *':'alt::MValue *' cinit
|     |   `-ImplicitCastExpr 0x232e3a2c800 <col:14> 'alt::MValue *' <LValueToRValue>
|     |     `-MemberExpr 0x232e3a2c728 <col:14> 'alt::MValue *' lvalue ->data 0x232e3424f08
|     |       `-CXXThisExpr 0x232e3a2c718 <col:14> 'alt::Array<alt::MValue> *' implicit this
|     |-ForStmt 0x232e3a2ca60 <line:25:4, line:26:12>
|     | |-<<<NULL>>>
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x232e3a2c8a0 <line:25:11, col:19> 'bool' '!='
|     | | |-ImplicitCastExpr 0x232e3a2c870 <col:11> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x232e3a2c830 <col:11> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x232e3a2c550 'from' 'const alt::MValue *':'const alt::MValue *'
|     | | `-ImplicitCastExpr 0x232e3a2c888 <col:19> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x232e3a2c850 <col:19> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x232e3a26200 'end' 'const alt::MValue *':'const alt::MValue *'
|     | |-BinaryOperator 0x232e3a2c930 <col:24, col:34> 'alt::MValue *':'alt::MValue *' lvalue ','
|     | | |-UnaryOperator 0x232e3a2c8e0 <col:24, col:26> 'const alt::MValue *':'const alt::MValue *' lvalue prefix '++'
|     | | | `-DeclRefExpr 0x232e3a2c8c0 <col:26> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x232e3a2c550 'from' 'const alt::MValue *':'const alt::MValue *'
|     | | `-UnaryOperator 0x232e3a2c918 <col:32, col:34> 'alt::MValue *':'alt::MValue *' lvalue prefix '++'
|     | |   `-DeclRefExpr 0x232e3a2c8f8 <col:34> 'alt::MValue *':'alt::MValue *' lvalue Var 0x232e3a2c6b0 'to' 'alt::MValue *':'alt::MValue *'
|     | `-CXXOperatorCallExpr 0x232e3a2ca28 <line:26:5, col:12> 'alt::MValue' lvalue
|     |   |-ImplicitCastExpr 0x232e3a2ca10 <col:9> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x232e3a2c9f0 <col:9> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x232e33a7038 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |   |-UnaryOperator 0x232e3a2c988 <col:5, col:6> 'alt::MValue' lvalue prefix '*' cannot overflow
|     |   | `-ImplicitCastExpr 0x232e3a2c970 <col:6> 'alt::MValue *':'alt::MValue *' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x232e3a2c950 <col:6> 'alt::MValue *':'alt::MValue *' lvalue Var 0x232e3a2c6b0 'to' 'alt::MValue *':'alt::MValue *'
|     |   `-UnaryOperator 0x232e3a2c9d8 <col:11, col:12> 'const alt::MValue' lvalue prefix '*' cannot overflow
|     |     `-ImplicitCastExpr 0x232e3a2c9c0 <col:12> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |       `-DeclRefExpr 0x232e3a2c9a0 <col:12> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x232e3a2c550 'from' 'const alt::MValue *':'const alt::MValue *'
|     `-BinaryOperator 0x232e3a2cb10 <line:28:4, col:11> 'alt::Size':'unsigned long long' lvalue '='
|       |-MemberExpr 0x232e3a2caa8 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3424f60
|       | `-CXXThisExpr 0x232e3a2ca98 <col:4> 'alt::Array<alt::MValue> *' implicit this
|       `-ImplicitCastExpr 0x232e3a2caf8 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x232e3a2cad8 <col:11> 'alt::Size':'unsigned long long' lvalue Var 0x232e3a26c00 '_size' 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x232e3423948 <line:31:3, line:35:3> line:31:3 used Array 'void (const alt::MValue *, alt::Size)'
| |-ParmVarDecl 0x232e34237a8 <col:9, col:18> col:18 used _data 'const alt::MValue *'
| |-ParmVarDecl 0x232e3423810 <col:25, col:30> col:30 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::Array<alt::MValue>'
| | `-CXXConstructExpr 0x232e3a26440 <line:32:4, col:30> 'alt::Array<alt::MValue>' 'void (const alt::MValue *, const alt::MValue *)'
| |   |-ImplicitCastExpr 0x232e3a26428 <col:10> 'const alt::MValue *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e3a26028 <col:10> 'const alt::MValue *' lvalue ParmVar 0x232e34237a8 '_data' 'const alt::MValue *'
| |   `-BinaryOperator 0x232e3a260b8 <col:17, col:25> 'const alt::MValue *' '+'
| |     |-ImplicitCastExpr 0x232e3a26088 <col:17> 'const alt::MValue *' <LValueToRValue>
| |     | `-DeclRefExpr 0x232e3a26048 <col:17> 'const alt::MValue *' lvalue ParmVar 0x232e34237a8 '_data' 'const alt::MValue *'
| |     `-ImplicitCastExpr 0x232e3a260a0 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
| |       `-DeclRefExpr 0x232e3a26068 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3423810 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e3a26018 <line:33:3, line:35:3>
|-CXXConstructorDecl 0x232e3423be8 <line:37:3, line:45:3> line:37:3 used Array 'void (alt::Size, const alt::MValue &)'
| |-ParmVarDecl 0x232e3423a10 <col:9, col:14> col:14 used _size 'alt::Size':'unsigned long long'
| |-ParmVarDecl 0x232e3423ab8 <col:21, col:39> col:30 used fill 'const alt::MValue &' cinit
| | `-ExprWithCleanups 0x232e34f0e98 <col:37, col:39> 'const alt::MValue':'const alt::MValue' lvalue
| |   `-MaterializeTemporaryExpr 0x232e34f0e80 <col:37, col:39> 'const alt::MValue':'const alt::MValue' lvalue
| |     `-ImplicitCastExpr 0x232e34f0e68 <col:37, col:39> 'const alt::MValue':'const alt::MValue' <NoOp>
| |       `-CXXBindTemporaryExpr 0x232e34f0e48 <col:37, col:39> 'alt::MValue':'alt::MValue' (CXXTemporary 0x232e34f0e40)
| |         `-CXXTemporaryObjectExpr 0x232e34f0e10 <col:37, col:39> 'alt::MValue':'alt::MValue' 'void ()'
| |-CXXCtorInitializer Field 0x232e3424f08 'data' 'alt::MValue *'
| | `-CXXDefaultInitExpr 0x232e3a25038 <col:3> 'alt::MValue *'
| |-CXXCtorInitializer Field 0x232e3424f60 'size' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x232e3a25080 <col:3> 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e3424fb8 'capacity' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x232e3a250c8 <col:3> 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e3a25538 <line:38:3, line:45:3>
|   |-CXXMemberCallExpr 0x232e3a25188 <line:39:4, col:17> 'void'
|   | |-MemberExpr 0x232e3a25138 <col:4> '<bound member function type>' ->Realloc 0x232e34250a0
|   | | `-CXXThisExpr 0x232e3a25128 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x232e3a251b0 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3a25168 <col:12> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3423a10 '_size' 'alt::Size':'unsigned long long'
|   |-ForStmt 0x232e3a25468 <line:41:4, line:42:15>
|   | |-DeclStmt 0x232e3a25248 <line:41:9, col:19>
|   | | `-VarDecl 0x232e3a251c8 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|   | |   `-ImplicitCastExpr 0x232e3a25230 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x232e3a24d78 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x232e3a252d0 <col:21, col:25> 'bool' '<'
|   | | |-ImplicitCastExpr 0x232e3a252a0 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x232e3a25260 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x232e3a251c8 'i' 'alt::Size':'unsigned long long'
|   | | `-ImplicitCastExpr 0x232e3a252b8 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3a25280 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3423a10 '_size' 'alt::Size':'unsigned long long'
|   | |-UnaryOperator 0x232e3a25310 <col:32, col:34> 'alt::Size':'unsigned long long' lvalue prefix '++'
|   | | `-DeclRefExpr 0x232e3a252f0 <col:34> 'alt::Size':'unsigned long long' lvalue Var 0x232e3a251c8 'i' 'alt::Size':'unsigned long long'
|   | `-CXXOperatorCallExpr 0x232e3a25430 <line:42:5, col:15> 'alt::MValue' lvalue
|   |   |-ImplicitCastExpr 0x232e3a25418 <col:13> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x232e3a253f8 <col:13> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x232e33a7038 'operator=' 'alt::MValue &(const alt::MValue &)'
|   |   |-ArraySubscriptExpr 0x232e3a253b8 <col:5, col:11> 'alt::MValue':'alt::MValue' lvalue
|   |   | |-ImplicitCastExpr 0x232e3a25388 <col:5> 'alt::MValue *' <LValueToRValue>
|   |   | | `-MemberExpr 0x232e3a25338 <col:5> 'alt::MValue *' lvalue ->data 0x232e3424f08
|   |   | |   `-CXXThisExpr 0x232e3a25328 <col:5> 'alt::Array<alt::MValue> *' implicit this
|   |   | `-ImplicitCastExpr 0x232e3a253a0 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x232e3a25368 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x232e3a251c8 'i' 'alt::Size':'unsigned long long'
|   |   `-DeclRefExpr 0x232e3a253d8 <col:15> 'const alt::MValue':'const alt::MValue' lvalue ParmVar 0x232e3423ab8 'fill' 'const alt::MValue &'
|   `-BinaryOperator 0x232e3a25518 <line:44:4, col:11> 'alt::Size':'unsigned long long' lvalue '='
|     |-MemberExpr 0x232e3a254b0 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3424f60
|     | `-CXXThisExpr 0x232e3a254a0 <col:4> 'alt::Array<alt::MValue> *' implicit this
|     `-ImplicitCastExpr 0x232e3a25500 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x232e3a254e0 <col:11> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3423a10 '_size' 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x232e3423d70 <line:47:3, line:51:3> line:47:3 used Array 'void (const alt::Array<alt::MValue> &)'
| |-ParmVarDecl 0x232e3423cc0 <col:9, col:22> col:22 used that 'const alt::Array<alt::MValue> &'
| |-CXXCtorInitializer 'alt::Array<alt::MValue>'
| | `-CXXConstructExpr 0x232e3a25ec8 <line:48:4, col:30> 'alt::Array<alt::MValue>' 'void (const alt::MValue *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e3a25e98 <col:10, col:15> 'const alt::MValue *' <NoOp>
| |   | `-ImplicitCastExpr 0x232e3a25e80 <col:10, col:15> 'alt::MValue *' <LValueToRValue>
| |   |   `-MemberExpr 0x232e3a25d90 <col:10, col:15> 'alt::MValue *const' lvalue .data 0x232e3424f08
| |   |     `-DeclRefExpr 0x232e3a25d70 <col:10> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e3423cc0 'that' 'const alt::Array<alt::MValue> &'
| |   `-ImplicitCastExpr 0x232e3a25eb0 <col:21, col:26> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     `-MemberExpr 0x232e3a25de0 <col:21, col:26> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e3424f60
| |       `-DeclRefExpr 0x232e3a25dc0 <col:21> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e3423cc0 'that' 'const alt::Array<alt::MValue> &'
| `-CompoundStmt 0x232e3a25d60 <line:49:3, line:51:3>
|-CXXConstructorDecl 0x232e3423f48 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::MValue> &&)'
| `-ParmVarDecl 0x232e3423e68 <col:9, col:17> col:17 that 'alt::Array<alt::MValue> &&'
|-CXXDestructorDecl 0x232e3424030 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x232e3a24c60 <col:12, col:29>
|   `-CXXDeleteExpr 0x232e3a24c40 <col:14, col:23> 'void' array Function 0x232e1e661c8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x232e3a24c28 <col:23> 'alt::MValue *' <LValueToRValue>
|       `-MemberExpr 0x232e3a24bf8 <col:23> 'alt::MValue *' lvalue ->data 0x232e3424f08
|         `-CXXThisExpr 0x232e3a24be8 <col:23> 'alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x232e3424218 <line:62:3, line:71:3> line:62:10 used operator= 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |-ParmVarDecl 0x232e3424158 <col:20, col:33> col:33 used that 'const alt::Array<alt::MValue> &'
| `-CompoundStmt 0x232e3891968 <line:63:3, line:71:3>
|   |-CXXMemberCallExpr 0x232e3891468 <line:64:4, col:21> 'void'
|   | |-MemberExpr 0x232e38913e8 <col:4> '<bound member function type>' ->Realloc 0x232e34250a0
|   | | `-CXXThisExpr 0x232e38913d8 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x232e3891490 <col:12, col:17> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3891438 <col:12, col:17> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e3424f60
|   |     `-DeclRefExpr 0x232e3891418 <col:12> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e3424158 'that' 'const alt::Array<alt::MValue> &'
|   |-ForStmt 0x232e3891830 <line:66:4, line:67:26>
|   | |-DeclStmt 0x232e3891528 <line:66:9, col:19>
|   | | `-VarDecl 0x232e38914a8 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|   | |   `-ImplicitCastExpr 0x232e3891510 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x232e3890ff0 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x232e38915e0 <col:21, col:30> 'bool' '<'
|   | | |-ImplicitCastExpr 0x232e38915b0 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x232e3891540 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x232e38914a8 'i' 'alt::Size':'unsigned long long'
|   | | `-ImplicitCastExpr 0x232e38915c8 <col:25, col:30> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-MemberExpr 0x232e3891580 <col:25, col:30> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e3424f60
|   | |     `-DeclRefExpr 0x232e3891560 <col:25> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e3424158 'that' 'const alt::Array<alt::MValue> &'
|   | |-UnaryOperator 0x232e3891620 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
|   | | `-DeclRefExpr 0x232e3891600 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x232e38914a8 'i' 'alt::Size':'unsigned long long'
|   | `-CXXOperatorCallExpr 0x232e38917f8 <line:67:5, col:26> 'alt::MValue' lvalue
|   |   |-ImplicitCastExpr 0x232e38917e0 <col:13> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x232e38917c0 <col:13> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x232e33a7038 'operator=' 'alt::MValue &(const alt::MValue &)'
|   |   |-ArraySubscriptExpr 0x232e38916c8 <col:5, col:11> 'alt::MValue':'alt::MValue' lvalue
|   |   | |-ImplicitCastExpr 0x232e3891698 <col:5> 'alt::MValue *' <LValueToRValue>
|   |   | | `-MemberExpr 0x232e3891648 <col:5> 'alt::MValue *' lvalue ->data 0x232e3424f08
|   |   | |   `-CXXThisExpr 0x232e3891638 <col:5> 'alt::Array<alt::MValue> *' implicit this
|   |   | `-ImplicitCastExpr 0x232e38916b0 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x232e3891678 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x232e38914a8 'i' 'alt::Size':'unsigned long long'
|   |   `-ImplicitCastExpr 0x232e38917a8 <col:15, col:26> 'const alt::MValue':'const alt::MValue' lvalue <NoOp>
|   |     `-ArraySubscriptExpr 0x232e3891788 <col:15, col:26> 'alt::MValue':'alt::MValue' lvalue
|   |       |-ImplicitCastExpr 0x232e3891758 <col:15, col:20> 'alt::MValue *' <LValueToRValue>
|   |       | `-MemberExpr 0x232e3891708 <col:15, col:20> 'alt::MValue *const' lvalue .data 0x232e3424f08
|   |       |   `-DeclRefExpr 0x232e38916e8 <col:15> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e3424158 'that' 'const alt::Array<alt::MValue> &'
|   |       `-ImplicitCastExpr 0x232e3891770 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x232e3891738 <col:25> 'alt::Size':'unsigned long long' lvalue Var 0x232e38914a8 'i' 'alt::Size':'unsigned long long'
|   |-BinaryOperator 0x232e3891910 <line:69:4, col:16> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3891878 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3424f60
|   | | `-CXXThisExpr 0x232e3891868 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x232e38918f8 <col:11, col:16> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e38918c8 <col:11, col:16> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e3424f60
|   |     `-DeclRefExpr 0x232e38918a8 <col:11> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e3424158 'that' 'const alt::Array<alt::MValue> &'
|   `-ReturnStmt 0x232e3891958 <line:70:4, col:12>
|     `-UnaryOperator 0x232e3891940 <col:11, col:12> 'alt::Array<alt::MValue>' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3891930 <col:12> 'alt::Array<alt::MValue> *' this
|-CXXMethodDecl 0x232e34243a8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::MValue> &(alt::Array<alt::MValue> &&)'
| `-ParmVarDecl 0x232e34242e0 <col:20, col:28> col:28 that 'alt::Array<alt::MValue> &&'
|-CXXMethodDecl 0x232e3424538 <line:86:3, line:91:3> line:86:8 used Push 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e3424470 <col:13, col:22> col:22 used el 'const alt::MValue &'
| `-CompoundStmt 0x232e3a2d070 <line:87:3, line:91:3>
|   |-CXXMemberCallExpr 0x232e3a2ce90 <line:88:4, col:20> 'void'
|   | |-MemberExpr 0x232e3a2cdd0 <col:4> '<bound member function type>' ->Realloc 0x232e34250a0
|   | | `-CXXThisExpr 0x232e3a2cdc0 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-BinaryOperator 0x232e3a2ce70 <col:12, col:19> 'unsigned long long' '+'
|   |   |-ImplicitCastExpr 0x232e3a2ce40 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   | `-MemberExpr 0x232e3a2ce10 <col:12> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3424f60
|   |   |   `-CXXThisExpr 0x232e3a2ce00 <col:12> 'alt::Array<alt::MValue> *' implicit this
|   |   `-ImplicitCastExpr 0x232e3a2ce58 <col:19> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x232e3a2cbf0 <col:19> 'int' 1
|   |-CXXOperatorCallExpr 0x232e3a2cfe0 <line:89:4, col:17> 'alt::MValue' lvalue
|   | |-ImplicitCastExpr 0x232e3a2cfc8 <col:15> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x232e3a2cfa8 <col:15> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x232e33a7038 'operator=' 'alt::MValue &(const alt::MValue &)'
|   | |-ArraySubscriptExpr 0x232e3a2cf68 <col:4, col:13> 'alt::MValue':'alt::MValue' lvalue
|   | | |-ImplicitCastExpr 0x232e3a2cf38 <col:4> 'alt::MValue *' <LValueToRValue>
|   | | | `-MemberExpr 0x232e3a2cec8 <col:4> 'alt::MValue *' lvalue ->data 0x232e3424f08
|   | | |   `-CXXThisExpr 0x232e3a2ceb8 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | | `-ImplicitCastExpr 0x232e3a2cf50 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-MemberExpr 0x232e3a2cf08 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3424f60
|   | |     `-CXXThisExpr 0x232e3a2cef8 <col:9> 'alt::Array<alt::MValue> *' implicit this
|   | `-DeclRefExpr 0x232e3a2cf88 <col:17> 'const alt::MValue':'const alt::MValue' lvalue ParmVar 0x232e3424470 'el' 'const alt::MValue &'
|   `-UnaryOperator 0x232e3a2d058 <line:90:4, col:6> 'alt::Size':'unsigned long long' lvalue prefix '++'
|     `-MemberExpr 0x232e3a2d028 <col:6> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3424f60
|       `-CXXThisExpr 0x232e3a2d018 <col:6> 'alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x232e34245f0 <line:93:3, col:39> col:8 used GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e3a25a90 <col:24, col:39>
|   `-ReturnStmt 0x232e3a25a80 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e3a25a68 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e3a25a38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e3424f60
|         `-CXXThisExpr 0x232e3a25a28 <col:33> 'const alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x232e34246a0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x232e3424838 <line:96:3, col:47> col:6 used operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x232e3424778 <col:17, col:22> col:22 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e3a25c10 <col:27, col:47>
|   `-ReturnStmt 0x232e3a25c00 <col:29, col:44>
|     `-ArraySubscriptExpr 0x232e3a25be0 <col:36, col:44> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x232e3a25bb0 <col:36> 'alt::MValue *' <LValueToRValue>
|       | `-MemberExpr 0x232e3a25b60 <col:36> 'alt::MValue *' lvalue ->data 0x232e3424f08
|       |   `-CXXThisExpr 0x232e3a25b50 <col:36> 'alt::Array<alt::MValue> *' implicit this
|       `-ImplicitCastExpr 0x232e3a25bc8 <col:41> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x232e3a25b90 <col:41> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3424778 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e34249e8 <line:97:3, col:33> col:12 operator[] 'const alt::MValue &(alt::Size) const'
| `-ParmVarDecl 0x232e34248f0 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e3424b48 <line:99:3, col:12> col:6 begin 'alt::MValue *()'
|-CXXMethodDecl 0x232e3424c78 <line:100:3, col:20> col:12 begin 'const alt::MValue *() const'
|-CXXMethodDecl 0x232e3424d48 <line:101:3, col:10> col:6 end 'alt::MValue *()'
|-CXXMethodDecl 0x232e3424e18 <line:102:3, col:18> col:12 end 'const alt::MValue *() const'
|-AccessSpecDecl 0x232e3424ec8 <line:104:2, col:9> col:2 private
|-FieldDecl 0x232e3424f08 <line:105:3, col:13> col:6 referenced data 'alt::MValue *'
| `-ImplicitCastExpr 0x232e34251b8 <col:13> 'alt::MValue *' <NullToPointer>
|   `-CXXNullPtrLiteralExpr 0x232e3185a80 <col:13> 'nullptr_t'
|-FieldDecl 0x232e3424f60 <line:106:3, col:15> col:8 referenced size 'alt::Size':'unsigned long long'
| `-ImplicitCastExpr 0x232e34251f0 <col:15> 'alt::Size':'unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x232e3185a90 <col:15> 'int' 0
|-FieldDecl 0x232e3424fb8 <line:107:3, col:19> col:8 referenced capacity 'alt::Size':'unsigned long long'
| `-ImplicitCastExpr 0x232e3425228 <col:19> 'alt::Size':'unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x232e3185ad0 <col:19> 'int' 0
`-CXXMethodDecl 0x232e34250a0 <line:109:3, line:127:3> line:109:8 used Realloc 'void (alt::Size)'
  |-ParmVarDecl 0x232e3425010 <col:16, col:21> col:21 used least 'alt::Size':'unsigned long long'
  `-CompoundStmt 0x232e3892b40 <line:110:3, line:127:3>
    |-IfStmt 0x232e3892260 <line:111:4, line:112:5>
    | |-BinaryOperator 0x232e3892230 <line:111:8, col:20> 'bool' '>='
    | | |-ImplicitCastExpr 0x232e3892200 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x232e38921b0 <col:8> 'alt::Size':'unsigned long long' lvalue ->capacity 0x232e3424fb8
    | | |   `-CXXThisExpr 0x232e38921a0 <col:8> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x232e3892218 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x232e38921e0 <col:20> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3425010 'least' 'alt::Size':'unsigned long long'
    | `-ReturnStmt 0x232e3892250 <line:112:5>
    |-IfStmt 0x232e3892380 <line:114:4, line:115:16>
    | |-BinaryOperator 0x232e38922e8 <line:114:8, col:20> 'bool' '=='
    | | |-ImplicitCastExpr 0x232e38922b8 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x232e3892288 <col:8> 'alt::Size':'unsigned long long' lvalue ->capacity 0x232e3424fb8
    | | |   `-CXXThisExpr 0x232e3892278 <col:8> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x232e38922d0 <col:20> 'unsigned long long' <IntegralCast>
    | |   `-IntegerLiteral 0x232e3891a80 <col:20> 'int' 0
    | `-BinaryOperator 0x232e3892360 <line:115:5, col:16> 'alt::Size':'unsigned long long' lvalue '='
    |   |-MemberExpr 0x232e3892318 <col:5> 'alt::Size':'unsigned long long' lvalue ->capacity 0x232e3424fb8
    |   | `-CXXThisExpr 0x232e3892308 <col:5> 'alt::Array<alt::MValue> *' implicit this
    |   `-ImplicitCastExpr 0x232e3892348 <col:16> 'alt::Size':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x232e3891b08 <col:16> 'int' 1
    |-WhileStmt 0x232e38924d0 <line:117:4, line:118:18>
    | |-BinaryOperator 0x232e3892428 <line:117:11, col:22> 'bool' '<'
    | | |-ImplicitCastExpr 0x232e38923f8 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x232e38923a8 <col:11> 'alt::Size':'unsigned long long' lvalue ->capacity 0x232e3424fb8
    | | |   `-CXXThisExpr 0x232e3892398 <col:11> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x232e3892410 <col:22> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x232e38923d8 <col:22> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3425010 'least' 'alt::Size':'unsigned long long'
    | `-CompoundAssignOperator 0x232e38924a0 <line:118:5, col:18> 'alt::Size':'unsigned long long' lvalue '<<=' ComputeLHSTy='alt::Size':'unsigned long long' ComputeResultTy='alt::Size':'unsigned long long'
    |   |-MemberExpr 0x232e3892458 <col:5> 'alt::Size':'unsigned long long' lvalue ->capacity 0x232e3424fb8
    |   | `-CXXThisExpr 0x232e3892448 <col:5> 'alt::Array<alt::MValue> *' implicit this
    |   `-IntegerLiteral 0x232e3891c28 <col:18> 'int' 1
    |-DeclStmt 0x232e3892698 <line:120:4, col:32>
    | `-VarDecl 0x232e38924f8 <col:4, col:17> col:7 used newData 'alt::MValue *' cinit
    |   `-CXXNewExpr 0x232e3892650 <col:17> 'alt::MValue *' array Function 0x232e1e658b8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
    |     |-ImplicitCastExpr 0x232e38925b0 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     | `-MemberExpr 0x232e3892580 <col:23> 'alt::Size':'unsigned long long' lvalue ->capacity 0x232e3424fb8
    |     |   `-CXXThisExpr 0x232e3892570 <col:23> 'alt::Array<alt::MValue> *' implicit this
    |     `-CXXConstructExpr 0x232e3892628 <col:21> 'alt::MValue []' 'void ()'
    |-ForStmt 0x232e38929f8 <line:122:4, line:123:24>
    | |-DeclStmt 0x232e3892730 <line:122:9, col:19>
    | | `-VarDecl 0x232e38926b0 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
    | |   `-ImplicitCastExpr 0x232e3892718 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
    | |     `-IntegerLiteral 0x232e3891e30 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x232e38927d8 <col:21, col:25> 'bool' '<'
    | | |-ImplicitCastExpr 0x232e38927a8 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-DeclRefExpr 0x232e3892748 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x232e38926b0 'i' 'alt::Size':'unsigned long long'
    | | `-ImplicitCastExpr 0x232e38927c0 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-MemberExpr 0x232e3892778 <col:25> 'alt::Size':'unsigned long long' lvalue ->size 0x232e3424f60
    | |     `-CXXThisExpr 0x232e3892768 <col:25> 'alt::Array<alt::MValue> *' implicit this
    | |-UnaryOperator 0x232e3892818 <col:31, col:33> 'alt::Size':'unsigned long long' lvalue prefix '++'
    | | `-DeclRefExpr 0x232e38927f8 <col:33> 'alt::Size':'unsigned long long' lvalue Var 0x232e38926b0 'i' 'alt::Size':'unsigned long long'
    | `-CXXOperatorCallExpr 0x232e38929c0 <line:123:5, col:24> 'alt::MValue' lvalue
    |   |-ImplicitCastExpr 0x232e38929a8 <col:16> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x232e3892988 <col:16> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x232e33a7038 'operator=' 'alt::MValue &(const alt::MValue &)'
    |   |-ArraySubscriptExpr 0x232e38928a0 <col:5, col:14> 'alt::MValue':'alt::MValue' lvalue
    |   | |-ImplicitCastExpr 0x232e3892870 <col:5> 'alt::MValue *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x232e3892830 <col:5> 'alt::MValue *' lvalue Var 0x232e38924f8 'newData' 'alt::MValue *'
    |   | `-ImplicitCastExpr 0x232e3892888 <col:13> 'alt::Size':'unsigned long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x232e3892850 <col:13> 'alt::Size':'unsigned long long' lvalue Var 0x232e38926b0 'i' 'alt::Size':'unsigned long long'
    |   `-ImplicitCastExpr 0x232e3892970 <col:18, col:24> 'const alt::MValue':'const alt::MValue' lvalue <NoOp>
    |     `-ArraySubscriptExpr 0x232e3892950 <col:18, col:24> 'alt::MValue':'alt::MValue' lvalue
    |       |-ImplicitCastExpr 0x232e3892920 <col:18> 'alt::MValue *' <LValueToRValue>
    |       | `-MemberExpr 0x232e38928d0 <col:18> 'alt::MValue *' lvalue ->data 0x232e3424f08
    |       |   `-CXXThisExpr 0x232e38928c0 <col:18> 'alt::Array<alt::MValue> *' implicit this
    |       `-ImplicitCastExpr 0x232e3892938 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |         `-DeclRefExpr 0x232e3892900 <col:23> 'alt::Size':'unsigned long long' lvalue Var 0x232e38926b0 'i' 'alt::Size':'unsigned long long'
    |-CXXDeleteExpr 0x232e3892a88 <line:125:4, col:13> 'void' array Function 0x232e1e661c8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
    | `-ImplicitCastExpr 0x232e3892a70 <col:13> 'alt::MValue *' <LValueToRValue>
    |   `-MemberExpr 0x232e3892a40 <col:13> 'alt::MValue *' lvalue ->data 0x232e3424f08
    |     `-CXXThisExpr 0x232e3892a30 <col:13> 'alt::Array<alt::MValue> *' implicit this
    `-BinaryOperator 0x232e3892b20 <line:126:4, col:11> 'alt::MValue *' lvalue '='
      |-MemberExpr 0x232e3892ab8 <col:4> 'alt::MValue *' lvalue ->data 0x232e3424f08
      | `-CXXThisExpr 0x232e3892aa8 <col:4> 'alt::Array<alt::MValue> *' implicit this
      `-ImplicitCastExpr 0x232e3892b08 <col:11> 'alt::MValue *' <LValueToRValue>
        `-DeclRefExpr 0x232e3892ae8 <col:11> 'alt::MValue *' lvalue Var 0x232e38924f8 'newData' 'alt::MValue *'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::Dict = std::unordered_map
ClassTemplateSpecializationDecl 0x232e339fb60 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:89:1, line:511:2> line:94:8 class unordered_map definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial
|-public '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
|-TemplateArgument type 'alt::String'
|-TemplateArgument type 'alt::MValue'
|-TemplateArgument type 'std::hash<alt::String>'
|-TemplateArgument type 'std::equal_to<alt::String>'
|-TemplateArgument type 'std::allocator<std::pair<const alt::String, alt::MValue> >'
|-MaxFieldAlignmentAttr 0x232e3425418 <<invalid sloc>> Implicit 64
|-CXXRecordDecl 0x232e34e3ac0 prev 0x232e339fb60 <col:2, col:8> col:8 implicit class unordered_map
|-AccessSpecDecl 0x232e34e3b50 <line:98:1, col:7> col:1 public
|-StaticAssertDecl 0x232e34e3e70 <line:99:2, line:100:110> line:99:2
| |-BinaryOperator 0x232e34e3e38 <col:16, col:109> 'bool' '||'
| | |-UnaryOperator 0x232e34e3b98 <col:16, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:207:23> 'bool' prefix '!' cannot overflow
| | | `-ImplicitCastExpr 0x232e34e3b80 <col:23> 'bool' <IntegralToBoolean>
| | |   `-IntegerLiteral 0x232e32e4850 <col:23> 'int' 1
| | `-ImplicitCastExpr 0x232e34e3e20 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:99:49, col:109> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x232e34e3d90 <col:49, col:109> 'const bool' lvalue VarTemplateSpecialization 0x232e349dbd0 'is_same_v' 'const bool' non_odr_use_constant
| `-StringLiteral 0x232e32e4bf8 <line:100:33, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:428:2> 'const char [291]' lvalue "unordered_map<Key, Value, Hasher, Eq, Allocator> requires that Allocator's value_type match pair<const Key, Value> (See N4659 26.2.1 [container.requirements.general]/16 allocator_type) Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this diagnostic."
|-TypeAliasDecl 0x232e34e3fb0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:102:2, col:56> col:8 _Mytraits '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
| `-TemplateSpecializationType 0x232e34e3ee0 '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' sugar _Uhash_compare
|   |-TemplateArgument type 'alt::String':'alt::String'
|   |-TemplateArgument type 'std::hash<alt::String>':'std::hash<alt::String>'
|   |-TemplateArgument type 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
|   `-RecordType 0x232e3425680 'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
|     `-ClassTemplateSpecialization 0x232e3425568 '_Uhash_compare'
|-TypeAliasDecl 0x232e34e4230 <line:103:2, col:73> col:8 _Mybase '_Hash<_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| `-TemplateSpecializationType 0x232e34e41c0 '_Hash<_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' sugar _Hash
|   |-TemplateArgument type '_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false>':'std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false>'
|   `-RecordType 0x232e3425b40 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
|     `-ClassTemplateSpecialization 0x232e3425a60 '_Hash'
|-TypeAliasDecl 0x232e34e42a0 <line:104:2, col:17> col:8 hasher 'std::hash<alt::String>':'std::hash<alt::String>'
| `-SubstTemplateTypeParmType 0x232e34254f0 'std::hash<alt::String>' sugar
|   |-TemplateTypeParmType 0x232e32e3a40 '_Hasher' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x232e32e39f0 '_Hasher'
|   `-RecordType 0x232e316a870 'std::hash<alt::String>'
|     `-ClassTemplateSpecialization 0x232e316a788 'hash'
|-TypeAliasDecl 0x232e34e4310 <line:105:2, col:19> col:8 key_type 'alt::String':'alt::String'
| `-SubstTemplateTypeParmType 0x232e339f5c0 'alt::String' sugar
|   |-TemplateTypeParmType 0x232e32e3890 '_Kty' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x232e32e3840 '_Kty'
|   `-RecordType 0x232e3156900 'alt::String'
|     `-CXXRecord 0x232e3156868 'String'
|-TypeAliasDecl 0x232e34e4380 <line:106:2, col:22> col:8 mapped_type 'alt::MValue':'alt::MValue'
| `-SubstTemplateTypeParmType 0x232e339f800 'alt::MValue' sugar
|   |-TemplateTypeParmType 0x232e32e3910 '_Ty' dependent depth 0 index 1
|   | `-TemplateTypeParm 0x232e32e38b8 '_Ty'
|   `-RecordType 0x232e339e9c0 'alt::MValue'
|     `-CXXRecord 0x232e339e930 'MValue'
|-TypeAliasDecl 0x232e34e43f0 <line:107:2, col:20> col:8 key_equal 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
| `-SubstTemplateTypeParmType 0x232e3425530 'std::equal_to<alt::String>' sugar
|   |-TemplateTypeParmType 0x232e32e3b70 '_Keyeq' dependent depth 0 index 3
|   | `-TemplateTypeParm 0x232e32e3b20 '_Keyeq'
|   `-RecordType 0x232e339f760 'std::equal_to<alt::String>'
|     `-ClassTemplateSpecialization 0x232e339f680 'equal_to'
|-TypeAliasDecl 0x232e34e4460 <line:108:2, col:22> col:8 key_compare 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
| `-TypedefType 0x232e34e4030 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits' sugar
|   |-TypeAlias 0x232e34e3fb0 '_Mytraits'
|   `-TemplateSpecializationType 0x232e34e3ee0 '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' sugar _Uhash_compare
|     |-TemplateArgument type 'alt::String':'alt::String'
|     |-TemplateArgument type 'std::hash<alt::String>':'std::hash<alt::String>'
|     |-TemplateArgument type 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
|     `-RecordType 0x232e3425680 'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
|       `-ClassTemplateSpecialization 0x232e3425568 '_Uhash_compare'
|-TypeAliasDecl 0x232e34e4570 <line:110:2, col:39> col:8 value_type 'typename _Mybase::value_type':'std::pair<const alt::String, alt::MValue>'
| `-ElaboratedType 0x232e34e4520 'typename _Mybase::value_type' sugar
|   `-TypedefType 0x232e34aedb0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|     |-TypeAlias 0x232e34ae8e0 'value_type'
|     `-ElaboratedType 0x232e34ae890 'typename _Mylist::value_type' sugar
|       `-TypedefType 0x232e349eee0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|         |-TypeAlias 0x232e349ea70 'value_type'
|         `-ElaboratedType 0x232e349ea20 'typename _Mybase::value_type' sugar
|           `-TypedefType 0x232e3472060 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|             |-TypeAlias 0x232e3471c40 'value_type'
|             `-ElaboratedType 0x232e3471bf0 'typename _Val_types::value_type' sugar
|               `-TypedefType 0x232e34717e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                 |-TypeAlias 0x232e34716b8 'value_type'
|                 `-SubstTemplateTypeParmType 0x232e3471680 'std::pair<const alt::String, alt::MValue>' sugar
|                   |-TemplateTypeParmType 0x232e28e4930 '_Value_type' dependent depth 0 index 0
|                   | `-TemplateTypeParm 0x232e28e48d8 '_Value_type'
|                   `-RecordType 0x232e339f930 'std::pair<const alt::String, alt::MValue>'
|                     `-ClassTemplateSpecialization 0x232e339f838 'pair'
|-TypeAliasDecl 0x232e34e4640 <line:111:2, col:43> col:8 allocator_type 'typename _Mybase::allocator_type':'std::allocator<std::pair<const alt::String, alt::MValue> >'
| `-ElaboratedType 0x232e34e45f0 'typename _Mybase::allocator_type' sugar
|   `-TypedefType 0x232e34b1ae0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::allocator_type' sugar
|     |-TypeAlias 0x232e34ae9b0 'allocator_type'
|     `-ElaboratedType 0x232e34ae960 'typename _Mylist::allocator_type' sugar
|       `-TypedefType 0x232e34a67f0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type' sugar
|         |-TypeAlias 0x232e349eae0 'allocator_type'
|         `-SubstTemplateTypeParmType 0x232e3444b80 'std::allocator<std::pair<const alt::String, alt::MValue> >' sugar
|           |-TemplateTypeParmType 0x232e31bd7d0 '_Alloc' dependent depth 0 index 1
|           | `-TemplateTypeParm 0x232e31bd780 '_Alloc'
|           `-RecordType 0x232e339fad0 'std::allocator<std::pair<const alt::String, alt::MValue> >'
|             `-ClassTemplateSpecialization 0x232e339f9f0 'allocator'
|-TypeAliasDecl 0x232e34e4710 <line:112:2, col:38> col:8 size_type 'typename _Mybase::size_type':'unsigned long long'
| `-ElaboratedType 0x232e34e46c0 'typename _Mybase::size_type' sugar
|   `-TypedefType 0x232e34b4e70 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::size_type' sugar
|     |-TypeAlias 0x232e34aea80 'size_type'
|     `-ElaboratedType 0x232e34aea30 'typename _Mylist::size_type' sugar
|       `-TypedefType 0x232e349fb80 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type' sugar
|         |-TypeAlias 0x232e349ebb0 'size_type'
|         `-ElaboratedType 0x232e349eb60 'typename _Mybase::size_type' sugar
|           `-TypedefType 0x232e3475000 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::size_type' sugar
|             |-TypeAlias 0x232e3471d30 'size_type'
|             `-ElaboratedType 0x232e3471ce0 'typename _Val_types::size_type' sugar
|               `-TypedefType 0x232e3471cc0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::size_type' sugar
|                 |-TypeAlias 0x232e3471718 'size_type'
|                 `-TypedefType 0x232e1ddc640 'size_t' sugar
|                   |-Typedef 0x232e1ddc388 'size_t'
|                   `-BuiltinType 0x232e1c2b620 'unsigned long long'
|-TypeAliasDecl 0x232e34e4800 <line:113:2, col:44> col:8 difference_type 'typename _Mybase::difference_type':'long long'
| `-ElaboratedType 0x232e34e47b0 'typename _Mybase::difference_type' sugar
|   `-TypedefType 0x232e34e4790 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::difference_type' sugar
|     |-TypeAlias 0x232e34aeb70 'difference_type'
|     `-ElaboratedType 0x232e34aeb20 'typename _Mylist::difference_type' sugar
|       `-TypedefType 0x232e34aeb00 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::difference_type' sugar
|         |-TypeAlias 0x232e349eca0 'difference_type'
|         `-ElaboratedType 0x232e349ec50 'typename _Mybase::difference_type' sugar
|           `-TypedefType 0x232e349ec30 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::difference_type' sugar
|             |-TypeAlias 0x232e3471e20 'difference_type'
|             `-ElaboratedType 0x232e3471dd0 'typename _Val_types::difference_type' sugar
|               `-TypedefType 0x232e3471db0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::difference_type' sugar
|                 |-TypeAlias 0x232e3471778 'difference_type'
|                 `-TypedefType 0x232e27a9690 'ptrdiff_t' sugar
|                   |-Typedef 0x232e1ddc420 'ptrdiff_t'
|                   `-BuiltinType 0x232e1c2b580 'long long'
|-TypeAliasDecl 0x232e34e48f0 <line:114:2, col:36> col:8 pointer 'typename _Mybase::pointer':'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
| `-ElaboratedType 0x232e34e48a0 'typename _Mybase::pointer' sugar
|   `-TypedefType 0x232e34e4880 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::pointer' sugar
|     |-TypeAlias 0x232e34aec60 'pointer'
|     `-ElaboratedType 0x232e34aec10 'typename _Mylist::pointer' sugar
|       `-TypedefType 0x232e34aebf0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::pointer' sugar
|         |-TypeAlias 0x232e349ed90 'pointer'
|         `-ElaboratedType 0x232e349ed40 'typename _Mybase::pointer' sugar
|           `-TypedefType 0x232e349ed20 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::pointer' sugar
|             |-TypeAlias 0x232e3471f10 'pointer'
|             `-ElaboratedType 0x232e3471ec0 'typename _Val_types::pointer' sugar
|               `-TypedefType 0x232e3471ea0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::pointer' sugar
|                 |-TypeAlias 0x232e3471838 'pointer'
|                 `-PointerType 0x232e3471800 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|                   `-TypedefType 0x232e34717e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                     |-TypeAlias 0x232e34716b8 'value_type'
|                     `-SubstTemplateTypeParmType 0x232e3471680 'std::pair<const alt::String, alt::MValue>' sugar
|                       |-TemplateTypeParmType 0x232e28e4930 '_Value_type' dependent depth 0 index 0
|                       | `-TemplateTypeParm 0x232e28e48d8 '_Value_type'
|                       `-RecordType 0x232e339f930 'std::pair<const alt::String, alt::MValue>'
|                         `-ClassTemplateSpecialization 0x232e339f838 'pair'
|-TypeAliasDecl 0x232e34e49e0 <line:115:2, col:42> col:8 const_pointer 'typename _Mybase::const_pointer':'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
| `-ElaboratedType 0x232e34e4990 'typename _Mybase::const_pointer' sugar
|   `-TypedefType 0x232e34e4970 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_pointer' sugar
|     |-TypeAlias 0x232e34aed50 'const_pointer'
|     `-ElaboratedType 0x232e34aed00 'typename _Mylist::const_pointer' sugar
|       `-TypedefType 0x232e34aece0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_pointer' sugar
|         |-TypeAlias 0x232e349ee80 'const_pointer'
|         `-ElaboratedType 0x232e349ee30 'typename _Mybase::const_pointer' sugar
|           `-TypedefType 0x232e349ee10 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_pointer' sugar
|             |-TypeAlias 0x232e3472000 'const_pointer'
|             `-ElaboratedType 0x232e3471fb0 'typename _Val_types::const_pointer' sugar
|               `-TypedefType 0x232e3471f90 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::const_pointer' sugar
|                 |-TypeAlias 0x232e34718d8 'const_pointer'
|                 `-PointerType 0x232e34718a0 'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|                   `-QualType 0x232e34717e1 'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' const
|                     `-TypedefType 0x232e34717e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                       |-TypeAlias 0x232e34716b8 'value_type'
|                       `-SubstTemplateTypeParmType 0x232e3471680 'std::pair<const alt::String, alt::MValue>' sugar
|                         |-TemplateTypeParmType 0x232e28e4930 '_Value_type' dependent depth 0 index 0
|                         | `-TemplateTypeParm 0x232e28e48d8 '_Value_type'
|                         `-RecordType 0x232e339f930 'std::pair<const alt::String, alt::MValue>'
|                           `-ClassTemplateSpecialization 0x232e339f838 'pair'
|-TypeAliasDecl 0x232e34e4a98 <line:116:2, col:30> col:8 reference 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
| `-LValueReferenceType 0x232e34e4a60 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
|   `-TypedefType 0x232e34e4a40 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|     |-TypeAlias 0x232e34e4570 'value_type'
|     `-ElaboratedType 0x232e34e4520 'typename _Mybase::value_type' sugar
|       `-TypedefType 0x232e34aedb0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|         |-TypeAlias 0x232e34ae8e0 'value_type'
|         `-ElaboratedType 0x232e34ae890 'typename _Mylist::value_type' sugar
|           `-TypedefType 0x232e349eee0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|             |-TypeAlias 0x232e349ea70 'value_type'
|             `-ElaboratedType 0x232e349ea20 'typename _Mybase::value_type' sugar
|               `-TypedefType 0x232e3472060 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|                 |-TypeAlias 0x232e3471c40 'value_type'
|                 `-ElaboratedType 0x232e3471bf0 'typename _Val_types::value_type' sugar
|                   `-TypedefType 0x232e34717e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                     |-TypeAlias 0x232e34716b8 'value_type'
|                     `-SubstTemplateTypeParmType 0x232e3471680 'std::pair<const alt::String, alt::MValue>' sugar
|                       |-TemplateTypeParmType 0x232e28e4930 '_Value_type' dependent depth 0 index 0
|                       | `-TemplateTypeParm 0x232e28e48d8 '_Value_type'
|                       `-RecordType 0x232e339f930 'std::pair<const alt::String, alt::MValue>'
|                         `-ClassTemplateSpecialization 0x232e339f838 'pair'
|-TypeAliasDecl 0x232e34e4b38 <line:117:2, col:42> col:8 const_reference 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
| `-LValueReferenceType 0x232e34e4b00 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
|   `-QualType 0x232e34e4a41 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' const
|     `-TypedefType 0x232e34e4a40 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|       |-TypeAlias 0x232e34e4570 'value_type'
|       `-ElaboratedType 0x232e34e4520 'typename _Mybase::value_type' sugar
|         `-TypedefType 0x232e34aedb0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|           |-TypeAlias 0x232e34ae8e0 'value_type'
|           `-ElaboratedType 0x232e34ae890 'typename _Mylist::value_type' sugar
|             `-TypedefType 0x232e349eee0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|               |-TypeAlias 0x232e349ea70 'value_type'
|               `-ElaboratedType 0x232e349ea20 'typename _Mybase::value_type' sugar
|                 `-TypedefType 0x232e3472060 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|                   |-TypeAlias 0x232e3471c40 'value_type'
|                   `-ElaboratedType 0x232e3471bf0 'typename _Val_types::value_type' sugar
|                     `-TypedefType 0x232e34717e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                       |-TypeAlias 0x232e34716b8 'value_type'
|                       `-SubstTemplateTypeParmType 0x232e3471680 'std::pair<const alt::String, alt::MValue>' sugar
|                         |-TemplateTypeParmType 0x232e28e4930 '_Value_type' dependent depth 0 index 0
|                         | `-TemplateTypeParm 0x232e28e48d8 '_Value_type'
|                         `-RecordType 0x232e339f930 'std::pair<const alt::String, alt::MValue>'
|                           `-ClassTemplateSpecialization 0x232e339f838 'pair'
|-TypeAliasDecl 0x232e34e4c10 <line:118:2, col:37> col:8 iterator 'typename _Mybase::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x232e34e4bc0 'typename _Mybase::iterator' sugar
|   `-TypedefType 0x232e34b1350 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator' sugar
|     |-TypeAlias 0x232e34affa8 'iterator'
|     `-TemplateSpecializationType 0x232e34afed0 'conditional_t<is_same_v<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_type, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>, typename _Mylist::const_iterator, typename _Mylist::iterator>' sugar alias conditional_t
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x232e34af878 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xhash:180:33, col:63> 'bool' false
|       |   `-ImplicitCastExpr 0x232e34af860 <col:33, col:63> 'bool' <LValueToRValue>
|       |     `-DeclRefExpr 0x232e34af6f0 <col:33, col:63> 'const bool' lvalue VarTemplateSpecialization 0x232e34aef50 'is_same_v' 'const bool' non_odr_use_constant
|       |-TemplateArgument type 'typename _Mylist::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'typename _Mylist::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-ElaboratedType 0x232e34afe80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|       | `-TypedefType 0x232e34afe60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|       |   |-TypeAlias 0x232e34afde8 'type'
|       |   `-SubstTemplateTypeParmType 0x232e34afdb0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|       |     |-TemplateTypeParmType 0x232e1e24f90 '_Ty2' dependent depth 0 index 2
|       |     | `-TemplateTypeParm 0x232e1e24f08 '_Ty2'
|       |     `-RecordType 0x232e3472420 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |       `-ClassTemplateSpecialization 0x232e3472340 '_List_iterator'
|       `-ElaboratedType 0x232e34afe80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|         `-TypedefType 0x232e34afe60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|           |-TypeAlias 0x232e34afde8 'type'
|           `-SubstTemplateTypeParmType 0x232e34afdb0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|             |-TemplateTypeParmType 0x232e1e24f90 '_Ty2' dependent depth 0 index 2
|             | `-TemplateTypeParm 0x232e1e24f08 '_Ty2'
|             `-RecordType 0x232e3472420 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-ClassTemplateSpecialization 0x232e3472340 '_List_iterator'
|-TypeAliasDecl 0x232e34e4ce0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:119:2, col:43> col:8 const_iterator 'typename _Mybase::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x232e34e4c90 'typename _Mybase::const_iterator' sugar
|   `-TypedefType 0x232e34b17e0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator' sugar
|     |-TypeAlias 0x232e34b0048 'const_iterator'
|     `-ElaboratedType 0x232e34af7a0 'typename _Mylist::const_iterator' sugar
|       `-TypedefType 0x232e349f640 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator' sugar
|         |-TypeAlias 0x232e349f1c0 'const_iterator'
|         `-ElaboratedType 0x232e349f170 'typename _Mybase::const_iterator' sugar
|           `-TypedefType 0x232e349f150 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_iterator' sugar
|             |-TypeAlias 0x232e3472700 'const_iterator'
|             `-TemplateSpecializationType 0x232e3472690 '_List_const_iterator<_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types> >' sugar _List_const_iterator
|               |-TemplateArgument type '_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types>':'std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > >'
|               `-RecordType 0x232e3472670 'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|                 `-ClassTemplateSpecialization 0x232e3472590 '_List_const_iterator'
|-TypeAliasDecl 0x232e34e4d80 <line:121:2, col:43> col:8 local_iterator 'typename _Mybase::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x232e34e4bc0 'typename _Mybase::iterator' sugar
|   `-TypedefType 0x232e34b1350 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator' sugar
|     |-TypeAlias 0x232e34affa8 'iterator'
|     `-TemplateSpecializationType 0x232e34afed0 'conditional_t<is_same_v<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_type, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>, typename _Mylist::const_iterator, typename _Mylist::iterator>' sugar alias conditional_t
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x232e34af878 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xhash:180:33, col:63> 'bool' false
|       |   `-ImplicitCastExpr 0x232e34af860 <col:33, col:63> 'bool' <LValueToRValue>
|       |     `-DeclRefExpr 0x232e34af6f0 <col:33, col:63> 'const bool' lvalue VarTemplateSpecialization 0x232e34aef50 'is_same_v' 'const bool' non_odr_use_constant
|       |-TemplateArgument type 'typename _Mylist::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'typename _Mylist::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-ElaboratedType 0x232e34afe80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|       | `-TypedefType 0x232e34afe60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|       |   |-TypeAlias 0x232e34afde8 'type'
|       |   `-SubstTemplateTypeParmType 0x232e34afdb0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|       |     |-TemplateTypeParmType 0x232e1e24f90 '_Ty2' dependent depth 0 index 2
|       |     | `-TemplateTypeParm 0x232e1e24f08 '_Ty2'
|       |     `-RecordType 0x232e3472420 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |       `-ClassTemplateSpecialization 0x232e3472340 '_List_iterator'
|       `-ElaboratedType 0x232e34afe80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|         `-TypedefType 0x232e34afe60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|           |-TypeAlias 0x232e34afde8 'type'
|           `-SubstTemplateTypeParmType 0x232e34afdb0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|             |-TemplateTypeParmType 0x232e1e24f90 '_Ty2' dependent depth 0 index 2
|             | `-TemplateTypeParm 0x232e1e24f08 '_Ty2'
|             `-RecordType 0x232e3472420 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-ClassTemplateSpecialization 0x232e3472340 '_List_iterator'
|-TypeAliasDecl 0x232e34e4e20 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:122:2, col:49> col:8 const_local_iterator 'typename _Mybase::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x232e34e4c90 'typename _Mybase::const_iterator' sugar
|   `-TypedefType 0x232e34b17e0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator' sugar
|     |-TypeAlias 0x232e34b0048 'const_iterator'
|     `-ElaboratedType 0x232e34af7a0 'typename _Mylist::const_iterator' sugar
|       `-TypedefType 0x232e349f640 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator' sugar
|         |-TypeAlias 0x232e349f1c0 'const_iterator'
|         `-ElaboratedType 0x232e349f170 'typename _Mybase::const_iterator' sugar
|           `-TypedefType 0x232e349f150 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_iterator' sugar
|             |-TypeAlias 0x232e3472700 'const_iterator'
|             `-TemplateSpecializationType 0x232e3472690 '_List_const_iterator<_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types> >' sugar _List_const_iterator
|               |-TemplateArgument type '_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types>':'std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > >'
|               `-RecordType 0x232e3472670 'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|                 `-ClassTemplateSpecialization 0x232e3472590 '_List_const_iterator'
|-TypeAliasDecl 0x232e34e4ef0 <line:124:2, col:36> col:8 _Alnode 'typename _Mybase::_Alnode':'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
| `-ElaboratedType 0x232e34e4ea0 'typename _Mybase::_Alnode' sugar
|   `-TypedefType 0x232e34b0b20 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Alnode' sugar
|     |-TypeAlias 0x232e34ae720 '_Alnode'
|     `-ElaboratedType 0x232e34ae6d0 'typename _Mylist::_Alnode' sugar
|       `-TypedefType 0x232e34ae6b0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode' sugar
|         |-TypeAlias 0x232e349e8b0 '_Alnode'
|         `-ElaboratedType 0x232e349e860 'typename _Mybase::_Alnode' sugar
|           `-TypedefType 0x232e3470a60 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Alnode' sugar
|             |-TypeAlias 0x232e3470930 '_Alnode'
|             `-ElaboratedType 0x232e34708e0 'typename _List_base_types<pair<const String, MValue>, allocator<pair<const String, MValue> > >::_Alnode' sugar
|               `-TypedefType 0x232e34462a0 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode' sugar
|                 |-TypeAlias 0x232e3446238 '_Alnode'
|                 `-TemplateSpecializationType 0x232e3446190 '_Rebind_alloc_t<std::allocator<std::pair<const alt::String, alt::MValue> >, std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Node>' sugar alias _Rebind_alloc_t
|                   |-TemplateArgument type 'std::allocator<std::pair<const alt::String, alt::MValue> >':'std::allocator<std::pair<const alt::String, alt::MValue> >'
|                   |-TemplateArgument type 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Node':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |-ElaboratedType 0x232e3446120 'typename allocator_traits<allocator<pair<const String, MValue> > >::rebind_alloc<_List_node<pair<const String, MValue>, void *> >' sugar
|                   | `-TemplateSpecializationType 0x232e34460d0 'rebind_alloc<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar alias rebind_alloc
|                   |   |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |   |-TemplateSpecializationType 0x232e3446060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                   |   | |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |   | `-RecordType 0x232e3446040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   |   |   `-ClassTemplateSpecialization 0x232e3445f58 'allocator'
|                   |   `-TemplateSpecializationType 0x232e3446060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                   |     |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |     `-RecordType 0x232e3446040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   |       `-ClassTemplateSpecialization 0x232e3445f58 'allocator'
|                   `-ElaboratedType 0x232e3446120 'typename allocator_traits<allocator<pair<const String, MValue> > >::rebind_alloc<_List_node<pair<const String, MValue>, void *> >' sugar
|                     `-TemplateSpecializationType 0x232e34460d0 'rebind_alloc<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar alias rebind_alloc
|                       |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                       |-TemplateSpecializationType 0x232e3446060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                       | |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                       | `-RecordType 0x232e3446040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                       |   `-ClassTemplateSpecialization 0x232e3445f58 'allocator'
|                       `-TemplateSpecializationType 0x232e3446060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                         |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                         `-RecordType 0x232e3446040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                           `-ClassTemplateSpecialization 0x232e3445f58 'allocator'
|-TypeAliasDecl 0x232e34e4fe0 <line:125:2, col:43> col:8 _Alnode_traits 'typename _Mybase::_Alnode_traits':'std::allocator_traits<std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> > >'
| `-ElaboratedType 0x232e34e4f90 'typename _Mybase::_Alnode_traits' sugar
|   `-TypedefType 0x232e34e4f70 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Alnode_traits' sugar
|     |-TypeAlias 0x232e34ae810 '_Alnode_traits'
|     `-ElaboratedType 0x232e34ae7c0 'typename _Mylist::_Alnode_traits' sugar
|       `-TypedefType 0x232e34ae7a0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode_traits' sugar
|         |-TypeAlias 0x232e349e9a0 '_Alnode_traits'
|         `-ElaboratedType 0x232e349e950 'typename _Mybase::_Alnode_traits' sugar
|           `-TypedefType 0x232e349e930 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Alnode_traits' sugar
|             |-TypeAlias 0x232e3470a00 '_Alnode_traits'
|             `-ElaboratedType 0x232e34709b0 'typename _List_base_types<pair<const String, MValue>, allocator<pair<const String, MValue> > >::_Alnode_traits' sugar
|               `-TypedefType 0x232e34464a0 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode_traits' sugar
|                 |-TypeAlias 0x232e3446440 '_Alnode_traits'
|                 `-TemplateSpecializationType 0x232e34463d0 'allocator_traits<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode>' sugar allocator_traits
|                   |-TemplateArgument type 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode':'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   `-RecordType 0x232e34463b0 'std::allocator_traits<std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> > >'
|                     `-ClassTemplateSpecialization 0x232e34462d0 'allocator_traits'
|-TypeAliasDecl 0x232e34e50b0 <line:126:2, col:36> col:8 _Pairib 'typename _Mybase::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
| `-ElaboratedType 0x232e34e5060 'typename _Mybase::_Pairib' sugar
|   `-TypedefType 0x232e34b37c0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib' sugar
|     |-TypeAlias 0x232e34b1540 '_Pairib'
|     `-TemplateSpecializationType 0x232e34b14a0 'pair<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator, bool>' sugar pair
|       |-TemplateArgument type 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'bool'
|       `-RecordType 0x232e34b1480 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|         `-ClassTemplateSpecialization 0x232e34b1380 'pair'
|-TypeAliasDecl 0x232e34e5370 <line:129:2, col:86> col:8 insert_return_type '_Insert_return_type<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator, typename _Mybase::node_type>':'std::_Insert_return_type<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue> >'
| `-TemplateSpecializationType 0x232e34e52d0 '_Insert_return_type<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator, typename _Mybase::node_type>' sugar _Insert_return_type
|   |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-TemplateArgument type 'typename _Mybase::node_type':'std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue>'
|   `-RecordType 0x232e34e52b0 'std::_Insert_return_type<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue> >'
|     `-ClassTemplateSpecialization 0x232e34e51b0 '_Insert_return_type'
|-CXXConstructorDecl 0x232e34e5408 <line:132:2, line:135:3> line:132:2 used unordered_map 'void ()'
| |-CXXCtorInitializer 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| | `-ExprWithCleanups 0x232e3a2d5b0 <line:133:5, col:44> '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| |   `-CXXConstructExpr 0x232e3a2d578 <col:5, col:44> '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' 'void (const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_compare &, const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::allocator_type &)'
| |     |-MaterializeTemporaryExpr 0x232e3a2d530 <col:13, col:25> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'const std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' lvalue
| |     | `-ImplicitCastExpr 0x232e3a2d518 <col:13, col:25> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'const std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' <NoOp>
| |     |   `-CXXTemporaryObjectExpr 0x232e3a2d450 <col:13, col:25> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' 'void (std::hash<alt::String>, std::equal_to<alt::String>)'
| |     |     |-CXXDefaultArgExpr 0x232e3a2d2f0 <<invalid sloc>> 'std::hash<alt::String>':'std::hash<alt::String>'
| |     |     `-CXXDefaultArgExpr 0x232e3a2d430 <<invalid sloc>> 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
| |     `-MaterializeTemporaryExpr 0x232e3a2d560 <col:28, col:43> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'const std::allocator<std::pair<const alt::String, alt::MValue> >' lvalue
| |       `-ImplicitCastExpr 0x232e3a2d548 <col:28, col:43> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'const std::allocator<std::pair<const alt::String, alt::MValue> >' <NoOp>
| |         `-CXXTemporaryObjectExpr 0x232e3a2d4a0 <col:28, col:43> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'std::allocator<std::pair<const alt::String, alt::MValue> >' 'void () noexcept'
| `-CompoundStmt 0x232e3a2d188 <line:134:3, line:135:3>
|-CXXConstructorDecl 0x232e34e55f8 <line:137:2, col:50> col:11 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| `-ParmVarDecl 0x232e34e5518 <col:25, col:47> col:47 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x232e34e5778 <line:142:2, col:43> col:2 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| `-ParmVarDecl 0x232e34e56c8 <col:16, col:37> col:37 _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|-CXXConstructorDecl 0x232e34e59f8 <line:147:2, col:70> col:2 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34e5848 <col:16, col:37> col:37 _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| `-ParmVarDecl 0x232e34e58c0 <col:45, col:67> col:67 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x232e34e5bd8 <line:152:2, col:43> col:11 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
| `-ParmVarDecl 0x232e34e5af0 <col:25, col:35> col:35 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-CXXConstructorDecl 0x232e34e5e18 <line:158:2, col:61> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34e5ca8 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x232e34e5d20 <col:36, col:58> col:58 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x232e34e60e8 <line:164:2, col:58> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
| |-ParmVarDecl 0x232e34e5ef0 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x232e34e5fb8 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-CXXConstructorDecl 0x232e34e63f8 <line:170:2, line:171:28> line:170:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34e61c0 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x232e34e6238 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x232e34e62b0 <line:171:3, col:25> col:25 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x232e34e6738 <line:177:2, line:178:26> line:177:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
| |-ParmVarDecl 0x232e34e64d8 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x232e34e6550 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x232e34e65f8 <line:178:3, col:17> col:17 _Keyeqarg 'const std::equal_to<alt::String> &'
|-CXXConstructorDecl 0x232e34e6ae8 <line:184:2, line:185:53> line:184:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34e6818 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x232e34e6890 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| |-ParmVarDecl 0x232e34e6908 <line:185:3, col:17> col:17 _Keyeqarg 'const std::equal_to<alt::String> &'
| `-ParmVarDecl 0x232e34e6980 <col:28, col:50> col:50 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x232e34e6e70 <line:191:2, line:192:42> col:3 unordered_map
| |-TemplateTypeParmDecl 0x232e34e6bc0 <line:191:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x232e34e6dc8 <line:192:3, col:42> col:3 unordered_map 'void (_Iter, _Iter)'
|   |-ParmVarDecl 0x232e34e6c60 <col:17, col:23> col:23 _First '_Iter'
|   `-ParmVarDecl 0x232e34e6cd8 <col:31, col:37> col:37 _Last '_Iter'
|-FunctionTemplateDecl 0x232e34e72a0 <line:198:2, line:199:69> col:3 unordered_map
| |-TemplateTypeParmDecl 0x232e34e6f58 <line:198:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x232e34e71f8 <line:199:3, col:69> col:3 unordered_map 'void (_Iter, _Iter, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x232e34e7000 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x232e34e7078 <col:31, col:37> col:37 _Last '_Iter'
|   `-ParmVarDecl 0x232e34e70f0 <col:44, col:66> col:66 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x232e34e7710 <line:205:2, line:207:22> line:206:3 unordered_map
| |-TemplateTypeParmDecl 0x232e34e7390 <line:205:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x232e34e7668 <line:206:3, line:207:22> line:206:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
|   |-ParmVarDecl 0x232e34e7430 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x232e34e74a8 <col:31, col:37> col:37 _Last '_Iter'
|   `-ParmVarDecl 0x232e34e7520 <line:207:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-FunctionTemplateDecl 0x232e34e7c10 <line:214:2, line:216:49> line:215:3 unordered_map
| |-TemplateTypeParmDecl 0x232e34e7800 <line:214:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x232e34e7b68 <line:215:3, line:216:49> line:215:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x232e34e78a0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x232e34e7918 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x232e34e7990 <line:216:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   `-ParmVarDecl 0x232e34e7a08 <col:24, col:46> col:46 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x232e34e8120 <line:223:2, line:225:46> line:224:3 unordered_map
| |-TemplateTypeParmDecl 0x232e34e7d08 <line:223:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x232e34e8078 <line:224:3, line:225:46> line:224:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
|   |-ParmVarDecl 0x232e34e7db0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x232e34e7e28 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x232e34e7ea0 <line:225:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   `-ParmVarDecl 0x232e34e7f18 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-FunctionTemplateDecl 0x232e34e86c0 <line:232:2, line:235:29> line:233:3 unordered_map
| |-TemplateTypeParmDecl 0x232e34e8218 <line:232:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x232e34e8618 <line:233:3, line:235:29> line:233:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x232e34e82c0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x232e34e8338 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x232e34e83b0 <line:234:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x232e34e8428 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   `-ParmVarDecl 0x232e34e84a0 <line:235:4, col:26> col:26 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x232e34e8c60 <line:242:2, line:245:27> line:243:3 unordered_map
| |-TemplateTypeParmDecl 0x232e34e87c0 <line:242:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x232e34e8bb8 <line:243:3, line:245:27> line:243:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
|   |-ParmVarDecl 0x232e34e8860 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x232e34e88d8 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x232e34e8950 <line:244:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x232e34e89c8 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   `-ParmVarDecl 0x232e34e8a40 <line:245:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|-FunctionTemplateDecl 0x232e34e9290 <line:252:2, line:255:54> line:253:3 unordered_map
| |-TemplateTypeParmDecl 0x232e34e8d60 <line:252:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x232e34e91e8 <line:253:3, line:255:54> line:253:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x232e34e8e00 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x232e34e8e78 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x232e34e8ef0 <line:254:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x232e34e8f68 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   |-ParmVarDecl 0x232e34e8fe0 <line:255:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|   `-ParmVarDecl 0x232e34e9058 <col:29, col:51> col:51 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x232e34e9498 <line:262:2, line:266:3> line:262:17 used operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |-ParmVarDecl 0x232e34e93d8 <col:27, col:48> col:48 used _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| `-CompoundStmt 0x232e3899580 <line:263:3, line:266:3>
|   |-CXXMemberCallExpr 0x232e3899498 <line:264:3, col:28> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' lvalue
|   | |-MemberExpr 0x232e3899450 <col:3, col:20> '<bound member function type>' ->operator= 0x232e34b3fa8
|   | | `-ImplicitCastExpr 0x232e38994e8 <col:3> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|   | |   `-CXXThisExpr 0x232e3899440 <col:3> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|   | `-ImplicitCastExpr 0x232e3899508 <col:22> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' lvalue <DerivedToBase (_Hash)>
|   |   `-DeclRefExpr 0x232e3899420 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e34e93d8 '_Right' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|   `-ReturnStmt 0x232e3899570 <line:265:3, col:16>
|     `-ParenExpr 0x232e3899550 <col:10, col:16> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
|       `-UnaryOperator 0x232e3899538 <col:11, col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x232e3899528 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' this
|-CXXConstructorDecl 0x232e34e9668 <line:268:2, col:38> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&)'
| `-ParmVarDecl 0x232e34e9588 <col:16, col:32> col:32 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
|-CXXConstructorDecl 0x232e34e98e8 <line:273:2, col:65> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34e9738 <col:16, col:32> col:32 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
| `-ParmVarDecl 0x232e34e97b0 <col:40, col:62> col:62 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x232e34e9a98 <line:278:2, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:306:50> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:278:17 operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&)' noexcept-uninstantiated 0x232e32ea8a0
| `-ParmVarDecl 0x232e34e99c0 <col:27, col:43> col:43 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
|-CXXMethodDecl 0x232e34e9d58 <line:287:2, col:44> col:15 operator[] 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&)'
| `-ParmVarDecl 0x232e34e9c68 <col:26, col:37> col:37 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|-CXXMethodDecl 0x232e34e9ef8 <line:292:2, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:306:50> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:292:7 swap 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' noexcept-uninstantiated 0x232e32eaca0
| `-ParmVarDecl 0x232e34e9e20 <col:12, col:27> col:27 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|-UsingDecl 0x232e34ea040 <line:298:2, col:17> col:17 _Mybase::insert
|-UsingShadowDecl 0x232e34ea098 <col:17> col:17 implicit FunctionTemplate 0x232e34b7398 'insert'
|-UsingShadowDecl 0x232e34ea0e8 <col:17> col:17 implicit FunctionTemplate 0x232e34b7a58 'insert'
|-UsingShadowDecl 0x232e34ea138 <col:17> col:17 implicit FunctionTemplate 0x232e34b80c8 'insert'
|-UsingShadowDecl 0x232e34ea188 <col:17> col:17 implicit FunctionTemplate 0x232e34b86e8 'insert'
|-UsingShadowDecl 0x232e34ea1d8 <col:17> col:17 implicit CXXMethod 0x232e34b8928 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type &)'
|-UsingShadowDecl 0x232e34ea228 <col:17> col:17 implicit CXXMethod 0x232e34b8b48 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type &&)'
|-UsingShadowDecl 0x232e34ea278 <col:17> col:17 implicit FunctionTemplate 0x232e34b8e98 'insert'
|-UsingShadowDecl 0x232e34ea2c8 <col:17> col:17 implicit CXXMethod 0x232e34b90c8 'insert' 'void (initializer_list<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>)'
|-UsingShadowDecl 0x232e34ea318 <col:17> col:17 implicit CXXMethod 0x232e34bc2c8 'insert' 'auto (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::node_type &&)'
|-UsingShadowDecl 0x232e34ea368 <col:17> col:17 implicit CXXMethod 0x232e34bc518 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::node_type &&)'
|-FunctionTemplateDecl 0x232e34eaa98 <line:300:2, line:302:31> col:11 insert
| |-TemplateTypeParmDecl 0x232e34ea3b8 <line:300:11, col:17> col:17 class depth 0 index 0 _Valty
| |-TemplateTypeParmDecl 0x232e34ea438 <line:301:3, <scratch space>:333:1> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:301:3 class depth 0 index 1
| | `-TemplateArgument type 'enable_if_t<is_constructible_v<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type, _Valty> >':'typename enable_if<is_constructible_v<value_type, _Valty>, void>::type'
| `-CXXMethodDecl 0x232e34ea9f8 <line:302:3, col:31> col:11 insert 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Valty &&)'
|   `-ParmVarDecl 0x232e34ea908 <col:18, col:27> col:27 _Val '_Valty &&'
|-FunctionTemplateDecl 0x232e34eb2b0 <line:307:2, line:309:55> col:12 insert
| |-TemplateTypeParmDecl 0x232e34eab78 <line:307:11, col:17> col:17 class depth 0 index 0 _Valty
| |-TemplateTypeParmDecl 0x232e34eabf8 <line:308:3, <scratch space>:335:1> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:308:3 class depth 0 index 1
| | `-TemplateArgument type 'enable_if_t<is_constructible_v<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type, _Valty> >':'typename enable_if<is_constructible_v<value_type, _Valty>, void>::type'
| `-CXXMethodDecl 0x232e34eb1b8 <line:309:3, col:55> col:12 insert 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, _Valty &&)'
|   |-ParmVarDecl 0x232e34eb000 <col:19, col:34> col:34 _Where 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   `-ParmVarDecl 0x232e34eb0a8 <col:42, col:51> col:51 _Val '_Valty &&'
|-FunctionTemplateDecl 0x232e34eb798 <line:314:2, line:317:26> line:316:11 _Try_emplace
| |-TemplateTypeParmDecl 0x232e34eb398 <line:314:11, col:17> col:17 class depth 0 index 0 _Keyty
| |-TemplateTypeParmDecl 0x232e34eb418 <line:315:3, col:12> col:12 class depth 0 index 1 ... _Mappedty
| |-CXXMethodDecl 0x232e34eb6f8 <line:316:3, line:317:26> line:316:11 _Try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Keyty &&, _Mappedty &&...)'
| | |-ParmVarDecl 0x232e34eb4f8 <col:24, col:33> col:33 _Keyval '_Keyty &&'
| | `-ParmVarDecl 0x232e34eb5e0 <line:317:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
| `-CXXMethodDecl 0x232e3a3e9d8 <line:316:3, line:327:3> line:316:11 used _Try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const alt::String &)'
|   |-TemplateArgument type 'const alt::String &'
|   |-TemplateArgument pack
|   |-ParmVarDecl 0x232e3a3e918 <col:24, col:33> col:33 used _Keyval 'const alt::String &'
|   `-CompoundStmt 0x232e3a90280 <line:318:3, line:327:3>
|     |-DeclStmt 0x232e3a3f768 <line:319:3, col:43>
|     | `-VarDecl 0x232e3a3f5a0 <col:3, col:42> col:12 used _Where 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' cinit
|     |   `-CXXMemberCallExpr 0x232e3a3f720 <col:21, col:42> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|     |     |-MemberExpr 0x232e3a3f6d8 <col:21, col:30> '<bound member function type>' ->find 0x232e34ba018
|     |     | `-ImplicitCastExpr 0x232e3a3f748 <col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|     |     |   `-CXXThisExpr 0x232e3a3f6c8 <col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|     |     `-DeclRefExpr 0x232e3a3f6a8 <col:35> 'const alt::String' lvalue ParmVar 0x232e3a3e918 '_Keyval' 'const alt::String &'
|     `-IfStmt 0x232e3a90258 <line:320:3, line:326:34> has_else
|       |-ExprWithCleanups 0x232e3a40d00 <line:320:7, col:30> 'bool'
|       | `-CXXOperatorCallExpr 0x232e3a40cc8 <col:7, col:30> 'bool'
|       |   |-ImplicitCastExpr 0x232e3a40cb0 <col:14> 'bool (*)(const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x232e3a40c90 <col:14> 'bool (const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const' lvalue CXXMethod 0x232e38d2ef8 'operator==' 'bool (const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const'
|       |   |-ImplicitCastExpr 0x232e3a40c70 <col:7> 'const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue <UncheckedDerivedToBase (_List_const_iterator)>
|       |   | `-DeclRefExpr 0x232e3a3f8c0 <col:7> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue Var 0x232e3a3f5a0 '_Where' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |   `-ImplicitCastExpr 0x232e3a40c50 <col:17, col:30> 'const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue <DerivedToBase (_List_const_iterator)>
|       |     `-MaterializeTemporaryExpr 0x232e3a40c38 <col:17, col:30> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue
|       |       `-ImplicitCastExpr 0x232e3a40c20 <col:17, col:30> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' <NoOp>
|       |         `-CXXMemberCallExpr 0x232e3a3f9e8 <col:17, col:30> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |           `-MemberExpr 0x232e3a3f9a0 <col:17, col:26> '<bound member function type>' ->end 0x232e34b4338
|       |             `-ImplicitCastExpr 0x232e3a3fa08 <col:17> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|       |               `-CXXThisExpr 0x232e3a3f990 <col:17> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|       |-ReturnStmt 0x232e3a86520 <line:321:4, line:324:64>
|       | `-ExprWithCleanups 0x232e3a86508 <line:321:11, line:324:64> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |   `-ParenExpr 0x232e3a864e8 <line:321:11, line:324:64> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |     `-CXXMemberCallExpr 0x232e3a86460 <line:321:12, line:324:63> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |       |-MemberExpr 0x232e3a86418 <line:321:12, col:21> '<bound member function type>' ->emplace 0x232e3a862f8
|       |       | `-ImplicitCastExpr 0x232e3a86498 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|       |       |   `-CXXThisExpr 0x232e3a86408 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|       |       |-DeclRefExpr 0x232e3a3f060 <line:322:5> 'const std::piecewise_construct_t' lvalue Var 0x232e2701b80 'piecewise_construct' 'const std::piecewise_construct_t'
|       |       |-MaterializeTemporaryExpr 0x232e3a864b8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:56> 'tuple<const alt::String &>':'std::tuple<const alt::String &>' xvalue
|       |       | `-CallExpr 0x232e3a85a70 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:56> 'tuple<const alt::String &>':'std::tuple<const alt::String &>'
|       |       |   |-ImplicitCastExpr 0x232e3a85a58 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:10> 'tuple<const alt::String &> (*)(const alt::String &) noexcept' <FunctionToPointerDecay>
|       |       |   | `-DeclRefExpr 0x232e3a424e0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:10> 'tuple<const alt::String &> (const alt::String &) noexcept' lvalue Function 0x232e3a423a0 'forward_as_tuple' 'tuple<const alt::String &> (const alt::String &) noexcept' (FunctionTemplate 0x232e2fafa20 'forward_as_tuple')
|       |       |   `-CallExpr 0x232e3a41f90 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:55> 'const alt::String' lvalue
|       |       |     |-ImplicitCastExpr 0x232e3a41f78 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:46> 'const alt::String &(*)(remove_reference_t<const alt::String &> &) noexcept' <FunctionToPointerDecay>
|       |       |     | `-DeclRefExpr 0x232e3a41df8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:46> 'const alt::String &(remove_reference_t<const alt::String &> &) noexcept' lvalue Function 0x232e3a41970 'forward' 'const alt::String &(remove_reference_t<const alt::String &> &) noexcept' (FunctionTemplate 0x232e2503ee0 'forward')
|       |       |     `-DeclRefExpr 0x232e3a40ec8 <col:48> 'const alt::String' lvalue ParmVar 0x232e3a3e918 '_Keyval' 'const alt::String &'
|       |       `-MaterializeTemporaryExpr 0x232e3a864d0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:62> 'tuple<>':'std::tuple<>' xvalue
|       |         `-CallExpr 0x232e3a85e90 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:62> 'tuple<>':'std::tuple<>'
|       |           `-ImplicitCastExpr 0x232e3a85e78 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:10> 'tuple<> (*)() noexcept' <FunctionToPointerDecay>
|       |             `-DeclRefExpr 0x232e3a85d10 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:10> 'tuple<> () noexcept' lvalue Function 0x232e3a85bd8 'forward_as_tuple' 'tuple<> () noexcept' (FunctionTemplate 0x232e2fafa20 'forward_as_tuple')
|       `-ReturnStmt 0x232e3a90248 <line:326:4, col:34>
|         `-ExprWithCleanups 0x232e3a90230 <col:11, col:34> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|           `-ParenExpr 0x232e3a90210 <col:11, col:34> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|             `-CXXTemporaryObjectExpr 0x232e3a901d0 <col:12, col:33> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>' 'void (std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &, bool &&) noexcept(is_nothrow_constructible_v<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &> && is_nothrow_constructible_v<bool, bool>)'
|               |-DeclRefExpr 0x232e3a86540 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue Var 0x232e3a3f5a0 '_Where' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-MaterializeTemporaryExpr 0x232e3a8e088 <col:28> 'bool' xvalue
|                 `-CXXBoolLiteralExpr 0x232e3a3f4d8 <col:28> 'bool' false
|-FunctionTemplateDecl 0x232e34ebbe8 <line:329:2, line:331:26> line:330:11 try_emplace
| |-TemplateTypeParmDecl 0x232e34eb880 <line:329:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| |-CXXMethodDecl 0x232e34ebb48 <line:330:3, line:331:26> line:330:11 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&...)'
| | |-ParmVarDecl 0x232e34eb948 <col:23, col:39> col:39 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| | `-ParmVarDecl 0x232e34eba30 <line:331:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
| `-CXXMethodDecl 0x232e3a3e238 <line:330:3, line:334:3> line:330:11 used try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
|   |-TemplateArgument pack
|   |-ParmVarDecl 0x232e3a3e148 <col:23, col:39> col:39 used _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-CompoundStmt 0x232e3a3eba0 <line:332:3, line:334:3>
|     `-ReturnStmt 0x232e3a3eb90 <line:333:3, col:69>
|       `-ParenExpr 0x232e3a3eb70 <col:10, col:69> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|         `-CXXMemberCallExpr 0x232e3a3eb48 <col:11, col:68> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|           |-MemberExpr 0x232e3a3eb00 <col:11> '<bound member function type>' ->_Try_emplace 0x232e3a3e9d8
|           | `-CXXThisExpr 0x232e3a3eaf0 <col:11> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|           `-DeclRefExpr 0x232e3a3e838 <col:24> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type':'const alt::String' lvalue ParmVar 0x232e3a3e148 '_Keyval' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|-FunctionTemplateDecl 0x232e34ec098 <line:336:2, line:338:26> line:337:12 try_emplace
| |-TemplateTypeParmDecl 0x232e34ebcd0 <line:336:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x232e34ebff8 <line:337:3, line:338:26> line:337:12 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&...)'
|   |-ParmVarDecl 0x232e34ebd70 <col:24> col:38 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x232e34ebde8 <col:40, col:56> col:56 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x232e34ebed0 <line:338:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x232e34ec4d8 <line:344:2, line:346:26> line:345:11 try_emplace
| |-TemplateTypeParmDecl 0x232e34ec188 <line:344:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x232e34ec438 <line:345:3, line:346:26> line:345:11 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&...)'
|   |-ParmVarDecl 0x232e34ec230 <col:23, col:34> col:34 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x232e34ec320 <line:346:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x232e34ec988 <line:352:2, line:354:26> line:353:12 try_emplace
| |-TemplateTypeParmDecl 0x232e34ec5c0 <line:352:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x232e34ec8e8 <line:353:3, line:354:26> line:353:12 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&...)'
|   |-ParmVarDecl 0x232e34ec660 <col:24> col:38 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x232e34ec6d8 <col:40, col:51> col:51 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x232e34ec7c0 <line:354:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x232e34ece28 <line:360:2, line:363:23> line:362:11 _Insert_or_assign
| |-TemplateTypeParmDecl 0x232e34eca78 <line:360:11, col:17> col:17 class depth 0 index 0 _Keyty
| |-TemplateTypeParmDecl 0x232e34ecaf8 <line:361:3, col:9> col:9 class depth 0 index 1 _Mappedty
| `-CXXMethodDecl 0x232e34ecd88 <line:362:3, line:363:23> line:362:11 _Insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Keyty &&, _Mappedty &&)'
|   |-ParmVarDecl 0x232e34ecbd8 <col:29, col:38> col:38 _Keyval '_Keyty &&'
|   `-ParmVarDecl 0x232e34ecc78 <line:363:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x232e34ed208 <line:377:2, line:379:23> line:378:11 insert_or_assign
| |-TemplateTypeParmDecl 0x232e34ecf10 <line:377:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x232e34ed168 <line:378:3, line:379:23> line:378:11 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&)'
|   |-ParmVarDecl 0x232e34ecfb0 <col:28, col:44> col:44 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x232e34ed058 <line:379:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x232e34ed668 <line:385:2, line:387:23> line:386:12 insert_or_assign
| |-TemplateTypeParmDecl 0x232e34ed2f0 <line:385:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x232e34ed5c8 <line:386:3, line:387:23> line:386:12 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&)'
|   |-ParmVarDecl 0x232e34ed390 <col:29> col:43 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x232e34ed408 <col:45, col:61> col:61 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x232e34ed4a8 <line:387:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x232e34eda58 <line:393:2, line:395:23> line:394:11 insert_or_assign
| |-TemplateTypeParmDecl 0x232e34ed758 <line:393:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x232e34ed9b8 <line:394:3, line:395:23> line:394:11 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&)'
|   |-ParmVarDecl 0x232e34ed800 <col:28, col:39> col:39 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x232e34ed8a8 <line:395:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x232e34edeb8 <line:401:2, line:403:23> line:402:12 insert_or_assign
| |-TemplateTypeParmDecl 0x232e34edb40 <line:401:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x232e34ede18 <line:402:3, line:403:23> line:402:12 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&)'
|   |-ParmVarDecl 0x232e34edbe0 <col:29> col:43 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x232e34edc58 <col:45, col:56> col:56 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x232e34edcf8 <line:403:4, col:16> col:16 _Mapval '_Mappedty &&'
|-CXXConstructorDecl 0x232e34ee118 <line:409:2, col:51> col:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>)'
| `-ParmVarDecl 0x232e34ee030 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
|-CXXConstructorDecl 0x232e34ee3c8 <line:415:2, col:78> col:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34ee260 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| `-ParmVarDecl 0x232e34ee2d8 <col:53, col:75> col:75 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x232e34ee6b8 <line:421:2, line:422:21> line:421:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
| |-ParmVarDecl 0x232e34ee510 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| `-ParmVarDecl 0x232e34ee588 <line:422:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-CXXConstructorDecl 0x232e34eea38 <line:429:2, line:430:48> line:429:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34ee800 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x232e34ee878 <line:430:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x232e34ee8f0 <col:23, col:45> col:45 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x232e34eedc8 <line:437:2, line:438:45> line:437:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
| |-ParmVarDecl 0x232e34eeb90 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x232e34eec08 <line:438:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x232e34eec80 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-CXXConstructorDecl 0x232e34ef1e8 <line:445:2, line:446:72> line:445:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34eef20 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x232e34eef98 <line:446:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x232e34ef010 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x232e34ef088 <col:47, col:69> col:69 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x232e34ef608 <line:453:2, line:455:27> line:453:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
| |-ParmVarDecl 0x232e34ef340 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x232e34ef3b8 <line:454:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x232e34ef430 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x232e34ef4a8 <line:455:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|-CXXConstructorDecl 0x232e34efab8 <line:462:2, line:464:54> line:462:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x232e34ef760 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x232e34ef7d8 <line:463:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x232e34ef850 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| |-ParmVarDecl 0x232e34ef8c8 <line:464:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
| `-ParmVarDecl 0x232e34ef940 <col:29, col:51> col:51 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x232e34efd18 <line:471:2, col:62> col:17 operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>)'
| `-ParmVarDecl 0x232e34efc20 <col:27, col:56> col:56 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
|-CXXMethodDecl 0x232e34efe48 <line:478:13, col:36> col:20 hash_function 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher () const'
| `-WarnUnusedResultAttr 0x232e34eff28 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x232e34f0008 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:483:13, col:32> col:23 key_eq 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_equal () const'
| `-WarnUnusedResultAttr 0x232e34f00b8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x232e34f01f8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:488:2, line:491:3> line:488:15 used operator[] 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
| |-ParmVarDecl 0x232e34f0108 <col:26, col:42> col:42 used _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-CompoundStmt 0x232e3a3e558 <line:489:3, line:491:3>
|   `-ReturnStmt 0x232e3a3e548 <line:490:3, col:45>
|     `-ExprWithCleanups 0x232e3a3e530 <col:10, col:45> 'alt::MValue':'alt::MValue' lvalue
|       `-ParenExpr 0x232e3a3e510 <col:10, col:45> 'alt::MValue':'alt::MValue' lvalue
|         `-MemberExpr 0x232e3a3e4e0 <col:11, col:39> 'alt::MValue':'alt::MValue' lvalue ->second 0x232e38b3748
|           `-CXXOperatorCallExpr 0x232e3a3e4b0 <col:11, col:32> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer':'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|             |-ImplicitCastExpr 0x232e3a3e498 <col:37> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer (*)() const' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x232e3a3e418 <col:37> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer () const' lvalue CXXMethod 0x232e38dfb08 'operator->' 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer () const'
|             `-ImplicitCastExpr 0x232e3a3e400 <col:11, col:32> 'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' xvalue <NoOp>
|               `-MemberExpr 0x232e3a3e3d0 <col:11, col:32> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' xvalue .first 0x232e398f250
|                 `-MaterializeTemporaryExpr 0x232e3a3e3b8 <col:11, col:30> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>' xvalue
|                   `-CXXMemberCallExpr 0x232e3a3e390 <col:11, col:30> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|                     |-MemberExpr 0x232e3a3e348 <col:11> '<bound member function type>' ->try_emplace 0x232e3a3e238
|                     | `-CXXThisExpr 0x232e3a3e338 <col:11> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|                     `-DeclRefExpr 0x232e3a3e100 <col:23> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type':'const alt::String' lvalue ParmVar 0x232e34f0108 '_Keyval' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|-CXXMethodDecl 0x232e34f0350 <line:493:13, col:52> col:26 at 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
| |-ParmVarDecl 0x232e34f02c0 <col:29, col:45> col:45 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-WarnUnusedResultAttr 0x232e34f0408 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x232e34f0578 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:501:13, col:60> col:32 at 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &) const'
| |-ParmVarDecl 0x232e34f0488 <col:35, col:51> col:51 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-WarnUnusedResultAttr 0x232e34f0630 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-UsingDecl 0x232e34f0690 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:509:2, col:17> col:17 _Mybase::_Unchecked_begin
|-UsingShadowDecl 0x232e34f06e8 <col:17> col:17 implicit CXXMethod 0x232e34b4588 '_Unchecked_begin' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_iterator ()'
|-UsingShadowDecl 0x232e34f0738 <col:17> col:17 implicit CXXMethod 0x232e34b46a8 '_Unchecked_begin' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_const_iterator () const'
|-UsingDecl 0x232e34f07a8 <line:510:2, col:17> col:17 _Mybase::_Unchecked_end
|-UsingShadowDecl 0x232e34f0800 <col:17> col:17 implicit CXXMethod 0x232e34b4778 '_Unchecked_end' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_iterator ()'
|-UsingShadowDecl 0x232e34f0850 <col:17> col:17 implicit CXXMethod 0x232e34b4848 '_Unchecked_end' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_const_iterator () const'
`-CXXDestructorDecl 0x232e34f3448 <line:94:8> col:8 implicit used ~unordered_map 'void () noexcept' inline default
  `-CompoundStmt 0x232e34f3540 <col:8>

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::TypeTag = alt::MValue::_TypeTag
ClassTemplateSpecializationDecl 0x232e33a3f20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:52:3, line:72:3> line:53:10 struct _TypeTag definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument pack
| |-TemplateArgument type 'void'
| |-TemplateArgument type 'bool'
| |-TemplateArgument type 'long long'
| |-TemplateArgument type 'unsigned long long'
| |-TemplateArgument type 'double'
| |-TemplateArgument type 'alt::String'
| |-TemplateArgument type 'alt::Array<alt::MValue>'
| |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |-TemplateArgument type 'alt::IBaseObject *'
| `-TemplateArgument type 'alt::MValue::Function'
|-CXXRecordDecl 0x232e33a7708 prev 0x232e33a3f20 <col:3, col:10> col:10 implicit struct _TypeTag
|-ClassTemplateDecl 0x232e33a79b0 <line:55:4, line:56:11> col:11 _Type
| |-NonTypeTemplateParmDecl 0x232e33a7798 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
| |-TemplateTypeParmDecl 0x232e33a77f8 <col:27, col:33> col:33 class depth 0 index 1 _T
| |-TemplateTypeParmDecl 0x232e33a7878 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
| `-CXXRecordDecl 0x232e33a7920 <line:56:4, col:11> col:11 struct _Type
|-TypeAliasTemplateDecl 0x232e33a8ba0 <line:61:4, line:62:58> col:4 Type
| |-NonTypeTemplateParmDecl 0x232e33a82c0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
| `-TypeAliasDecl 0x232e33a8b40 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   `-DependentNameType 0x232e33a8af0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|-ClassTemplateDecl 0x232e33a8ea8 <line:64:4, line:65:11> col:11 _TypeId
| |-NonTypeTemplateParmDecl 0x232e33a8c08 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
| |-TemplateTypeParmDecl 0x232e33a8c68 <col:27, col:33> col:33 class depth 0 index 1 U
| |-TemplateTypeParmDecl 0x232e33a8ce8 <col:36, col:42> col:42 class depth 0 index 2 _T
| |-TemplateTypeParmDecl 0x232e33a8d68 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
| |-CXXRecordDecl 0x232e33a8e18 <line:65:4, col:11> col:11 struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3862658 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3863a80 prev 0x232e3862658 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3862ed8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x232e3863930 prev 0x232e3862ed8 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x232e38639c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x232e3863ba0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x232e3863b80 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x232e3863b58 <col:91> 'unsigned long long' 1
| |-ClassTemplateSpecializationDecl 0x232e3865628 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e386ce40 prev 0x232e3865628 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3865cf8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e386cd68 prev 0x232e3865cf8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3866318 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x232e386cc18 prev 0x232e3866318 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x232e386cca8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x232e386cf60 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x232e386cf40 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x232e386cf18 <col:91> 'unsigned long long' 2
| |-ClassTemplateSpecializationDecl 0x232e386e708 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3870470 prev 0x232e386e708 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e386edd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3870398 prev 0x232e386edd8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e386f3f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e38702c0 prev 0x232e386f3f8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e386f9c0 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x232e3870170 prev 0x232e386f9c0 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x232e3870200 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x232e3870590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x232e3870570 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x232e3870548 <col:91> 'unsigned long long' 3
| |-ClassTemplateSpecializationDecl 0x232e3871d38 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3874040 prev 0x232e3871d38 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3872408 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3873f68 prev 0x232e3872408 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3872a28 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3873e90 prev 0x232e3872a28 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3872ff0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3873db8 prev 0x232e3872ff0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3873568 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x232e3873c68 prev 0x232e3873568 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x232e3873cf8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x232e3874160 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x232e3874140 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x232e3874118 <col:91> 'unsigned long long' 4
| |-ClassTemplateSpecializationDecl 0x232e3875908 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3878170 prev 0x232e3875908 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3875fd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3878098 prev 0x232e3875fd8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e38765f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3877fc0 prev 0x232e38765f8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3876bc0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3877ee8 prev 0x232e3876bc0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3877138 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3877e10 prev 0x232e3877138 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3877650 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x232e3877cc0 prev 0x232e3877650 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x232e3877d50 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x232e3878290 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x232e3878270 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x232e3878248 <col:91> 'unsigned long long' 5
| |-ClassTemplateSpecializationDecl 0x232e3879b28 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e388f928 prev 0x232e3879b28 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e387a1f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e388f850 prev 0x232e387a1f8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e387a818 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e388f778 prev 0x232e387a818 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e387ade0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e388f6a0 prev 0x232e387ade0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e387b358 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e388f5c8 prev 0x232e387b358 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e387b870 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e387c458 prev 0x232e387b870 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e387bd38 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x232e387c308 prev 0x232e387bd38 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x232e387c398 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x232e388fa48 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x232e388fa28 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x232e388fa00 <col:91> 'unsigned long long' 6
| |-ClassTemplateSpecializationDecl 0x232e3893058 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3896270 prev 0x232e3893058 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3893728 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3896198 prev 0x232e3893728 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3893d48 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e38960c0 prev 0x232e3893d48 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3894310 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3895fe8 prev 0x232e3894310 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3894888 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3895f10 prev 0x232e3894888 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3894da0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3895e38 prev 0x232e3894da0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3895268 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3895d60 prev 0x232e3895268 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e38956d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x232e3895c10 prev 0x232e38956d0 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x232e3895ca0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x232e3896390 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x232e3896370 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x232e3896348 <col:91> 'unsigned long long' 7
| |-ClassTemplateSpecializationDecl 0x232e3a17d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a1b3d0 prev 0x232e3a17d68 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a18438 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a1b2f8 prev 0x232e3a18438 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a18a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a1b220 prev 0x232e3a18a58 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a19020 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a1b148 prev 0x232e3a19020 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a19598 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a1b070 prev 0x232e3a19598 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a19ab0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a1af98 prev 0x232e3a19ab0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a19f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a1aec0 prev 0x232e3a19f78 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a1a3e0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a1ade8 prev 0x232e3a1a3e0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a1a7f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 8
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x232e3a1ac98 prev 0x232e3a1a7f8 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x232e3a1ad28 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x232e3a1b4f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x232e3a1b4d0 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x232e3a1b4a8 <col:91> 'unsigned long long' 8
| |-ClassTemplateSpecializationDecl 0x232e3a1cc98 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a21720 prev 0x232e3a1cc98 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a1d368 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a21648 prev 0x232e3a1d368 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a1d988 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a21570 prev 0x232e3a1d988 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a1df50 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a21498 prev 0x232e3a1df50 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a1e4c8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a213c0 prev 0x232e3a1e4c8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a1fa00 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a212e8 prev 0x232e3a1fa00 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a1fec8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a21210 prev 0x232e3a1fec8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a20330 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a21138 prev 0x232e3a20330 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x232e3a20748 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
| | |-TemplateArgument integral 8
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x232e3a21060 prev 0x232e3a20748 <col:4, col:11> col:11 implicit struct _TypeId
| `-ClassTemplateSpecializationDecl 0x232e3a20b00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument integral 9
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-TemplateArgument pack
|   |-CXXRecordDecl 0x232e3a20f10 prev 0x232e3a20b00 <col:4, col:11> col:11 implicit struct _TypeId
|   `-VarDecl 0x232e3a20fa0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     `-CStyleCastExpr 0x232e3a21840 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|       `-SubstNonTypeTemplateParmExpr 0x232e3a21820 <col:91> 'unsigned long long'
|         `-IntegerLiteral 0x232e3a217f8 <col:91> 'unsigned long long' 9
|-VarTemplateDecl 0x232e33a99d8 <line:70:4, line:71:34> col:34 TypeId
| |-TemplateTypeParmDecl 0x232e33a98d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
| |-VarDecl 0x232e33a9970 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
| |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'bool'
| | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'long long'
| | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'unsigned long long'
| | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'double'
| | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::String'
| | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::IBaseObject *'
| | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'bool'
| `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'long long'
| `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'unsigned long long'
| `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'double'
| `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::String'
| `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::Array<alt::MValue>'
| `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::IBaseObject *'
| `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
`-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
  |-TemplateArgument type 'alt::MValue::Function'
  `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
    `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_MValueList_Push
RecordType 0x232e339e9c0 'class alt::MValue'
`-CXXRecord 0x232e339e930 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_MValueList_Push
RecordType 0x232e339e9c0 'class alt::MValue'
`-CXXRecord 0x232e339e930 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_MValueList_Push
CXXRecordDecl 0x232e339e930 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x232e339ea48 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x232e339ead8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x232e339eb18 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x232e339ebe0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ec38 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ec90 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ece8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ed40 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ed98 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339edf0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ee48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339eea0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x232e339eef8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x232e339ef60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x232e1c2b4a0 'void'
|-TypeAliasDecl 0x232e339efd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x232e1c2b4c0 'bool'
|-TypeAliasDecl 0x232e339f060 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x232e339f030 'int64_t' sugar
|   |-Typedef 0x232e22628e0 'int64_t'
|   `-BuiltinType 0x232e1c2b580 'long long'
|-TypeAliasDecl 0x232e339f0d0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x232e2f05260 'uint64_t' sugar
|   |-Typedef 0x232e2262aa0 'uint64_t'
|   `-BuiltinType 0x232e1c2b620 'unsigned long long'
|-TypeAliasDecl 0x232e339f148 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x232e1c2b660 'double'
|-TypeAliasDecl 0x232e339f240 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x232e339f1d0 'alt::String' sugar
|   `-RecordType 0x232e3156900 'alt::String'
|     `-CXXRecord 0x232e3156868 'String'
|-TypeAliasDecl 0x232e339f4d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x232e339f420 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x232e339f3e0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x232e339f3c0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x232e339f2d8 'Array'
|-TypeAliasDecl 0x232e339fe38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x232e339fd20 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x232e339fcc0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x232e339fca0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x232e339fb60 'unordered_map'
|-TypeAliasDecl 0x232e339ff80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x232e339ff30 'alt::IBaseObject *'
|   `-ElaboratedType 0x232e339feb0 'alt::IBaseObject' sugar
|     `-RecordType 0x232e339e860 'alt::IBaseObject'
|       `-CXXRecord 0x232e350c678 'IBaseObject'
|-CXXRecordDecl 0x232e339ffe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x232e33a00f8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x232e33a01a0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x232e34f08d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x232e3a22b60 <col:10>
| |-CXXConstructorDecl 0x232e34f09b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x232e34f09b0
| | `-ParmVarDecl 0x232e34f0a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x232e34f0b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x232e34f0b38
| | `-ParmVarDecl 0x232e34f0c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x232e350b9e8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x232e3a222b8 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x232e3a223c8 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x232e3a22fd0 <col:10>
| |   |-BinaryOperator 0x232e3a22f78 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x232e3a22f30 <col:10> 'void *' lvalue ->invoker 0x232e33a01a0
| |   | | `-CXXThisExpr 0x232e3a22f20 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x232e3a22f60 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x232e3a22ef0 <col:10> 'void *const' lvalue .invoker 0x232e33a01a0
| |   |     `-DeclRefExpr 0x232e3a22ed0 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x232e3a223c8 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x232e3a22fc0 <col:10>
| |     `-UnaryOperator 0x232e3a22fa8 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x232e3a22f98 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x232e3a22438 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x232e3a22438
|   `-ParmVarDecl 0x232e3a22548 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x232e33a0210 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x232e33a03d8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x232e33a0468 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x232e33a04f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x232e25be1b0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x232e33ab258 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x232e33ab248 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x232e33ab230 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x232e33ab208 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x232e33a0598 <line:45:38>
| |-CXXConstructorDecl 0x232e33a0620 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x232e33a0738 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x232e34f1530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x232e34f1510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x232e34f14f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x232e33a0738 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x232e34f15b8 <col:9>
| |-CXXConstructorDecl 0x232e33a07d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x232e33a07d8
| | `-ParmVarDecl 0x232e33a08e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x232e33a0988 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x232e33a0988
| | `-ParmVarDecl 0x232e33a0a98 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x232e33a0b08 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x232e33a0b08
| | `-ParmVarDecl 0x232e33a0c18 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x232e33a0ca0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x232e25be078 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x232e34f13c0 <col:9>
| `-CXXConstructorDecl 0x232e34f12e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x232e34f13d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x232e34f1450 <col:9>
|-AccessSpecDecl 0x232e33a0e40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x232e33a0f90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x232e33a0e70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x232e33a0f00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x232e33a1240 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x232e33a14f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x232e33a12e0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a1340 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x232e33a13b8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x232e33a1460 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x232e33a19f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x232e33a1e20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x232e33a1a98 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x232e33a1b18 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x232e33a20c8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x232e33a2168 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x232e33a1af0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x232e33a1a98 '_T'
| | |-TypeAliasTemplateDecl 0x232e33a25c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x232e33a2290 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x232e33a2560 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x232e33a24f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x232e33a28c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x232e33a2628 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a2688 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x232e33a2708 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x232e33a2788 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x232e33a2838 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x232e33a2e90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x232e33a3378 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x232e33a30d0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x232e33a2f48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x232e33a2f48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a2fa8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x232e33a3028 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x232e33a3668 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x232e33a3758 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x232e33a3838 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x232e33a37f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x232e33a2f48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x232e33a39d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x232e33a3878 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x232e33a3970 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x232e33a3c40 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x232e33a3f20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x232e33a7708 prev 0x232e33a3f20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x232e33a79b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x232e33a7798 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x232e33a77f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x232e33a7878 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x232e33a7920 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x232e33a8ba0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x232e33a82c0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x232e33a8b40 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x232e33a8af0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x232e33a8ea8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x232e33a8c08 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x232e33a8c68 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x232e33a8ce8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x232e33a8d68 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x232e33a8e18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3862658 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3863a80 prev 0x232e3862658 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3862ed8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3863930 prev 0x232e3862ed8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e38639c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3863ba0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3863b80 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3863b58 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x232e3865628 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e386ce40 prev 0x232e3865628 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3865cf8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e386cd68 prev 0x232e3865cf8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3866318 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e386cc18 prev 0x232e3866318 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e386cca8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e386cf60 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e386cf40 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e386cf18 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x232e386e708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3870470 prev 0x232e386e708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386edd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3870398 prev 0x232e386edd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386f3f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e38702c0 prev 0x232e386f3f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386f9c0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3870170 prev 0x232e386f9c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3870200 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3870590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3870570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3870548 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x232e3871d38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3874040 prev 0x232e3871d38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872408 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873f68 prev 0x232e3872408 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872a28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873e90 prev 0x232e3872a28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872ff0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873db8 prev 0x232e3872ff0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3873568 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3873c68 prev 0x232e3873568 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3873cf8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3874160 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3874140 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3874118 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x232e3875908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3878170 prev 0x232e3875908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3875fd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3878098 prev 0x232e3875fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e38765f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877fc0 prev 0x232e38765f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3876bc0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877ee8 prev 0x232e3876bc0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3877138 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877e10 prev 0x232e3877138 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3877650 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3877cc0 prev 0x232e3877650 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3877d50 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3878290 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3878270 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3878248 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x232e3879b28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f928 prev 0x232e3879b28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387a1f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f850 prev 0x232e387a1f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387a818 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f778 prev 0x232e387a818 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387ade0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f6a0 prev 0x232e387ade0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387b358 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f5c8 prev 0x232e387b358 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387b870 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e387c458 prev 0x232e387b870 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387bd38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e387c308 prev 0x232e387bd38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e387c398 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e388fa48 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e388fa28 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e388fa00 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x232e3893058 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3896270 prev 0x232e3893058 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3893728 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3896198 prev 0x232e3893728 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3893d48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e38960c0 prev 0x232e3893d48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894310 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895fe8 prev 0x232e3894310 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894888 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895f10 prev 0x232e3894888 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894da0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895e38 prev 0x232e3894da0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3895268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895d60 prev 0x232e3895268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e38956d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3895c10 prev 0x232e38956d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3895ca0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3896390 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3896370 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3896348 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x232e3a17d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b3d0 prev 0x232e3a17d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a18438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b2f8 prev 0x232e3a18438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a18a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b220 prev 0x232e3a18a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b148 prev 0x232e3a19020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19598 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b070 prev 0x232e3a19598 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19ab0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1af98 prev 0x232e3a19ab0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1aec0 prev 0x232e3a19f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1a3e0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1ade8 prev 0x232e3a1a3e0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1a7f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3a1ac98 prev 0x232e3a1a7f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3a1ad28 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3a1b4f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3a1b4d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3a1b4a8 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x232e3a1cc98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21720 prev 0x232e3a1cc98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1d368 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21648 prev 0x232e3a1d368 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1d988 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21570 prev 0x232e3a1d988 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1df50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21498 prev 0x232e3a1df50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1e4c8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a213c0 prev 0x232e3a1e4c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1fa00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a212e8 prev 0x232e3a1fa00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1fec8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21210 prev 0x232e3a1fec8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a20330 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21138 prev 0x232e3a20330 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a20748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21060 prev 0x232e3a20748 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x232e3a20b00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x232e3a20f10 prev 0x232e3a20b00 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x232e3a20fa0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x232e3a21840 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x232e3a21820 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x232e3a217f8 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x232e33a99d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x232e33a98d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x232e33a9970 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x232e33a4348 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x232e33a4020 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x232e33a4000 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x232e33a3f20 '_TypeTag'
|-CXXRecordDecl 0x232e33a43a8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x232e33a44c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x232e33a4568 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x232e33ab1f0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x232e33ab1c8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x232e33a4630 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x232e33ab9d8 <col:72>
| |-CXXMethodDecl 0x232e33a4768 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x232e33a4768
| | `-ParmVarDecl 0x232e33a4878 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x232e3864130 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x232e3864130
| | `-ParmVarDecl 0x232e3864248 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x232e3864c30 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x232e33a4568 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x232e3864d20 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x232e3864d70 <col:10>
|-ClassTemplateDecl 0x232e33a4ad0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x232e33a49b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x232e33a4a40 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x232e33a4d60 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x232e33a4e00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x232e3863dc0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x232e3863fc8 prev 0x232e3863dc0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3864098 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x232e38642d0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x232e38642d0
| | | `-ParmVarDecl 0x232e38643e8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x232e3864488 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x232e3864488
| | | `-ParmVarDecl 0x232e3864598 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x232e3864638 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x232e3864638
| | | `-ParmVarDecl 0x232e3864748 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x232e38647b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x232e38647b8
| | | `-ParmVarDecl 0x232e38648c8 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x232e3864950 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3864d10 <col:10>
| | `-CXXConstructorDecl 0x232e3864b58 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3864d80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e3864de8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e386d180 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x232e386d388 prev 0x232e386d180 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e386d458 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x232e386d4f0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x232e386d4f0
| | | `-ParmVarDecl 0x232e386d608 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x232e386d6a8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x232e386d6a8
| | | `-ParmVarDecl 0x232e386d7b8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x232e386d858 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x232e386d858
| | | `-ParmVarDecl 0x232e386d968 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x232e386d9d8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x232e386d9d8
| | | `-ParmVarDecl 0x232e386dae8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x232e386db70 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e386de50 <col:10>
| | `-CXXConstructorDecl 0x232e386dd78 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e386de60 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e386dec8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38707b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x232e38709b8 prev 0x232e38707b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3870a88 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x232e3870b20 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x232e3870b20
| | | `-ParmVarDecl 0x232e3870c38 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x232e3870cd8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x232e3870cd8
| | | `-ParmVarDecl 0x232e3870de8 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x232e3870e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x232e3870e88
| | | `-ParmVarDecl 0x232e3870f98 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x232e3871008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x232e3871008
| | | `-ParmVarDecl 0x232e3871118 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x232e38711a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3871480 <col:10>
| | `-CXXConstructorDecl 0x232e38713a8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3871490 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e38714f8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e3874380 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x232e3874588 prev 0x232e3874380 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3874658 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x232e38746f0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x232e38746f0
| | | `-ParmVarDecl 0x232e3874808 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x232e38748a8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x232e38748a8
| | | `-ParmVarDecl 0x232e38749b8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x232e3874a58 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x232e3874a58
| | | `-ParmVarDecl 0x232e3874b68 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x232e3874bd8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x232e3874bd8
| | | `-ParmVarDecl 0x232e3874ce8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x232e3874d70 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3875050 <col:10>
| | `-CXXConstructorDecl 0x232e3874f78 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3875060 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e38750c8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38784b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x232e38786b8 prev 0x232e38784b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3878788 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x232e3878820 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x232e3878820
| | | `-ParmVarDecl 0x232e3878938 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x232e38789d8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x232e38789d8
| | | `-ParmVarDecl 0x232e3878ae8 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x232e3878b88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x232e3878b88
| | | `-ParmVarDecl 0x232e3878c98 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x232e3878d08 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x232e3878d08
| | | `-ParmVarDecl 0x232e3878e18 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x232e3878ea0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e38791c0 <col:10>
| | `-CXXConstructorDecl 0x232e38790a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e38791d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e3878788 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x232e3879230 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x232e3879290 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e388fc68 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x232e388fe78 prev 0x232e388fc68 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e388ff48 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x232e388ffe0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x232e388ffe0
| | | `-ParmVarDecl 0x232e38900f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x232e3890198 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x232e3890198
| | | `-ParmVarDecl 0x232e38902a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x232e3890348 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x232e3890348
| | | `-ParmVarDecl 0x232e3890458 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x232e38904c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x232e38904c8
| | | `-ParmVarDecl 0x232e38905d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x232e3890660 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3890a10 <col:10>
| | `-CXXConstructorDecl 0x232e3890938 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3890a20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e388ff48 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x232e3890a80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x232e3890ae0 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38965b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x232e38967b8 prev 0x232e38965b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3896888 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x232e3896920 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x232e3896920
| | | `-ParmVarDecl 0x232e3896a38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x232e3896ad8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x232e3896ad8
| | | `-ParmVarDecl 0x232e3896be8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x232e3896c88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x232e3896c88
| | | `-ParmVarDecl 0x232e3896d98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x232e3896e08 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x232e3896e08
| | | `-ParmVarDecl 0x232e3896f18 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x232e3896fa0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3897da0 <col:10>
| | `-CXXConstructorDecl 0x232e3897c88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3897db0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e3896888 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x232e3897e10 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x232e3897e70 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e3a1b710 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x232e3a1b918 prev 0x232e3a1b710 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3a1b9e8 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x232e3a1ba80 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x232e3a1ba80
| | | `-ParmVarDecl 0x232e3a1bb98 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x232e3a1bc38 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x232e3a1bc38
| | | `-ParmVarDecl 0x232e3a1bd48 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x232e3a1bde8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x232e3a1bde8
| | | `-ParmVarDecl 0x232e3a1bef8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x232e3a1bf68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x232e3a1bf68
| | | `-ParmVarDecl 0x232e3a1c078 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x232e3a1c100 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3a1c3e0 <col:10>
| | `-CXXConstructorDecl 0x232e3a1c308 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3a1c3f0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e3a1c458 <col:10>
| `-ClassTemplateSpecializationDecl 0x232e3a21a60 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x232e3a21c68 prev 0x232e3a21a60 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x232e3a21d38 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x232e3a21dd0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x232e3a21dd0
|   | `-ParmVarDecl 0x232e3a21ee8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x232e3a21f88 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x232e3a21f88
|   | `-ParmVarDecl 0x232e3a22098 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x232e3a22138 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x232e3a22138
|   | `-ParmVarDecl 0x232e3a22248 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x232e3a225b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x232e3a225b8
|   | `-ParmVarDecl 0x232e3a226c8 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x232e3a22750 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x232e3a22af0 <col:10>
|   `-CXXConstructorDecl 0x232e3a22a18 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x232e3a22b00 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x232e3a21d38 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x232e3a22b70 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x232e3a22bd0 <col:10>
|-FunctionTemplateDecl 0x232e33a50c8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x232e33a4e70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x232e33a5028 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x232e33a4f38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x232e3862150 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3861d88 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x232e3861d00 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x232e33a99d8
| |   |-DeclStmt 0x232e3861f60 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3861db8 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x232e3861f28 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x232e3862008 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x232e3861f98 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x232e3861f78 <col:4> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |   | `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e38620b0 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x232e3862048 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x232e3862028 <col:4> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |   | `-DeclRefExpr 0x232e3862090 <col:22> 'const T' lvalue ParmVar 0x232e33a4f38 'val' 'const T &'
| |   `-BinaryOperator 0x232e3862130 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x232e3862110 <col:14> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |-CXXMethodDecl 0x232e33abd28 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x232e33abc68 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x232e3865120 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3863d28 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3863d10 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3863ca0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3862198 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3864f10 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3863d48 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x232e3864e20 <col:20> 'Storage<bool> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3864df8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x232e3864fc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3864f80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3864f60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3864f48 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3864f28 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x232e3864fb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3865088 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x232e3865020 <col:4, col:14> 'bool':'bool' lvalue ->value 0x232e3864098
| |   | | `-ImplicitCastExpr 0x232e3865008 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3864fe8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x232e3865070 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3865050 <col:22> 'const bool':'const bool' lvalue ParmVar 0x232e33abc68 'val' 'const bool &'
| |   `-BinaryOperator 0x232e3865100 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38650e0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38650c8 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38650a8 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x232e341b2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x232e341b1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x232e386e200 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e386d0e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e386d0d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e386d060 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3865168 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e386dff0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e386d108 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x232e386df00 <col:20> 'Storage<long long> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e386ded8 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x232e386e0a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e386e060 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e386e040 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e386e028 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e386e008 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x232e386e090 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e386e168 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x232e386e100 <col:4, col:14> 'long long':'long long' lvalue ->value 0x232e386d458
| |   | | `-ImplicitCastExpr 0x232e386e0e8 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e386e0c8 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x232e386e150 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e386e130 <col:22> 'const long long':'const long long' lvalue ParmVar 0x232e341b1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x232e386e1e0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e386e1c0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e386e1a8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e386e188 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x232e341b648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x232e341b588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x232e3871830 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3870718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3870700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3870690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e386e248 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3871620 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3870738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x232e3871530 <col:20> 'Storage<unsigned long long> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3871508 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x232e38716d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3871690 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3871670 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3871658 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3871638 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x232e38716c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3871798 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3871730 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x232e3870a88
| |   | | `-ImplicitCastExpr 0x232e3871718 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e38716f8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x232e3871780 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3871760 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x232e341b588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x232e3871810 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38717f0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38717d8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38717b8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x232e341b9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x232e341b918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x232e3875400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e38742e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e38742d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3874260 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3871878 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e38751f0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3874308 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x232e3875100 <col:20> 'Storage<double> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e38750d8 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x232e38752a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3875260 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3875240 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3875228 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3875208 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x232e3875290 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3875368 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x232e3875300 <col:4, col:14> 'double':'double' lvalue ->value 0x232e3874658
| |   | | `-ImplicitCastExpr 0x232e38752e8 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e38752c8 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x232e3875350 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3875330 <col:22> 'const double':'const double' lvalue ParmVar 0x232e341b918 'val' 'const double &'
| |   `-BinaryOperator 0x232e38753e0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38753c0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38753a8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3875388 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x232e341bd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x232e341bc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x232e3879620 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3878418 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3878400 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3878390 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3875448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e38793b0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3878438 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x232e38792c8 <col:20> 'Storage<alt::String> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e38792a0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x232e3879468 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3879420 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3879400 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e38793e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e38793c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x232e3879450 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3879570 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x232e3879558 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e3879510 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x232e3158298 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x232e38794c0 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x232e3878788
| |   | | `-ImplicitCastExpr 0x232e38794a8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3879488 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x232e38794f0 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x232e341bc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x232e3879600 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38795e0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38795c8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38795a8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x232e341c0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x232e341c018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x232e3890e70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e388fbd0 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e388fbb8 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e388fb48 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3879668 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3890c00 <line:85:4, col:34>
| |   | `-VarDecl 0x232e388fbf0 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x232e3890b18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3890af0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x232e3890cb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3890c70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3890c50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3890c38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3890c18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x232e3890ca0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3890dc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x232e3890da8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e3890d60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x232e3424218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x232e3890d10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x232e388ff48
| |   | | `-ImplicitCastExpr 0x232e3890cf8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3890cd8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x232e3890d40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e341c018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x232e3890e50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e3890e30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3890e18 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3890df8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x232e341c458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x232e341c398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x232e38991f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3896518 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3896500 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3896490 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3892b98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3897f90 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3896538 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x232e3897ea8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3897e80 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x232e3898048 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3898000 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3897fe0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3897fc8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3897fa8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x232e3898030 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3899140 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x232e3899128 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e38990d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x232e34e9498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x232e38980a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x232e3896888
| |   | | `-ImplicitCastExpr 0x232e3898088 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3898068 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x232e38980d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e341c398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x232e38991d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38991b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3899198 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3899178 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x232e341c7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x232e341c718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x232e3a1c790 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3a1b678 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3a1b660 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3a1b5f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a178a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3a1c580 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3a1b698 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x232e3a1c490 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3a1c468 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x232e3a1c638 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3a1c5f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3a1c5d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3a1c5b8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3a1c598 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x232e3a1c620 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3a1c6f8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x232e3a1c690 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x232e3a1b9e8
| |   | | `-ImplicitCastExpr 0x232e3a1c678 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3a1c658 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x232e3a1c6e0 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3a1c6c0 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x232e341c718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x232e3a1c770 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e3a1c750 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3a1c738 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a1c718 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x232e341cb58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x232e341ca98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x232e3a230e0 <line:83:3, line:91:3>
|     |-BinaryOperator 0x232e3a219c8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|     | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x232e3a219b0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x232e3a21940 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a1c7d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x232e3a22cf0 <line:85:4, col:34>
|     | `-VarDecl 0x232e3a219e8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x232e3a22c08 <col:20> 'Storage<alt::MValue::Function> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x232e3a22be0 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x232e3a22da8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x232e3a22d60 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|     | | `-ImplicitCastExpr 0x232e3a22d40 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x232e3a22d28 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x232e3a22d08 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x232e3a22d90 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x232e3a23030 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x232e3a23018 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x232e3a22eb0 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x232e3a222b8 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x232e3a22e00 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x232e3a21d38
|     | | `-ImplicitCastExpr 0x232e3a22de8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x232e3a22dc8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x232e3a22e30 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x232e341ca98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x232e3a230c0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|       | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x232e3a230a0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x232e3a23088 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x232e3a23068 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x232e33a5148 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x232e33ab430 <line:94:3, line:97:3>
|   |-BinaryOperator 0x232e33ab388 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x232e33ab280 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | | `-CXXThisExpr 0x232e33ab270 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x232e33ab300 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x232e339ebe0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x232e33ab410 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x232e33ab3b8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     | `-CXXThisExpr 0x232e33ab3a8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x232e33ab3f8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x232e33ab3e8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x232e33a52e8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e33a5228 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e33ab708 <line:100:3, line:106:3>
|   |-BinaryOperator 0x232e33ab4f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x232e33ab460 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | | `-CXXThisExpr 0x232e33ab450 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x232e33ab4e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x232e33ab4b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x232e33a5460
|   |     `-DeclRefExpr 0x232e33ab490 <col:11> 'const alt::MValue' lvalue ParmVar 0x232e33a5228 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x232e33ab5c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x232e33ab528 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   | | `-CXXThisExpr 0x232e33ab518 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x232e33ab5a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x232e33ab578 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x232e33a54c8
|   |     `-DeclRefExpr 0x232e33ab558 <col:14> 'const alt::MValue' lvalue ParmVar 0x232e33a5228 'that' 'const alt::MValue &'
|   `-IfStmt 0x232e33ab6f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x232e33ab638 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x232e33ab620 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x232e33ab5f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     |     `-CXXThisExpr 0x232e33ab5e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x232e33ab6d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x232e33ab6a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|         `-ImplicitCastExpr 0x232e33ab690 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x232e33ab660 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|             `-CXXThisExpr 0x232e33ab650 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x232e33a53b0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x232e33aba20 <line:109:3, line:117:3>
|   |-IfStmt 0x232e33ab7c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x232e33ab7a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x232e33ab788 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x232e33ab770 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x232e33ab740 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   | |       `-CXXThisExpr 0x232e33ab730 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x232e33ab7b8 <line:111:5>
|   |-UnaryOperator 0x232e33ab868 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x232e33ab838 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|   |   `-ImplicitCastExpr 0x232e33ab820 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x232e33ab7f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   |       `-CXXThisExpr 0x232e33ab7e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x232e33aba08 <line:115:4, line:116:12>
|     |-BinaryOperator 0x232e33ab960 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x232e33ab930 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x232e33ab8d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|     | |   `-ImplicitCastExpr 0x232e33ab8c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x232e33ab890 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     | |       `-CXXThisExpr 0x232e33ab880 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x232e33ab948 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x232e33ab908 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x232e33ab9e8 <line:116:5, col:12> 'void' Function 0x232e1e65d28 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x232e33ab9c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x232e33ab990 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|           `-CXXThisExpr 0x232e33ab980 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x232e33a5460 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x232e33a54c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x232e33a5520 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e33a5588 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x232e33abaa8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x232e33aba88 <col:14, col:24> 'void'
|     `-MemberExpr 0x232e33aba58 <col:14> '<bound member function type>' ->CreateNil 0x232e33a5148
|       `-CXXThisExpr 0x232e33aba48 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x232e33a5728 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x232e33a5668 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x232e341b0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341b088 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341b040 <col:29> '<bound member function type>' ->Create 0x232e33abd28
|     | `-CXXThisExpr 0x232e33abe28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e33abb28 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x232e33a5668 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x232e33a5938 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x232e33a5848 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x232e341b438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x232e341b410 <col:28, col:38> 'void'
|     |-MemberExpr 0x232e341b3c8 <col:28> '<bound member function type>' ->Create 0x232e341b2b8
|     | `-CXXThisExpr 0x232e341b3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x232e33a5848 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x232e33a5b18 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x232e33a5a28 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x232e341b7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341b7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341b758 <col:29> '<bound member function type>' ->Create 0x232e341b648
|     | `-CXXThisExpr 0x232e341b748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x232e33a5a28 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x232e33a5cf8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x232e33a5c08 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x232e341bb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341bb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341bae8 <col:31> '<bound member function type>' ->Create 0x232e341b9d8
|     | `-CXXThisExpr 0x232e341bad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x232e33a5c08 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x232e33a5ea8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x232e33a5de8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x232e341bed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341beb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341be68 <col:31> '<bound member function type>' ->Create 0x232e341bd58
|     | `-CXXThisExpr 0x232e341be58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341bbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x232e33a5de8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x232e33a60b8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x232e33a5fc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x232e341c258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341c230 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341c1e8 <col:29> '<bound member function type>' ->Create 0x232e341c0d8
|     | `-CXXThisExpr 0x232e341c1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341bf58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e33a5fc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x232e33a62c8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x232e33a61d8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x232e341c5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341c5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341c568 <col:29> '<bound member function type>' ->Create 0x232e341c458
|     | `-CXXThisExpr 0x232e341c558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e33a61d8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x232e33a64d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x232e33a63e8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x232e341c958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341c930 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341c8e8 <col:31> '<bound member function type>' ->Create 0x232e341c7d8
|     | `-CXXThisExpr 0x232e341c8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x232e33a63e8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x232e33a6688 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x232e33a65c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x232e341ccd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x232e341ccb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x232e341cc68 <col:33> '<bound member function type>' ->Create 0x232e341cb58
|     | `-CXXThisExpr 0x232e341cc58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x232e33a65c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x232e33a6838 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x232e33a6770 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x232e341cfb0 <col:23, col:43>
|   `-ExprWithCleanups 0x232e341cf98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x232e341cf28 <col:25, col:40> 'void'
|       |-MemberExpr 0x232e341cea0 <col:25, col:35> '<bound member function type>' ->Create 0x232e341b2b8
|       | `-CXXThisExpr 0x232e341ce90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341cf80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x232e341cf68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x232e341cf50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x232e341cda8 <col:37> 'int32_t':'int' lvalue ParmVar 0x232e33a6770 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x232e33a69b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x232e33a68f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x232e341d288 <col:24, col:45>
|   `-ExprWithCleanups 0x232e341d270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x232e341d200 <col:26, col:42> 'void'
|       |-MemberExpr 0x232e341d178 <col:26, col:37> '<bound member function type>' ->Create 0x232e341b648
|       | `-CXXThisExpr 0x232e341d168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x232e341d240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x232e341d228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x232e341d080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x232e33a68f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x232e33a6b10 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x232e33a6a80 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x232e341d600 <col:27, col:50>
|   `-ExprWithCleanups 0x232e341d5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x232e341d508 <col:29, col:47> 'void'
|       |-MemberExpr 0x232e341d480 <col:29, col:42> '<bound member function type>' ->Create 0x232e341bd58
|       | `-CXXThisExpr 0x232e341d470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x232e341d5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x232e341d5a8)
|           `-CXXConstructExpr 0x232e341d578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x232e341d560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x232e341d358 <col:44> 'const char *' lvalue ParmVar 0x232e33a6a80 'val' 'const char *'
|-CXXConstructorDecl 0x232e33a6d38 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x232e33a6c70 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x232e341d990 <col:34, col:57>
|   `-ExprWithCleanups 0x232e341d978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x232e341d880 <col:36, col:54> 'void'
|       |-MemberExpr 0x232e341d7f8 <col:36, col:49> '<bound member function type>' ->Create 0x232e341bd58
|       | `-CXXThisExpr 0x232e341d7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x232e341d948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x232e341d928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x232e341d920)
|             `-ImplicitCastExpr 0x232e341d908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x232e341d8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x232e341d6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e33a6c70 'val' 'const std::string &'
|-CXXConstructorDecl 0x232e33a6e88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e33a6df8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e341da30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x232e341da08 <col:32, col:41> 'void'
|     |-MemberExpr 0x232e341d9b8 <col:32> '<bound member function type>' ->Copy 0x232e33a52e8
|     | `-CXXThisExpr 0x232e341d9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341d9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x232e33a6df8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x232e33a7038 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x232e33a6f48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e341db68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x232e341da88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x232e341da58 <col:4> '<bound member function type>' ->Destroy 0x232e33a53b0
|   |   `-CXXThisExpr 0x232e341da48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x232e341db08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x232e341dab8 <col:4> '<bound member function type>' ->Copy 0x232e33a52e8
|   | | `-CXXThisExpr 0x232e341daa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x232e341dae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x232e33a6f48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x232e341db58 <line:146:4, col:12>
|     `-UnaryOperator 0x232e341db40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e341db30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x232e33a7128 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x232e341dc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x232e341dc50 <line:151:4, col:22>
|     `-BinaryOperator 0x232e341dc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x232e341dbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x232e341dba0 <col:11> '<bound member function type>' ->ToInt 0x232e33a7218
|       |   `-CXXThisExpr 0x232e341db90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x232e341dc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x232e341dbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x232e33a7218 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x232e341f0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x232e341dcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x232e341dcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341dc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341dc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e341f048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x232e341dd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x232e341dd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341dd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341e218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341e200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341e1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341e1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x232e341e140 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |           `-CXXThisExpr 0x232e341e130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341e2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x232e341e290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e341e260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341e6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x232e341e6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x232e341e688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x232e341e600 <col:12, col:19> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |         `-CXXThisExpr 0x232e341e5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341e758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x232e341e738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e341e708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341eb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341eb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341eb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341eb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x232e341eaa0 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e998
|   |   |           `-CXXThisExpr 0x232e341ea90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e341ec10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x232e341ebf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x232e341ebc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e341f038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x232e341f020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x232e341f008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x232e341efe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x232e341ef60 <col:12, col:22> '<bound member function type>' ->Get 0x232e341ee58
|   |               `-CXXThisExpr 0x232e341ef50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e341f0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x232e341f0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x232e341f078 <col:11> 'int' 0
|-CXXMethodDecl 0x232e33a7308 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x232e341fd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x232e341f140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x232e341f128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341f0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341f0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e341fd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x232e341f1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x232e341f1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341f198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341f440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341f428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341f410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341f3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x232e341f368 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |           `-CXXThisExpr 0x232e341f358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341f4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x232e341f4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e341f488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341f730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x232e341f718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341f700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341f6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x232e341f658 <col:12, col:19> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |           `-CXXThisExpr 0x232e341f648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341f7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x232e341f7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e341f778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341fa08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341f9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x232e341f9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x232e341f948 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e998
|   |   |         `-CXXThisExpr 0x232e341f938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e341faa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x232e341fa80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x232e341fa50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e341fcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x232e341fce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x232e341fcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x232e341fca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x232e341fc20 <col:12, col:22> '<bound member function type>' ->Get 0x232e341ee58
|   |               `-CXXThisExpr 0x232e341fc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e341fd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x232e341fd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x232e341fd38 <col:11> 'int' 0
|-CXXMethodDecl 0x232e33a7428 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x232e3421b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x232e341fe00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x232e341fde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341fdb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341fda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e3421650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x232e341fea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x232e341fe88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341fe58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x232e34201e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x232e34201b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x232e3420158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x232e3420110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x232e34200b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x232e3420028 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |         |     `-CXXThisExpr 0x232e3420018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x232e3420128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x232e34200d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x232e3420140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x232e34200f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x232e3420298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x232e3420278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e3420248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x232e34206f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e34206d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e34206a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e3420690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e3420678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3420628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3420620)
|   |   |               `-CallExpr 0x232e34205e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e34205c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x232e30995f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x232e3420608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x232e34204c0 <col:27, col:34> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |                       `-CXXThisExpr 0x232e34204b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e34207a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x232e3420780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e3420750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x232e3420bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e3420bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e3420ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e3420b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e3420b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3420b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3420b20)
|   |   |               `-CallExpr 0x232e3420ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e3420ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x232e309a088 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x232e3420b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x232e34209c8 <col:27, col:35> '<bound member function type>' ->Get 0x232e341e998
|   |   |                       `-CXXThisExpr 0x232e34209b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e3420ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x232e3420c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x232e3420c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3421138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x232e3421120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e3421108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e34210d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e34210c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e34210a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3421058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3421050)
|   |   |               `-CallExpr 0x232e3421010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e3420ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x232e309b298 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x232e3421038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x232e3420ec8 <col:27, col:37> '<bound member function type>' ->Get 0x232e341ee58
|   |   |                       `-CXXThisExpr 0x232e3420eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e34211d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x232e34211b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x232e3421180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed98 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e3421640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x232e3421610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x232e34215f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x232e34215a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x232e3421520 <col:12, col:22> '<bound member function type>' ->Get 0x232e3421418
|   |               `-CXXThisExpr 0x232e3421510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e3421b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x232e3421b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x232e3421b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x232e3421af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x232e3421688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x232e33a7548 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x232e3421be8 <col:24, col:39>
|   `-ReturnStmt 0x232e3421bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e3421bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x232e3421b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x232e33a5460
|         `-CXXThisExpr 0x232e3421b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x232e33aae10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x232e33a75f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x232e33aa410 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x232e33aad70 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x232e33ab018 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x232e33aae68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x232e33aaf78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x232e3a23570 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a232f8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23240 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x232e3a23178 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x232e33a99d8
| |   | | `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |   `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a232e0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a232c8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a232a8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a232a0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a234e0 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23320 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a234b0 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |       `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a23560 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x232e3a23518 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x232e3a234f8 <col:11> 'auto' lvalue Var 0x232e3a23320 '_storage' 'auto'
| |-CXXMethodDecl 0x232e341e038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x232e3a239c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23730 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a236b8 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23688 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23618 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3862198 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a236a0 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23718 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23700 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a236e0 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a236d8)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a23938 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23748 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a23878 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a23860 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a239b8 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a23988 <col:11, col:21> 'bool':'bool' lvalue ->value 0x232e3864098
| |       `-ImplicitCastExpr 0x232e3a23970 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a23950 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3a23748 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x232e341e4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x232e3a23e28 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23b88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23b10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23ae0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23a70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3865168 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a23af8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23b70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23b58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a23b38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a23b30)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a23d98 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23ba0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a23cd8 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a23cc0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a23e18 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a23de8 <col:11, col:21> 'long long':'long long' lvalue ->value 0x232e386d458
| |       `-ImplicitCastExpr 0x232e3a23dd0 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a23db0 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e3a23ba0 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x232e341e998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x232e3a24288 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23fe8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23f70 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23f40 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23ed0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e386e248 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a23f58 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23fd0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23fb8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a23f98 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a23f90)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a241f8 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a24000 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a24138 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a24120 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a24278 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a24248 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x232e3870a88
| |       `-ImplicitCastExpr 0x232e3a24230 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24210 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3a24000 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x232e341ee58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x232e3a246e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a24448 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a243d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a243a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a24330 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3871878 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a243b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a24430 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a24418 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a243f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a243f0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a24658 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a24460 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a24598 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a24580 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a246d8 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a246a8 <col:11, col:21> 'double':'double' lvalue ->value 0x232e3874658
| |       `-ImplicitCastExpr 0x232e3a24690 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24670 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3a24460 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x232e3421418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x232e3a24b48 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a248a8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a24830 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a24800 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a24790 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3875448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a24818 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a24890 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a24878 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a24858 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a24850)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a24ab8 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a248c0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a249f8 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a249e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a24b38 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a24b08 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x232e3878788
| |       `-ImplicitCastExpr 0x232e3a24af0 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24ad0 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3a248c0 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x232e34f19a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x232e3a25998 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a256f8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a25680 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a25650 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a255e0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3879668 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a25668 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a256e0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a256c8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a256a8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a256a0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a25908 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a25710 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a25848 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a25830 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a25988 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a25958 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x232e388ff48
| |       `-ImplicitCastExpr 0x232e3a25940 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a25920 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e3a25710 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x232e34f3d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x232e3a3dd28 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a3da88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a3da10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a3d9e0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a3d970 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3892b98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a3d9f8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a3da70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a3da58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a3da38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a3da30)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a3dc98 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a3daa0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a3dbd8 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a3dbc0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a3dd18 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a3dce8 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x232e3896888
| |       `-ImplicitCastExpr 0x232e3a3dcd0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a3dcb0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3a3daa0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x232e350c2e8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x232e3abbaf8 <line:217:3, line:223:3>
|     |-IfStmt 0x232e3abb858 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x232e3abb7e0 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x232e3abb7b0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x232e3abb740 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a1c7d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x232e3abb7c8 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|     | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x232e3abb840 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x232e3abb828 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x232e3abb808 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3abb800)
|     |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x232e3abba68 <line:221:4, col:53>
|     | `-VarDecl 0x232e3abb870 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x232e3abb9a8 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x232e3abb990 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x232e3abbae8 <line:222:4, col:21>
|       `-MemberExpr 0x232e3abbab8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x232e3a21d38
|         `-ImplicitCastExpr 0x232e3abbaa0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x232e3abba80 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3abb870 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x232e33ab0b8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x232e3421c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x232e3421c40 <col:15, col:23> 'void'
      `-MemberExpr 0x232e3421c10 <col:15> '<bound member function type>' ->Destroy 0x232e33a53b0
        `-CXXThisExpr 0x232e3421c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_MValueFunction_Invoker_Invoke
RecordType 0x232e3421d80 'class alt::MValueList'
`-CXXRecord 0x232e3421ce8 'MValueList'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_MValueFunction_Invoker_Invoke
RecordType 0x232e3421d80 'class alt::MValueList'
`-CXXRecord 0x232e3421ce8 'MValueList'

--- END OF NODE ---

Record param FROM FUNCTION alt_MValueFunction_Invoker_Invoke
CXXRecordDecl 0x232e3421ce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValueList.h:7:2, line:43:2> line:7:8 referenced class MValueList definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'alt::MValue'
|-CXXRecordDecl 0x232e3421e48 <col:2, col:8> col:8 implicit referenced class MValueList
|-AccessSpecDecl 0x232e3421ed8 <line:9:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e3421f70 <line:10:3, line:14:3> line:10:3 MValueList 'void ()'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x232e34f0d18 <line:11:4, col:25> 'alt::MValue'
| |   `-CXXConstructExpr 0x232e34f0ce8 <col:4, col:25> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x232e34f0cd0 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x232e34f0cb8 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXBindTemporaryExpr 0x232e3425398 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x232e3425390)
| |           `-CXXTemporaryObjectExpr 0x232e3425360 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' 'void () noexcept' zeroing
| `-CompoundStmt 0x232e34f0d60 <line:12:3, line:14:3>
|-CXXConstructorDecl 0x232e34220b8 <line:16:3, line:20:3> line:16:3 MValueList 'void (alt::Size)'
| |-ParmVarDecl 0x232e3422028 <col:14, col:19> col:19 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x232e34f1018 <line:17:4, col:29> 'alt::MValue'
| |   `-CXXConstructExpr 0x232e34f0fe8 <col:4, col:29> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x232e34f0fd0 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x232e34f0fb8 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXFunctionalCastExpr 0x232e34f0f30 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' functional cast to class MValue::List <ConstructorConversion>
| |           `-CXXBindTemporaryExpr 0x232e34f0f10 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x232e34f0f08)
| |             `-CXXConstructExpr 0x232e34f0ed0 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' 'void (alt::Size, const alt::MValue &)'
| |               |-ImplicitCastExpr 0x232e34f0de8 <col:24> 'alt::Size':'unsigned long long' <LValueToRValue>
| |               | `-DeclRefExpr 0x232e34f0dc8 <col:24> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3422028 'size' 'alt::Size':'unsigned long long'
| |               `-CXXDefaultArgExpr 0x232e34f0eb0 <<invalid sloc>> 'const alt::MValue':'const alt::MValue' lvalue
| `-CompoundStmt 0x232e34f1060 <line:18:3, line:20:3>
|-CXXConstructorDecl 0x232e34222f8 <line:22:3, line:26:3> line:22:3 MValueList 'void (const MValue::List &)'
| |-ParmVarDecl 0x232e3422230 <col:14, col:34> col:34 used list 'const MValue::List &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x232e34f10f0 <line:23:4, col:15> 'alt::MValue' 'void (const alt::MValue::List &)'
| |   `-DeclRefExpr 0x232e34f1070 <col:11> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e3422230 'list' 'const MValue::List &'
| `-CompoundStmt 0x232e34f1150 <line:24:3, line:26:3>
|-CXXConstructorDecl 0x232e3422478 <line:28:3, line:34:3> line:28:3 MValueList 'void (alt::MValue)'
| |-ParmVarDecl 0x232e34223b8 <col:14, col:21> col:21 used val 'alt::MValue'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x232e34f1160 <col:3> 'alt::MValue' 'void ()'
| `-CompoundStmt 0x232e34f1768 <line:29:3, line:34:3>
|   |-IfStmt 0x232e34f15f8 <line:30:4, line:31:33>
|   | |-BinaryOperator 0x232e34f12b8 <line:30:8, col:31> 'bool' '!='
|   | | |-CXXMemberCallExpr 0x232e34f1218 <col:8, col:20> 'alt::MValue::Type'
|   | | | `-MemberExpr 0x232e34f11e8 <col:8, col:12> '<bound member function type>' .GetType 0x232e33a7548
|   | | |   `-ImplicitCastExpr 0x232e34f1238 <col:8> 'const alt::MValue' lvalue <NoOp>
|   | | |     `-DeclRefExpr 0x232e34f11c8 <col:8> 'alt::MValue' lvalue ParmVar 0x232e34223b8 'val' 'alt::MValue'
|   | | `-DeclRefExpr 0x232e34f1288 <col:25, col:31> 'alt::MValue::Type' EnumConstant 0x232e339edf0 'LIST' 'alt::MValue::Type'
|   | `-ExprWithCleanups 0x232e34f15e0 <line:31:5, col:33> 'void'
|   |   `-CXXThrowExpr 0x232e34f15c8 <col:5, col:33> 'void'
|   |     `-CXXBindTemporaryExpr 0x232e34f1498 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e34f1490)
|   |       `-CXXTemporaryObjectExpr 0x232e34f1460 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|   `-CXXOperatorCallExpr 0x232e34f1730 <line:33:4, col:21> 'alt::MValue' lvalue
|     |-ImplicitCastExpr 0x232e34f1718 <col:19> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x232e34f16c8 <col:19> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x232e33a7038 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |-UnaryOperator 0x232e34f1678 <col:4, col:14> 'alt::MValue' lvalue prefix '*' cannot overflow
|     | `-CStyleCastExpr 0x232e34f1650 <col:5, col:14> 'alt::MValue *' <NoOp>
|     |   `-ImplicitCastExpr 0x232e34f1630 <col:14> 'alt::MValue *' <DerivedToBase (MValue)> part_of_explicit_cast
|     |     `-CXXThisExpr 0x232e34f1610 <col:14> 'alt::MValueList *' this
|     `-ImplicitCastExpr 0x232e34f16b0 <col:21> 'const alt::MValue' lvalue <NoOp>
|       `-DeclRefExpr 0x232e34f1690 <col:21> 'alt::MValue' lvalue ParmVar 0x232e34223b8 'val' 'alt::MValue'
|-CXXMethodDecl 0x232e3422578 <line:36:3, col:50> col:8 GetSize 'alt::Size ()'
| `-CompoundStmt 0x232e34f1c20 <col:18, col:50>
|   `-ReturnStmt 0x232e34f1c10 <col:20, col:47>
|     `-CXXMemberCallExpr 0x232e34f1ba8 <col:27, col:47> 'alt::Size':'unsigned long long'
|       `-MemberExpr 0x232e34f1b78 <col:27, col:39> '<bound member function type>' .GetSize 0x232e34245f0
|         `-ImplicitCastExpr 0x232e34f1bf8 <col:27, col:37> 'const alt::Array<alt::MValue>' lvalue <NoOp>
|           `-CXXMemberCallExpr 0x232e34f1b38 <col:27, col:37> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|             `-MemberExpr 0x232e34f1ab0 <col:27, col:35> '<bound member function type>' ->Get 0x232e34f19a8
|               `-ImplicitCastExpr 0x232e34f1b58 <col:27> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|                 `-CXXThisExpr 0x232e34f1aa0 <col:27> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x232e3422718 <line:38:3, col:59> col:11 operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x232e3422628 <col:22, col:27> col:27 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e34f1f68 <col:32, col:59>
|   `-ReturnStmt 0x232e34f1f58 <col:34, col:56>
|     `-CXXOperatorCallExpr 0x232e34f1f20 <col:41, col:56> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x232e34f1f08 <col:52, col:56> 'alt::MValue &(*)(alt::Size)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x232e34f1e90 <col:52, col:56> 'alt::MValue &(alt::Size)' lvalue CXXMethod 0x232e3424838 'operator[]' 'alt::MValue &(alt::Size)'
|       |-CXXMemberCallExpr 0x232e34f1e18 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       | `-MemberExpr 0x232e34f1d90 <col:41, col:49> '<bound member function type>' ->Get 0x232e34f19a8
|       |   `-ImplicitCastExpr 0x232e34f1e38 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |     `-CXXThisExpr 0x232e34f1d80 <col:41> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x232e34f1e78 <col:53> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x232e34f1e58 <col:53> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e3422628 'key' 'alt::Size':'unsigned long long'
|-CXXConversionDecl 0x232e3422938 <line:40:3, col:54> col:3 operator Array 'alt::MValue::List ()'
| `-CompoundStmt 0x232e34f21f8 <col:32, col:54>
|   `-ReturnStmt 0x232e34f21e8 <col:34, col:51>
|     `-CXXConstructExpr 0x232e34f21b8 <col:41, col:51> 'alt::MValue::List':'alt::Array<alt::MValue>' 'void (const alt::Array<alt::MValue> &)'
|       `-ImplicitCastExpr 0x232e34f21a0 <col:41, col:51> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue <NoOp>
|         `-CXXMemberCallExpr 0x232e34f2160 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|           `-MemberExpr 0x232e34f20d8 <col:41, col:49> '<bound member function type>' ->Get 0x232e34f19a8
|             `-ImplicitCastExpr 0x232e34f2180 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|               `-CXXThisExpr 0x232e34f20c8 <col:41> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x232e3422a88 <line:42:3, col:57> col:8 Push 'void (alt::MValue)'
| |-ParmVarDecl 0x232e34229f8 <col:13, col:20> col:20 used val 'alt::MValue'
| `-CompoundStmt 0x232e34f24d0 <col:25, col:57>
|   `-ReturnStmt 0x232e34f24c0 <col:27, col:54>
|     `-CXXMemberCallExpr 0x232e34f2480 <col:34, col:54> 'void'
|       |-MemberExpr 0x232e34f2430 <col:34, col:46> '<bound member function type>' .Push 0x232e3424538
|       | `-CXXMemberCallExpr 0x232e34f23f0 <col:34, col:44> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       |   `-MemberExpr 0x232e34f2368 <col:34, col:42> '<bound member function type>' ->Get 0x232e34f19a8
|       |     `-ImplicitCastExpr 0x232e34f2410 <col:34> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |       `-CXXThisExpr 0x232e34f2358 <col:34> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x232e34f24a8 <col:51> 'const alt::MValue' lvalue <NoOp>
|         `-DeclRefExpr 0x232e34f2460 <col:51> 'alt::MValue' lvalue ParmVar 0x232e34229f8 'val' 'alt::MValue'
|-CXXConstructorDecl 0x232e3422b58 <line:7:8> col:8 implicit used MValueList 'void (const alt::MValueList &) noexcept(false)' inline default
| |-ParmVarDecl 0x232e3422c68 <col:8> col:8 used 'const alt::MValueList &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x232e359f5f8 <col:8> 'alt::MValue' 'void (const alt::MValue &)'
| |   `-ImplicitCastExpr 0x232e359f5a8 <col:8> 'const alt::MValue' lvalue <UncheckedDerivedToBase (MValue)>
| |     `-DeclRefExpr 0x232e359f588 <col:8> 'const alt::MValueList' lvalue ParmVar 0x232e3422c68 '' 'const alt::MValueList &'
| `-CompoundStmt 0x232e359f668 <col:8>
|-CXXConstructorDecl 0x232e3422d08 <col:8> col:8 implicit MValueList 'void (alt::MValueList &&)' inline default noexcept-unevaluated 0x232e3422d08
| `-ParmVarDecl 0x232e3422e18 <col:8> col:8 'alt::MValueList &&'
|-CXXMethodDecl 0x232e3422eb8 <col:8> col:8 implicit operator= 'alt::MValueList &(alt::MValueList &&)' inline default noexcept-unevaluated 0x232e3422eb8
| `-ParmVarDecl 0x232e3422fc8 <col:8> col:8 'alt::MValueList &&'
|-CXXDestructorDecl 0x232e3423050 <col:8> col:8 implicit used ~MValueList 'void () noexcept' inline default
| `-CompoundStmt 0x232e359f250 <col:8>
`-CXXMethodDecl 0x232e359ee58 <col:8> col:8 implicit operator= 'alt::MValueList &(const alt::MValueList &)' inline default noexcept-unevaluated 0x232e359ee58
  `-ParmVarDecl 0x232e359ef68 <col:8> col:8 'const alt::MValueList &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_GetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_GetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_GetMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_SetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_SetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_SetMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_SetMetaData
RecordType 0x232e339e9c0 'class alt::MValue'
`-CXXRecord 0x232e339e930 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_SetMetaData
RecordType 0x232e339e9c0 'class alt::MValue'
`-CXXRecord 0x232e339e930 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_SetMetaData
CXXRecordDecl 0x232e339e930 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x232e339ea48 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x232e339ead8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x232e339eb18 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x232e339ebe0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ec38 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ec90 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ece8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ed40 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ed98 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339edf0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ee48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339eea0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x232e339eef8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x232e339ef60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x232e1c2b4a0 'void'
|-TypeAliasDecl 0x232e339efd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x232e1c2b4c0 'bool'
|-TypeAliasDecl 0x232e339f060 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x232e339f030 'int64_t' sugar
|   |-Typedef 0x232e22628e0 'int64_t'
|   `-BuiltinType 0x232e1c2b580 'long long'
|-TypeAliasDecl 0x232e339f0d0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x232e2f05260 'uint64_t' sugar
|   |-Typedef 0x232e2262aa0 'uint64_t'
|   `-BuiltinType 0x232e1c2b620 'unsigned long long'
|-TypeAliasDecl 0x232e339f148 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x232e1c2b660 'double'
|-TypeAliasDecl 0x232e339f240 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x232e339f1d0 'alt::String' sugar
|   `-RecordType 0x232e3156900 'alt::String'
|     `-CXXRecord 0x232e3156868 'String'
|-TypeAliasDecl 0x232e339f4d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x232e339f420 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x232e339f3e0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x232e339f3c0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x232e339f2d8 'Array'
|-TypeAliasDecl 0x232e339fe38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x232e339fd20 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x232e339fcc0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x232e339fca0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x232e339fb60 'unordered_map'
|-TypeAliasDecl 0x232e339ff80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x232e339ff30 'alt::IBaseObject *'
|   `-ElaboratedType 0x232e339feb0 'alt::IBaseObject' sugar
|     `-RecordType 0x232e339e860 'alt::IBaseObject'
|       `-CXXRecord 0x232e350c678 'IBaseObject'
|-CXXRecordDecl 0x232e339ffe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x232e33a00f8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x232e33a01a0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x232e34f08d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x232e3a22b60 <col:10>
| |-CXXConstructorDecl 0x232e34f09b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x232e34f09b0
| | `-ParmVarDecl 0x232e34f0a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x232e34f0b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x232e34f0b38
| | `-ParmVarDecl 0x232e34f0c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x232e350b9e8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x232e3a222b8 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x232e3a223c8 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x232e3a22fd0 <col:10>
| |   |-BinaryOperator 0x232e3a22f78 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x232e3a22f30 <col:10> 'void *' lvalue ->invoker 0x232e33a01a0
| |   | | `-CXXThisExpr 0x232e3a22f20 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x232e3a22f60 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x232e3a22ef0 <col:10> 'void *const' lvalue .invoker 0x232e33a01a0
| |   |     `-DeclRefExpr 0x232e3a22ed0 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x232e3a223c8 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x232e3a22fc0 <col:10>
| |     `-UnaryOperator 0x232e3a22fa8 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x232e3a22f98 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x232e3a22438 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x232e3a22438
|   `-ParmVarDecl 0x232e3a22548 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x232e33a0210 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x232e33a03d8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x232e33a0468 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x232e33a04f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x232e25be1b0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x232e33ab258 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x232e33ab248 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x232e33ab230 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x232e33ab208 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x232e33a0598 <line:45:38>
| |-CXXConstructorDecl 0x232e33a0620 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x232e33a0738 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x232e34f1530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x232e34f1510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x232e34f14f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x232e33a0738 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x232e34f15b8 <col:9>
| |-CXXConstructorDecl 0x232e33a07d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x232e33a07d8
| | `-ParmVarDecl 0x232e33a08e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x232e33a0988 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x232e33a0988
| | `-ParmVarDecl 0x232e33a0a98 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x232e33a0b08 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x232e33a0b08
| | `-ParmVarDecl 0x232e33a0c18 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x232e33a0ca0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x232e25be078 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x232e34f13c0 <col:9>
| `-CXXConstructorDecl 0x232e34f12e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x232e34f13d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x232e34f1450 <col:9>
|-AccessSpecDecl 0x232e33a0e40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x232e33a0f90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x232e33a0e70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x232e33a0f00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x232e33a1240 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x232e33a14f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x232e33a12e0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a1340 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x232e33a13b8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x232e33a1460 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x232e33a19f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x232e33a1e20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x232e33a1a98 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x232e33a1b18 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x232e33a20c8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x232e33a2168 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x232e33a1af0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x232e33a1a98 '_T'
| | |-TypeAliasTemplateDecl 0x232e33a25c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x232e33a2290 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x232e33a2560 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x232e33a24f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x232e33a28c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x232e33a2628 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a2688 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x232e33a2708 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x232e33a2788 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x232e33a2838 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x232e33a2e90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x232e33a3378 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x232e33a30d0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x232e33a2f48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x232e33a2f48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a2fa8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x232e33a3028 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x232e33a3668 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x232e33a3758 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x232e33a3838 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x232e33a37f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x232e33a2f48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x232e33a39d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x232e33a3878 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x232e33a3970 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x232e33a3c40 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x232e33a3f20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x232e33a7708 prev 0x232e33a3f20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x232e33a79b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x232e33a7798 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x232e33a77f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x232e33a7878 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x232e33a7920 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x232e33a8ba0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x232e33a82c0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x232e33a8b40 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x232e33a8af0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x232e33a8ea8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x232e33a8c08 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x232e33a8c68 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x232e33a8ce8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x232e33a8d68 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x232e33a8e18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3862658 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3863a80 prev 0x232e3862658 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3862ed8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3863930 prev 0x232e3862ed8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e38639c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3863ba0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3863b80 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3863b58 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x232e3865628 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e386ce40 prev 0x232e3865628 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3865cf8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e386cd68 prev 0x232e3865cf8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3866318 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e386cc18 prev 0x232e3866318 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e386cca8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e386cf60 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e386cf40 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e386cf18 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x232e386e708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3870470 prev 0x232e386e708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386edd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3870398 prev 0x232e386edd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386f3f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e38702c0 prev 0x232e386f3f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386f9c0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3870170 prev 0x232e386f9c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3870200 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3870590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3870570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3870548 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x232e3871d38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3874040 prev 0x232e3871d38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872408 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873f68 prev 0x232e3872408 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872a28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873e90 prev 0x232e3872a28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872ff0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873db8 prev 0x232e3872ff0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3873568 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3873c68 prev 0x232e3873568 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3873cf8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3874160 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3874140 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3874118 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x232e3875908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3878170 prev 0x232e3875908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3875fd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3878098 prev 0x232e3875fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e38765f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877fc0 prev 0x232e38765f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3876bc0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877ee8 prev 0x232e3876bc0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3877138 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877e10 prev 0x232e3877138 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3877650 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3877cc0 prev 0x232e3877650 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3877d50 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3878290 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3878270 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3878248 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x232e3879b28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f928 prev 0x232e3879b28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387a1f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f850 prev 0x232e387a1f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387a818 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f778 prev 0x232e387a818 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387ade0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f6a0 prev 0x232e387ade0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387b358 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f5c8 prev 0x232e387b358 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387b870 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e387c458 prev 0x232e387b870 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387bd38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e387c308 prev 0x232e387bd38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e387c398 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e388fa48 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e388fa28 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e388fa00 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x232e3893058 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3896270 prev 0x232e3893058 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3893728 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3896198 prev 0x232e3893728 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3893d48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e38960c0 prev 0x232e3893d48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894310 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895fe8 prev 0x232e3894310 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894888 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895f10 prev 0x232e3894888 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894da0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895e38 prev 0x232e3894da0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3895268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895d60 prev 0x232e3895268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e38956d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3895c10 prev 0x232e38956d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3895ca0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3896390 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3896370 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3896348 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x232e3a17d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b3d0 prev 0x232e3a17d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a18438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b2f8 prev 0x232e3a18438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a18a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b220 prev 0x232e3a18a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b148 prev 0x232e3a19020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19598 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b070 prev 0x232e3a19598 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19ab0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1af98 prev 0x232e3a19ab0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1aec0 prev 0x232e3a19f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1a3e0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1ade8 prev 0x232e3a1a3e0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1a7f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3a1ac98 prev 0x232e3a1a7f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3a1ad28 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3a1b4f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3a1b4d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3a1b4a8 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x232e3a1cc98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21720 prev 0x232e3a1cc98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1d368 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21648 prev 0x232e3a1d368 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1d988 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21570 prev 0x232e3a1d988 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1df50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21498 prev 0x232e3a1df50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1e4c8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a213c0 prev 0x232e3a1e4c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1fa00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a212e8 prev 0x232e3a1fa00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1fec8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21210 prev 0x232e3a1fec8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a20330 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21138 prev 0x232e3a20330 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a20748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21060 prev 0x232e3a20748 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x232e3a20b00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x232e3a20f10 prev 0x232e3a20b00 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x232e3a20fa0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x232e3a21840 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x232e3a21820 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x232e3a217f8 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x232e33a99d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x232e33a98d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x232e33a9970 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x232e33a4348 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x232e33a4020 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x232e33a4000 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x232e33a3f20 '_TypeTag'
|-CXXRecordDecl 0x232e33a43a8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x232e33a44c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x232e33a4568 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x232e33ab1f0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x232e33ab1c8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x232e33a4630 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x232e33ab9d8 <col:72>
| |-CXXMethodDecl 0x232e33a4768 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x232e33a4768
| | `-ParmVarDecl 0x232e33a4878 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x232e3864130 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x232e3864130
| | `-ParmVarDecl 0x232e3864248 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x232e3864c30 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x232e33a4568 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x232e3864d20 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x232e3864d70 <col:10>
|-ClassTemplateDecl 0x232e33a4ad0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x232e33a49b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x232e33a4a40 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x232e33a4d60 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x232e33a4e00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x232e3863dc0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x232e3863fc8 prev 0x232e3863dc0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3864098 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x232e38642d0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x232e38642d0
| | | `-ParmVarDecl 0x232e38643e8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x232e3864488 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x232e3864488
| | | `-ParmVarDecl 0x232e3864598 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x232e3864638 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x232e3864638
| | | `-ParmVarDecl 0x232e3864748 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x232e38647b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x232e38647b8
| | | `-ParmVarDecl 0x232e38648c8 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x232e3864950 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3864d10 <col:10>
| | `-CXXConstructorDecl 0x232e3864b58 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3864d80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e3864de8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e386d180 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x232e386d388 prev 0x232e386d180 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e386d458 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x232e386d4f0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x232e386d4f0
| | | `-ParmVarDecl 0x232e386d608 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x232e386d6a8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x232e386d6a8
| | | `-ParmVarDecl 0x232e386d7b8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x232e386d858 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x232e386d858
| | | `-ParmVarDecl 0x232e386d968 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x232e386d9d8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x232e386d9d8
| | | `-ParmVarDecl 0x232e386dae8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x232e386db70 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e386de50 <col:10>
| | `-CXXConstructorDecl 0x232e386dd78 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e386de60 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e386dec8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38707b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x232e38709b8 prev 0x232e38707b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3870a88 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x232e3870b20 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x232e3870b20
| | | `-ParmVarDecl 0x232e3870c38 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x232e3870cd8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x232e3870cd8
| | | `-ParmVarDecl 0x232e3870de8 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x232e3870e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x232e3870e88
| | | `-ParmVarDecl 0x232e3870f98 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x232e3871008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x232e3871008
| | | `-ParmVarDecl 0x232e3871118 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x232e38711a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3871480 <col:10>
| | `-CXXConstructorDecl 0x232e38713a8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3871490 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e38714f8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e3874380 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x232e3874588 prev 0x232e3874380 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3874658 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x232e38746f0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x232e38746f0
| | | `-ParmVarDecl 0x232e3874808 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x232e38748a8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x232e38748a8
| | | `-ParmVarDecl 0x232e38749b8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x232e3874a58 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x232e3874a58
| | | `-ParmVarDecl 0x232e3874b68 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x232e3874bd8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x232e3874bd8
| | | `-ParmVarDecl 0x232e3874ce8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x232e3874d70 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3875050 <col:10>
| | `-CXXConstructorDecl 0x232e3874f78 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3875060 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e38750c8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38784b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x232e38786b8 prev 0x232e38784b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3878788 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x232e3878820 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x232e3878820
| | | `-ParmVarDecl 0x232e3878938 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x232e38789d8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x232e38789d8
| | | `-ParmVarDecl 0x232e3878ae8 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x232e3878b88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x232e3878b88
| | | `-ParmVarDecl 0x232e3878c98 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x232e3878d08 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x232e3878d08
| | | `-ParmVarDecl 0x232e3878e18 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x232e3878ea0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e38791c0 <col:10>
| | `-CXXConstructorDecl 0x232e38790a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e38791d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e3878788 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x232e3879230 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x232e3879290 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e388fc68 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x232e388fe78 prev 0x232e388fc68 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e388ff48 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x232e388ffe0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x232e388ffe0
| | | `-ParmVarDecl 0x232e38900f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x232e3890198 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x232e3890198
| | | `-ParmVarDecl 0x232e38902a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x232e3890348 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x232e3890348
| | | `-ParmVarDecl 0x232e3890458 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x232e38904c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x232e38904c8
| | | `-ParmVarDecl 0x232e38905d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x232e3890660 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3890a10 <col:10>
| | `-CXXConstructorDecl 0x232e3890938 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3890a20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e388ff48 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x232e3890a80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x232e3890ae0 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38965b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x232e38967b8 prev 0x232e38965b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3896888 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x232e3896920 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x232e3896920
| | | `-ParmVarDecl 0x232e3896a38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x232e3896ad8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x232e3896ad8
| | | `-ParmVarDecl 0x232e3896be8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x232e3896c88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x232e3896c88
| | | `-ParmVarDecl 0x232e3896d98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x232e3896e08 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x232e3896e08
| | | `-ParmVarDecl 0x232e3896f18 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x232e3896fa0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3897da0 <col:10>
| | `-CXXConstructorDecl 0x232e3897c88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3897db0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e3896888 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x232e3897e10 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x232e3897e70 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e3a1b710 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x232e3a1b918 prev 0x232e3a1b710 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3a1b9e8 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x232e3a1ba80 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x232e3a1ba80
| | | `-ParmVarDecl 0x232e3a1bb98 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x232e3a1bc38 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x232e3a1bc38
| | | `-ParmVarDecl 0x232e3a1bd48 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x232e3a1bde8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x232e3a1bde8
| | | `-ParmVarDecl 0x232e3a1bef8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x232e3a1bf68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x232e3a1bf68
| | | `-ParmVarDecl 0x232e3a1c078 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x232e3a1c100 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3a1c3e0 <col:10>
| | `-CXXConstructorDecl 0x232e3a1c308 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3a1c3f0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e3a1c458 <col:10>
| `-ClassTemplateSpecializationDecl 0x232e3a21a60 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x232e3a21c68 prev 0x232e3a21a60 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x232e3a21d38 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x232e3a21dd0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x232e3a21dd0
|   | `-ParmVarDecl 0x232e3a21ee8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x232e3a21f88 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x232e3a21f88
|   | `-ParmVarDecl 0x232e3a22098 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x232e3a22138 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x232e3a22138
|   | `-ParmVarDecl 0x232e3a22248 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x232e3a225b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x232e3a225b8
|   | `-ParmVarDecl 0x232e3a226c8 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x232e3a22750 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x232e3a22af0 <col:10>
|   `-CXXConstructorDecl 0x232e3a22a18 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x232e3a22b00 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x232e3a21d38 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x232e3a22b70 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x232e3a22bd0 <col:10>
|-FunctionTemplateDecl 0x232e33a50c8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x232e33a4e70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x232e33a5028 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x232e33a4f38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x232e3862150 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3861d88 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x232e3861d00 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x232e33a99d8
| |   |-DeclStmt 0x232e3861f60 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3861db8 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x232e3861f28 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x232e3862008 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x232e3861f98 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x232e3861f78 <col:4> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |   | `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e38620b0 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x232e3862048 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x232e3862028 <col:4> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |   | `-DeclRefExpr 0x232e3862090 <col:22> 'const T' lvalue ParmVar 0x232e33a4f38 'val' 'const T &'
| |   `-BinaryOperator 0x232e3862130 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x232e3862110 <col:14> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |-CXXMethodDecl 0x232e33abd28 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x232e33abc68 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x232e3865120 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3863d28 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3863d10 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3863ca0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3862198 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3864f10 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3863d48 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x232e3864e20 <col:20> 'Storage<bool> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3864df8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x232e3864fc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3864f80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3864f60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3864f48 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3864f28 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x232e3864fb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3865088 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x232e3865020 <col:4, col:14> 'bool':'bool' lvalue ->value 0x232e3864098
| |   | | `-ImplicitCastExpr 0x232e3865008 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3864fe8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x232e3865070 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3865050 <col:22> 'const bool':'const bool' lvalue ParmVar 0x232e33abc68 'val' 'const bool &'
| |   `-BinaryOperator 0x232e3865100 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38650e0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38650c8 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38650a8 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x232e341b2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x232e341b1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x232e386e200 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e386d0e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e386d0d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e386d060 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3865168 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e386dff0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e386d108 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x232e386df00 <col:20> 'Storage<long long> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e386ded8 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x232e386e0a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e386e060 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e386e040 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e386e028 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e386e008 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x232e386e090 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e386e168 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x232e386e100 <col:4, col:14> 'long long':'long long' lvalue ->value 0x232e386d458
| |   | | `-ImplicitCastExpr 0x232e386e0e8 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e386e0c8 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x232e386e150 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e386e130 <col:22> 'const long long':'const long long' lvalue ParmVar 0x232e341b1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x232e386e1e0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e386e1c0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e386e1a8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e386e188 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x232e341b648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x232e341b588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x232e3871830 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3870718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3870700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3870690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e386e248 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3871620 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3870738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x232e3871530 <col:20> 'Storage<unsigned long long> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3871508 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x232e38716d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3871690 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3871670 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3871658 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3871638 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x232e38716c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3871798 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3871730 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x232e3870a88
| |   | | `-ImplicitCastExpr 0x232e3871718 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e38716f8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x232e3871780 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3871760 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x232e341b588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x232e3871810 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38717f0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38717d8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38717b8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x232e341b9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x232e341b918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x232e3875400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e38742e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e38742d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3874260 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3871878 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e38751f0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3874308 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x232e3875100 <col:20> 'Storage<double> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e38750d8 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x232e38752a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3875260 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3875240 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3875228 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3875208 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x232e3875290 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3875368 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x232e3875300 <col:4, col:14> 'double':'double' lvalue ->value 0x232e3874658
| |   | | `-ImplicitCastExpr 0x232e38752e8 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e38752c8 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x232e3875350 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3875330 <col:22> 'const double':'const double' lvalue ParmVar 0x232e341b918 'val' 'const double &'
| |   `-BinaryOperator 0x232e38753e0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38753c0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38753a8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3875388 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x232e341bd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x232e341bc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x232e3879620 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3878418 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3878400 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3878390 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3875448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e38793b0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3878438 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x232e38792c8 <col:20> 'Storage<alt::String> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e38792a0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x232e3879468 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3879420 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3879400 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e38793e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e38793c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x232e3879450 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3879570 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x232e3879558 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e3879510 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x232e3158298 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x232e38794c0 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x232e3878788
| |   | | `-ImplicitCastExpr 0x232e38794a8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3879488 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x232e38794f0 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x232e341bc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x232e3879600 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38795e0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38795c8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38795a8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x232e341c0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x232e341c018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x232e3890e70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e388fbd0 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e388fbb8 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e388fb48 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3879668 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3890c00 <line:85:4, col:34>
| |   | `-VarDecl 0x232e388fbf0 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x232e3890b18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3890af0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x232e3890cb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3890c70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3890c50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3890c38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3890c18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x232e3890ca0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3890dc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x232e3890da8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e3890d60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x232e3424218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x232e3890d10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x232e388ff48
| |   | | `-ImplicitCastExpr 0x232e3890cf8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3890cd8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x232e3890d40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e341c018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x232e3890e50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e3890e30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3890e18 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3890df8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x232e341c458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x232e341c398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x232e38991f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3896518 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3896500 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3896490 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3892b98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3897f90 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3896538 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x232e3897ea8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3897e80 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x232e3898048 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3898000 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3897fe0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3897fc8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3897fa8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x232e3898030 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3899140 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x232e3899128 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e38990d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x232e34e9498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x232e38980a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x232e3896888
| |   | | `-ImplicitCastExpr 0x232e3898088 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3898068 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x232e38980d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e341c398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x232e38991d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38991b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3899198 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3899178 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x232e341c7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x232e341c718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x232e3a1c790 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3a1b678 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3a1b660 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3a1b5f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a178a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3a1c580 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3a1b698 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x232e3a1c490 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3a1c468 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x232e3a1c638 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3a1c5f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3a1c5d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3a1c5b8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3a1c598 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x232e3a1c620 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3a1c6f8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x232e3a1c690 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x232e3a1b9e8
| |   | | `-ImplicitCastExpr 0x232e3a1c678 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3a1c658 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x232e3a1c6e0 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3a1c6c0 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x232e341c718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x232e3a1c770 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e3a1c750 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3a1c738 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a1c718 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x232e341cb58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x232e341ca98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x232e3a230e0 <line:83:3, line:91:3>
|     |-BinaryOperator 0x232e3a219c8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|     | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x232e3a219b0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x232e3a21940 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a1c7d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x232e3a22cf0 <line:85:4, col:34>
|     | `-VarDecl 0x232e3a219e8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x232e3a22c08 <col:20> 'Storage<alt::MValue::Function> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x232e3a22be0 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x232e3a22da8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x232e3a22d60 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|     | | `-ImplicitCastExpr 0x232e3a22d40 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x232e3a22d28 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x232e3a22d08 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x232e3a22d90 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x232e3a23030 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x232e3a23018 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x232e3a22eb0 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x232e3a222b8 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x232e3a22e00 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x232e3a21d38
|     | | `-ImplicitCastExpr 0x232e3a22de8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x232e3a22dc8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x232e3a22e30 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x232e341ca98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x232e3a230c0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|       | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x232e3a230a0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x232e3a23088 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x232e3a23068 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x232e33a5148 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x232e33ab430 <line:94:3, line:97:3>
|   |-BinaryOperator 0x232e33ab388 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x232e33ab280 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | | `-CXXThisExpr 0x232e33ab270 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x232e33ab300 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x232e339ebe0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x232e33ab410 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x232e33ab3b8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     | `-CXXThisExpr 0x232e33ab3a8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x232e33ab3f8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x232e33ab3e8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x232e33a52e8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e33a5228 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e33ab708 <line:100:3, line:106:3>
|   |-BinaryOperator 0x232e33ab4f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x232e33ab460 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | | `-CXXThisExpr 0x232e33ab450 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x232e33ab4e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x232e33ab4b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x232e33a5460
|   |     `-DeclRefExpr 0x232e33ab490 <col:11> 'const alt::MValue' lvalue ParmVar 0x232e33a5228 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x232e33ab5c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x232e33ab528 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   | | `-CXXThisExpr 0x232e33ab518 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x232e33ab5a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x232e33ab578 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x232e33a54c8
|   |     `-DeclRefExpr 0x232e33ab558 <col:14> 'const alt::MValue' lvalue ParmVar 0x232e33a5228 'that' 'const alt::MValue &'
|   `-IfStmt 0x232e33ab6f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x232e33ab638 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x232e33ab620 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x232e33ab5f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     |     `-CXXThisExpr 0x232e33ab5e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x232e33ab6d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x232e33ab6a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|         `-ImplicitCastExpr 0x232e33ab690 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x232e33ab660 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|             `-CXXThisExpr 0x232e33ab650 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x232e33a53b0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x232e33aba20 <line:109:3, line:117:3>
|   |-IfStmt 0x232e33ab7c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x232e33ab7a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x232e33ab788 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x232e33ab770 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x232e33ab740 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   | |       `-CXXThisExpr 0x232e33ab730 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x232e33ab7b8 <line:111:5>
|   |-UnaryOperator 0x232e33ab868 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x232e33ab838 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|   |   `-ImplicitCastExpr 0x232e33ab820 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x232e33ab7f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   |       `-CXXThisExpr 0x232e33ab7e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x232e33aba08 <line:115:4, line:116:12>
|     |-BinaryOperator 0x232e33ab960 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x232e33ab930 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x232e33ab8d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|     | |   `-ImplicitCastExpr 0x232e33ab8c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x232e33ab890 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     | |       `-CXXThisExpr 0x232e33ab880 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x232e33ab948 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x232e33ab908 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x232e33ab9e8 <line:116:5, col:12> 'void' Function 0x232e1e65d28 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x232e33ab9c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x232e33ab990 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|           `-CXXThisExpr 0x232e33ab980 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x232e33a5460 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x232e33a54c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x232e33a5520 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e33a5588 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x232e33abaa8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x232e33aba88 <col:14, col:24> 'void'
|     `-MemberExpr 0x232e33aba58 <col:14> '<bound member function type>' ->CreateNil 0x232e33a5148
|       `-CXXThisExpr 0x232e33aba48 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x232e33a5728 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x232e33a5668 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x232e341b0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341b088 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341b040 <col:29> '<bound member function type>' ->Create 0x232e33abd28
|     | `-CXXThisExpr 0x232e33abe28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e33abb28 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x232e33a5668 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x232e33a5938 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x232e33a5848 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x232e341b438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x232e341b410 <col:28, col:38> 'void'
|     |-MemberExpr 0x232e341b3c8 <col:28> '<bound member function type>' ->Create 0x232e341b2b8
|     | `-CXXThisExpr 0x232e341b3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x232e33a5848 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x232e33a5b18 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x232e33a5a28 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x232e341b7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341b7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341b758 <col:29> '<bound member function type>' ->Create 0x232e341b648
|     | `-CXXThisExpr 0x232e341b748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x232e33a5a28 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x232e33a5cf8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x232e33a5c08 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x232e341bb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341bb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341bae8 <col:31> '<bound member function type>' ->Create 0x232e341b9d8
|     | `-CXXThisExpr 0x232e341bad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x232e33a5c08 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x232e33a5ea8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x232e33a5de8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x232e341bed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341beb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341be68 <col:31> '<bound member function type>' ->Create 0x232e341bd58
|     | `-CXXThisExpr 0x232e341be58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341bbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x232e33a5de8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x232e33a60b8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x232e33a5fc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x232e341c258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341c230 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341c1e8 <col:29> '<bound member function type>' ->Create 0x232e341c0d8
|     | `-CXXThisExpr 0x232e341c1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341bf58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e33a5fc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x232e33a62c8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x232e33a61d8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x232e341c5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341c5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341c568 <col:29> '<bound member function type>' ->Create 0x232e341c458
|     | `-CXXThisExpr 0x232e341c558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e33a61d8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x232e33a64d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x232e33a63e8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x232e341c958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341c930 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341c8e8 <col:31> '<bound member function type>' ->Create 0x232e341c7d8
|     | `-CXXThisExpr 0x232e341c8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x232e33a63e8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x232e33a6688 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x232e33a65c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x232e341ccd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x232e341ccb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x232e341cc68 <col:33> '<bound member function type>' ->Create 0x232e341cb58
|     | `-CXXThisExpr 0x232e341cc58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x232e33a65c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x232e33a6838 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x232e33a6770 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x232e341cfb0 <col:23, col:43>
|   `-ExprWithCleanups 0x232e341cf98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x232e341cf28 <col:25, col:40> 'void'
|       |-MemberExpr 0x232e341cea0 <col:25, col:35> '<bound member function type>' ->Create 0x232e341b2b8
|       | `-CXXThisExpr 0x232e341ce90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341cf80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x232e341cf68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x232e341cf50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x232e341cda8 <col:37> 'int32_t':'int' lvalue ParmVar 0x232e33a6770 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x232e33a69b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x232e33a68f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x232e341d288 <col:24, col:45>
|   `-ExprWithCleanups 0x232e341d270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x232e341d200 <col:26, col:42> 'void'
|       |-MemberExpr 0x232e341d178 <col:26, col:37> '<bound member function type>' ->Create 0x232e341b648
|       | `-CXXThisExpr 0x232e341d168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x232e341d240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x232e341d228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x232e341d080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x232e33a68f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x232e33a6b10 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x232e33a6a80 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x232e341d600 <col:27, col:50>
|   `-ExprWithCleanups 0x232e341d5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x232e341d508 <col:29, col:47> 'void'
|       |-MemberExpr 0x232e341d480 <col:29, col:42> '<bound member function type>' ->Create 0x232e341bd58
|       | `-CXXThisExpr 0x232e341d470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x232e341d5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x232e341d5a8)
|           `-CXXConstructExpr 0x232e341d578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x232e341d560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x232e341d358 <col:44> 'const char *' lvalue ParmVar 0x232e33a6a80 'val' 'const char *'
|-CXXConstructorDecl 0x232e33a6d38 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x232e33a6c70 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x232e341d990 <col:34, col:57>
|   `-ExprWithCleanups 0x232e341d978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x232e341d880 <col:36, col:54> 'void'
|       |-MemberExpr 0x232e341d7f8 <col:36, col:49> '<bound member function type>' ->Create 0x232e341bd58
|       | `-CXXThisExpr 0x232e341d7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x232e341d948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x232e341d928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x232e341d920)
|             `-ImplicitCastExpr 0x232e341d908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x232e341d8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x232e341d6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e33a6c70 'val' 'const std::string &'
|-CXXConstructorDecl 0x232e33a6e88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e33a6df8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e341da30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x232e341da08 <col:32, col:41> 'void'
|     |-MemberExpr 0x232e341d9b8 <col:32> '<bound member function type>' ->Copy 0x232e33a52e8
|     | `-CXXThisExpr 0x232e341d9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341d9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x232e33a6df8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x232e33a7038 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x232e33a6f48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e341db68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x232e341da88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x232e341da58 <col:4> '<bound member function type>' ->Destroy 0x232e33a53b0
|   |   `-CXXThisExpr 0x232e341da48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x232e341db08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x232e341dab8 <col:4> '<bound member function type>' ->Copy 0x232e33a52e8
|   | | `-CXXThisExpr 0x232e341daa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x232e341dae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x232e33a6f48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x232e341db58 <line:146:4, col:12>
|     `-UnaryOperator 0x232e341db40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e341db30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x232e33a7128 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x232e341dc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x232e341dc50 <line:151:4, col:22>
|     `-BinaryOperator 0x232e341dc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x232e341dbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x232e341dba0 <col:11> '<bound member function type>' ->ToInt 0x232e33a7218
|       |   `-CXXThisExpr 0x232e341db90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x232e341dc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x232e341dbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x232e33a7218 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x232e341f0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x232e341dcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x232e341dcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341dc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341dc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e341f048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x232e341dd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x232e341dd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341dd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341e218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341e200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341e1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341e1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x232e341e140 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |           `-CXXThisExpr 0x232e341e130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341e2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x232e341e290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e341e260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341e6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x232e341e6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x232e341e688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x232e341e600 <col:12, col:19> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |         `-CXXThisExpr 0x232e341e5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341e758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x232e341e738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e341e708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341eb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341eb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341eb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341eb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x232e341eaa0 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e998
|   |   |           `-CXXThisExpr 0x232e341ea90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e341ec10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x232e341ebf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x232e341ebc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e341f038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x232e341f020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x232e341f008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x232e341efe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x232e341ef60 <col:12, col:22> '<bound member function type>' ->Get 0x232e341ee58
|   |               `-CXXThisExpr 0x232e341ef50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e341f0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x232e341f0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x232e341f078 <col:11> 'int' 0
|-CXXMethodDecl 0x232e33a7308 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x232e341fd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x232e341f140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x232e341f128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341f0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341f0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e341fd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x232e341f1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x232e341f1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341f198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341f440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341f428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341f410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341f3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x232e341f368 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |           `-CXXThisExpr 0x232e341f358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341f4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x232e341f4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e341f488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341f730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x232e341f718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341f700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341f6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x232e341f658 <col:12, col:19> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |           `-CXXThisExpr 0x232e341f648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341f7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x232e341f7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e341f778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341fa08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341f9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x232e341f9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x232e341f948 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e998
|   |   |         `-CXXThisExpr 0x232e341f938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e341faa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x232e341fa80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x232e341fa50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e341fcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x232e341fce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x232e341fcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x232e341fca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x232e341fc20 <col:12, col:22> '<bound member function type>' ->Get 0x232e341ee58
|   |               `-CXXThisExpr 0x232e341fc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e341fd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x232e341fd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x232e341fd38 <col:11> 'int' 0
|-CXXMethodDecl 0x232e33a7428 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x232e3421b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x232e341fe00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x232e341fde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341fdb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341fda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e3421650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x232e341fea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x232e341fe88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341fe58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x232e34201e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x232e34201b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x232e3420158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x232e3420110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x232e34200b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x232e3420028 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |         |     `-CXXThisExpr 0x232e3420018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x232e3420128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x232e34200d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x232e3420140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x232e34200f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x232e3420298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x232e3420278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e3420248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x232e34206f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e34206d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e34206a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e3420690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e3420678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3420628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3420620)
|   |   |               `-CallExpr 0x232e34205e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e34205c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x232e30995f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x232e3420608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x232e34204c0 <col:27, col:34> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |                       `-CXXThisExpr 0x232e34204b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e34207a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x232e3420780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e3420750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x232e3420bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e3420bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e3420ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e3420b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e3420b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3420b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3420b20)
|   |   |               `-CallExpr 0x232e3420ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e3420ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x232e309a088 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x232e3420b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x232e34209c8 <col:27, col:35> '<bound member function type>' ->Get 0x232e341e998
|   |   |                       `-CXXThisExpr 0x232e34209b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e3420ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x232e3420c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x232e3420c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3421138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x232e3421120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e3421108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e34210d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e34210c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e34210a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3421058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3421050)
|   |   |               `-CallExpr 0x232e3421010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e3420ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x232e309b298 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x232e3421038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x232e3420ec8 <col:27, col:37> '<bound member function type>' ->Get 0x232e341ee58
|   |   |                       `-CXXThisExpr 0x232e3420eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e34211d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x232e34211b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x232e3421180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed98 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e3421640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x232e3421610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x232e34215f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x232e34215a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x232e3421520 <col:12, col:22> '<bound member function type>' ->Get 0x232e3421418
|   |               `-CXXThisExpr 0x232e3421510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e3421b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x232e3421b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x232e3421b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x232e3421af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x232e3421688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x232e33a7548 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x232e3421be8 <col:24, col:39>
|   `-ReturnStmt 0x232e3421bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e3421bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x232e3421b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x232e33a5460
|         `-CXXThisExpr 0x232e3421b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x232e33aae10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x232e33a75f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x232e33aa410 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x232e33aad70 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x232e33ab018 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x232e33aae68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x232e33aaf78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x232e3a23570 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a232f8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23240 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x232e3a23178 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x232e33a99d8
| |   | | `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |   `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a232e0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a232c8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a232a8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a232a0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a234e0 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23320 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a234b0 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |       `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a23560 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x232e3a23518 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x232e3a234f8 <col:11> 'auto' lvalue Var 0x232e3a23320 '_storage' 'auto'
| |-CXXMethodDecl 0x232e341e038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x232e3a239c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23730 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a236b8 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23688 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23618 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3862198 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a236a0 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23718 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23700 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a236e0 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a236d8)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a23938 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23748 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a23878 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a23860 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a239b8 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a23988 <col:11, col:21> 'bool':'bool' lvalue ->value 0x232e3864098
| |       `-ImplicitCastExpr 0x232e3a23970 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a23950 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3a23748 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x232e341e4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x232e3a23e28 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23b88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23b10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23ae0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23a70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3865168 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a23af8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23b70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23b58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a23b38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a23b30)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a23d98 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23ba0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a23cd8 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a23cc0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a23e18 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a23de8 <col:11, col:21> 'long long':'long long' lvalue ->value 0x232e386d458
| |       `-ImplicitCastExpr 0x232e3a23dd0 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a23db0 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e3a23ba0 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x232e341e998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x232e3a24288 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23fe8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23f70 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23f40 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23ed0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e386e248 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a23f58 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23fd0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23fb8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a23f98 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a23f90)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a241f8 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a24000 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a24138 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a24120 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a24278 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a24248 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x232e3870a88
| |       `-ImplicitCastExpr 0x232e3a24230 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24210 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3a24000 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x232e341ee58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x232e3a246e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a24448 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a243d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a243a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a24330 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3871878 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a243b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a24430 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a24418 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a243f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a243f0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a24658 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a24460 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a24598 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a24580 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a246d8 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a246a8 <col:11, col:21> 'double':'double' lvalue ->value 0x232e3874658
| |       `-ImplicitCastExpr 0x232e3a24690 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24670 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3a24460 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x232e3421418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x232e3a24b48 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a248a8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a24830 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a24800 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a24790 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3875448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a24818 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a24890 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a24878 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a24858 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a24850)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a24ab8 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a248c0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a249f8 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a249e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a24b38 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a24b08 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x232e3878788
| |       `-ImplicitCastExpr 0x232e3a24af0 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24ad0 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3a248c0 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x232e34f19a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x232e3a25998 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a256f8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a25680 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a25650 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a255e0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3879668 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a25668 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a256e0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a256c8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a256a8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a256a0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a25908 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a25710 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a25848 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a25830 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a25988 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a25958 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x232e388ff48
| |       `-ImplicitCastExpr 0x232e3a25940 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a25920 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e3a25710 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x232e34f3d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x232e3a3dd28 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a3da88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a3da10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a3d9e0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a3d970 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3892b98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a3d9f8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a3da70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a3da58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a3da38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a3da30)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a3dc98 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a3daa0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a3dbd8 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a3dbc0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a3dd18 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a3dce8 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x232e3896888
| |       `-ImplicitCastExpr 0x232e3a3dcd0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a3dcb0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3a3daa0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x232e350c2e8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x232e3abbaf8 <line:217:3, line:223:3>
|     |-IfStmt 0x232e3abb858 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x232e3abb7e0 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x232e3abb7b0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x232e3abb740 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a1c7d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x232e3abb7c8 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|     | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x232e3abb840 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x232e3abb828 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x232e3abb808 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3abb800)
|     |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x232e3abba68 <line:221:4, col:53>
|     | `-VarDecl 0x232e3abb870 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x232e3abb9a8 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x232e3abb990 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x232e3abbae8 <line:222:4, col:21>
|       `-MemberExpr 0x232e3abbab8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x232e3a21d38
|         `-ImplicitCastExpr 0x232e3abbaa0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x232e3abba80 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3abb870 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x232e33ab0b8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x232e3421c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x232e3421c40 <col:15, col:23> 'void'
      `-MemberExpr 0x232e3421c10 <col:15> '<bound member function type>' ->Destroy 0x232e33a53b0
        `-CXXThisExpr 0x232e3421c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_GetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_GetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_GetMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_SetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_SetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_SetMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_SetMetaData
RecordType 0x232e339e9c0 'class alt::MValue'
`-CXXRecord 0x232e339e930 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_SetMetaData
RecordType 0x232e339e9c0 'class alt::MValue'
`-CXXRecord 0x232e339e930 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_SetMetaData
CXXRecordDecl 0x232e339e930 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x232e339ea48 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x232e339ead8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x232e339eb18 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x232e339ebe0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ec38 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ec90 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ece8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ed40 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ed98 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339edf0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ee48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339eea0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x232e339eef8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x232e339ef60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x232e1c2b4a0 'void'
|-TypeAliasDecl 0x232e339efd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x232e1c2b4c0 'bool'
|-TypeAliasDecl 0x232e339f060 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x232e339f030 'int64_t' sugar
|   |-Typedef 0x232e22628e0 'int64_t'
|   `-BuiltinType 0x232e1c2b580 'long long'
|-TypeAliasDecl 0x232e339f0d0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x232e2f05260 'uint64_t' sugar
|   |-Typedef 0x232e2262aa0 'uint64_t'
|   `-BuiltinType 0x232e1c2b620 'unsigned long long'
|-TypeAliasDecl 0x232e339f148 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x232e1c2b660 'double'
|-TypeAliasDecl 0x232e339f240 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x232e339f1d0 'alt::String' sugar
|   `-RecordType 0x232e3156900 'alt::String'
|     `-CXXRecord 0x232e3156868 'String'
|-TypeAliasDecl 0x232e339f4d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x232e339f420 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x232e339f3e0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x232e339f3c0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x232e339f2d8 'Array'
|-TypeAliasDecl 0x232e339fe38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x232e339fd20 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x232e339fcc0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x232e339fca0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x232e339fb60 'unordered_map'
|-TypeAliasDecl 0x232e339ff80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x232e339ff30 'alt::IBaseObject *'
|   `-ElaboratedType 0x232e339feb0 'alt::IBaseObject' sugar
|     `-RecordType 0x232e339e860 'alt::IBaseObject'
|       `-CXXRecord 0x232e350c678 'IBaseObject'
|-CXXRecordDecl 0x232e339ffe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x232e33a00f8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x232e33a01a0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x232e34f08d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x232e3a22b60 <col:10>
| |-CXXConstructorDecl 0x232e34f09b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x232e34f09b0
| | `-ParmVarDecl 0x232e34f0a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x232e34f0b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x232e34f0b38
| | `-ParmVarDecl 0x232e34f0c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x232e350b9e8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x232e3a222b8 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x232e3a223c8 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x232e3a22fd0 <col:10>
| |   |-BinaryOperator 0x232e3a22f78 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x232e3a22f30 <col:10> 'void *' lvalue ->invoker 0x232e33a01a0
| |   | | `-CXXThisExpr 0x232e3a22f20 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x232e3a22f60 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x232e3a22ef0 <col:10> 'void *const' lvalue .invoker 0x232e33a01a0
| |   |     `-DeclRefExpr 0x232e3a22ed0 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x232e3a223c8 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x232e3a22fc0 <col:10>
| |     `-UnaryOperator 0x232e3a22fa8 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x232e3a22f98 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x232e3a22438 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x232e3a22438
|   `-ParmVarDecl 0x232e3a22548 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x232e33a0210 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x232e33a03d8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x232e33a0468 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x232e33a04f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x232e25be1b0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x232e33ab258 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x232e33ab248 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x232e33ab230 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x232e33ab208 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x232e33a0598 <line:45:38>
| |-CXXConstructorDecl 0x232e33a0620 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x232e33a0738 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x232e34f1530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x232e34f1510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x232e34f14f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x232e33a0738 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x232e34f15b8 <col:9>
| |-CXXConstructorDecl 0x232e33a07d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x232e33a07d8
| | `-ParmVarDecl 0x232e33a08e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x232e33a0988 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x232e33a0988
| | `-ParmVarDecl 0x232e33a0a98 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x232e33a0b08 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x232e33a0b08
| | `-ParmVarDecl 0x232e33a0c18 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x232e33a0ca0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x232e25be078 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x232e34f13c0 <col:9>
| `-CXXConstructorDecl 0x232e34f12e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x232e34f13d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x232e34f1450 <col:9>
|-AccessSpecDecl 0x232e33a0e40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x232e33a0f90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x232e33a0e70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x232e33a0f00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x232e33a1240 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x232e33a14f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x232e33a12e0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a1340 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x232e33a13b8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x232e33a1460 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x232e33a19f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x232e33a1e20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x232e33a1a98 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x232e33a1b18 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x232e33a20c8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x232e33a2168 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x232e33a1af0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x232e33a1a98 '_T'
| | |-TypeAliasTemplateDecl 0x232e33a25c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x232e33a2290 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x232e33a2560 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x232e33a24f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x232e33a28c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x232e33a2628 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a2688 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x232e33a2708 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x232e33a2788 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x232e33a2838 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x232e33a2e90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x232e33a3378 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x232e33a30d0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x232e33a2f48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x232e33a2f48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a2fa8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x232e33a3028 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x232e33a3668 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x232e33a3758 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x232e33a3838 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x232e33a37f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x232e33a2f48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x232e33a39d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x232e33a3878 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x232e33a3970 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x232e33a3c40 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x232e33a3f20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x232e33a7708 prev 0x232e33a3f20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x232e33a79b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x232e33a7798 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x232e33a77f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x232e33a7878 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x232e33a7920 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x232e33a8ba0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x232e33a82c0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x232e33a8b40 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x232e33a8af0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x232e33a8ea8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x232e33a8c08 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x232e33a8c68 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x232e33a8ce8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x232e33a8d68 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x232e33a8e18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3862658 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3863a80 prev 0x232e3862658 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3862ed8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3863930 prev 0x232e3862ed8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e38639c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3863ba0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3863b80 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3863b58 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x232e3865628 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e386ce40 prev 0x232e3865628 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3865cf8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e386cd68 prev 0x232e3865cf8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3866318 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e386cc18 prev 0x232e3866318 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e386cca8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e386cf60 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e386cf40 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e386cf18 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x232e386e708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3870470 prev 0x232e386e708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386edd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3870398 prev 0x232e386edd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386f3f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e38702c0 prev 0x232e386f3f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386f9c0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3870170 prev 0x232e386f9c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3870200 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3870590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3870570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3870548 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x232e3871d38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3874040 prev 0x232e3871d38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872408 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873f68 prev 0x232e3872408 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872a28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873e90 prev 0x232e3872a28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872ff0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873db8 prev 0x232e3872ff0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3873568 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3873c68 prev 0x232e3873568 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3873cf8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3874160 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3874140 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3874118 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x232e3875908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3878170 prev 0x232e3875908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3875fd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3878098 prev 0x232e3875fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e38765f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877fc0 prev 0x232e38765f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3876bc0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877ee8 prev 0x232e3876bc0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3877138 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877e10 prev 0x232e3877138 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3877650 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3877cc0 prev 0x232e3877650 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3877d50 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3878290 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3878270 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3878248 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x232e3879b28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f928 prev 0x232e3879b28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387a1f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f850 prev 0x232e387a1f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387a818 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f778 prev 0x232e387a818 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387ade0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f6a0 prev 0x232e387ade0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387b358 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f5c8 prev 0x232e387b358 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387b870 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e387c458 prev 0x232e387b870 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387bd38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e387c308 prev 0x232e387bd38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e387c398 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e388fa48 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e388fa28 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e388fa00 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x232e3893058 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3896270 prev 0x232e3893058 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3893728 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3896198 prev 0x232e3893728 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3893d48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e38960c0 prev 0x232e3893d48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894310 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895fe8 prev 0x232e3894310 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894888 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895f10 prev 0x232e3894888 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894da0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895e38 prev 0x232e3894da0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3895268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895d60 prev 0x232e3895268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e38956d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3895c10 prev 0x232e38956d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3895ca0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3896390 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3896370 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3896348 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x232e3a17d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b3d0 prev 0x232e3a17d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a18438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b2f8 prev 0x232e3a18438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a18a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b220 prev 0x232e3a18a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b148 prev 0x232e3a19020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19598 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b070 prev 0x232e3a19598 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19ab0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1af98 prev 0x232e3a19ab0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1aec0 prev 0x232e3a19f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1a3e0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1ade8 prev 0x232e3a1a3e0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1a7f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3a1ac98 prev 0x232e3a1a7f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3a1ad28 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3a1b4f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3a1b4d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3a1b4a8 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x232e3a1cc98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21720 prev 0x232e3a1cc98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1d368 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21648 prev 0x232e3a1d368 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1d988 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21570 prev 0x232e3a1d988 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1df50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21498 prev 0x232e3a1df50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1e4c8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a213c0 prev 0x232e3a1e4c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1fa00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a212e8 prev 0x232e3a1fa00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1fec8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21210 prev 0x232e3a1fec8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a20330 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21138 prev 0x232e3a20330 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a20748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21060 prev 0x232e3a20748 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x232e3a20b00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x232e3a20f10 prev 0x232e3a20b00 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x232e3a20fa0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x232e3a21840 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x232e3a21820 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x232e3a217f8 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x232e33a99d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x232e33a98d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x232e33a9970 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x232e33a4348 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x232e33a4020 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x232e33a4000 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x232e33a3f20 '_TypeTag'
|-CXXRecordDecl 0x232e33a43a8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x232e33a44c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x232e33a4568 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x232e33ab1f0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x232e33ab1c8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x232e33a4630 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x232e33ab9d8 <col:72>
| |-CXXMethodDecl 0x232e33a4768 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x232e33a4768
| | `-ParmVarDecl 0x232e33a4878 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x232e3864130 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x232e3864130
| | `-ParmVarDecl 0x232e3864248 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x232e3864c30 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x232e33a4568 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x232e3864d20 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x232e3864d70 <col:10>
|-ClassTemplateDecl 0x232e33a4ad0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x232e33a49b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x232e33a4a40 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x232e33a4d60 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x232e33a4e00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x232e3863dc0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x232e3863fc8 prev 0x232e3863dc0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3864098 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x232e38642d0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x232e38642d0
| | | `-ParmVarDecl 0x232e38643e8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x232e3864488 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x232e3864488
| | | `-ParmVarDecl 0x232e3864598 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x232e3864638 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x232e3864638
| | | `-ParmVarDecl 0x232e3864748 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x232e38647b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x232e38647b8
| | | `-ParmVarDecl 0x232e38648c8 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x232e3864950 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3864d10 <col:10>
| | `-CXXConstructorDecl 0x232e3864b58 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3864d80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e3864de8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e386d180 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x232e386d388 prev 0x232e386d180 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e386d458 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x232e386d4f0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x232e386d4f0
| | | `-ParmVarDecl 0x232e386d608 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x232e386d6a8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x232e386d6a8
| | | `-ParmVarDecl 0x232e386d7b8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x232e386d858 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x232e386d858
| | | `-ParmVarDecl 0x232e386d968 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x232e386d9d8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x232e386d9d8
| | | `-ParmVarDecl 0x232e386dae8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x232e386db70 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e386de50 <col:10>
| | `-CXXConstructorDecl 0x232e386dd78 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e386de60 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e386dec8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38707b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x232e38709b8 prev 0x232e38707b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3870a88 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x232e3870b20 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x232e3870b20
| | | `-ParmVarDecl 0x232e3870c38 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x232e3870cd8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x232e3870cd8
| | | `-ParmVarDecl 0x232e3870de8 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x232e3870e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x232e3870e88
| | | `-ParmVarDecl 0x232e3870f98 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x232e3871008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x232e3871008
| | | `-ParmVarDecl 0x232e3871118 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x232e38711a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3871480 <col:10>
| | `-CXXConstructorDecl 0x232e38713a8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3871490 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e38714f8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e3874380 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x232e3874588 prev 0x232e3874380 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3874658 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x232e38746f0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x232e38746f0
| | | `-ParmVarDecl 0x232e3874808 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x232e38748a8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x232e38748a8
| | | `-ParmVarDecl 0x232e38749b8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x232e3874a58 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x232e3874a58
| | | `-ParmVarDecl 0x232e3874b68 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x232e3874bd8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x232e3874bd8
| | | `-ParmVarDecl 0x232e3874ce8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x232e3874d70 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3875050 <col:10>
| | `-CXXConstructorDecl 0x232e3874f78 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3875060 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e38750c8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38784b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x232e38786b8 prev 0x232e38784b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3878788 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x232e3878820 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x232e3878820
| | | `-ParmVarDecl 0x232e3878938 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x232e38789d8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x232e38789d8
| | | `-ParmVarDecl 0x232e3878ae8 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x232e3878b88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x232e3878b88
| | | `-ParmVarDecl 0x232e3878c98 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x232e3878d08 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x232e3878d08
| | | `-ParmVarDecl 0x232e3878e18 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x232e3878ea0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e38791c0 <col:10>
| | `-CXXConstructorDecl 0x232e38790a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e38791d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e3878788 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x232e3879230 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x232e3879290 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e388fc68 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x232e388fe78 prev 0x232e388fc68 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e388ff48 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x232e388ffe0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x232e388ffe0
| | | `-ParmVarDecl 0x232e38900f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x232e3890198 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x232e3890198
| | | `-ParmVarDecl 0x232e38902a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x232e3890348 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x232e3890348
| | | `-ParmVarDecl 0x232e3890458 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x232e38904c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x232e38904c8
| | | `-ParmVarDecl 0x232e38905d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x232e3890660 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3890a10 <col:10>
| | `-CXXConstructorDecl 0x232e3890938 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3890a20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e388ff48 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x232e3890a80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x232e3890ae0 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38965b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x232e38967b8 prev 0x232e38965b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3896888 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x232e3896920 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x232e3896920
| | | `-ParmVarDecl 0x232e3896a38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x232e3896ad8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x232e3896ad8
| | | `-ParmVarDecl 0x232e3896be8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x232e3896c88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x232e3896c88
| | | `-ParmVarDecl 0x232e3896d98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x232e3896e08 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x232e3896e08
| | | `-ParmVarDecl 0x232e3896f18 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x232e3896fa0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3897da0 <col:10>
| | `-CXXConstructorDecl 0x232e3897c88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3897db0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e3896888 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x232e3897e10 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x232e3897e70 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e3a1b710 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x232e3a1b918 prev 0x232e3a1b710 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3a1b9e8 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x232e3a1ba80 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x232e3a1ba80
| | | `-ParmVarDecl 0x232e3a1bb98 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x232e3a1bc38 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x232e3a1bc38
| | | `-ParmVarDecl 0x232e3a1bd48 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x232e3a1bde8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x232e3a1bde8
| | | `-ParmVarDecl 0x232e3a1bef8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x232e3a1bf68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x232e3a1bf68
| | | `-ParmVarDecl 0x232e3a1c078 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x232e3a1c100 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3a1c3e0 <col:10>
| | `-CXXConstructorDecl 0x232e3a1c308 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3a1c3f0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e3a1c458 <col:10>
| `-ClassTemplateSpecializationDecl 0x232e3a21a60 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x232e3a21c68 prev 0x232e3a21a60 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x232e3a21d38 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x232e3a21dd0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x232e3a21dd0
|   | `-ParmVarDecl 0x232e3a21ee8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x232e3a21f88 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x232e3a21f88
|   | `-ParmVarDecl 0x232e3a22098 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x232e3a22138 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x232e3a22138
|   | `-ParmVarDecl 0x232e3a22248 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x232e3a225b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x232e3a225b8
|   | `-ParmVarDecl 0x232e3a226c8 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x232e3a22750 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x232e3a22af0 <col:10>
|   `-CXXConstructorDecl 0x232e3a22a18 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x232e3a22b00 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x232e3a21d38 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x232e3a22b70 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x232e3a22bd0 <col:10>
|-FunctionTemplateDecl 0x232e33a50c8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x232e33a4e70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x232e33a5028 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x232e33a4f38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x232e3862150 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3861d88 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x232e3861d00 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x232e33a99d8
| |   |-DeclStmt 0x232e3861f60 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3861db8 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x232e3861f28 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x232e3862008 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x232e3861f98 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x232e3861f78 <col:4> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |   | `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e38620b0 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x232e3862048 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x232e3862028 <col:4> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |   | `-DeclRefExpr 0x232e3862090 <col:22> 'const T' lvalue ParmVar 0x232e33a4f38 'val' 'const T &'
| |   `-BinaryOperator 0x232e3862130 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x232e3862110 <col:14> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |-CXXMethodDecl 0x232e33abd28 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x232e33abc68 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x232e3865120 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3863d28 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3863d10 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3863ca0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3862198 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3864f10 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3863d48 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x232e3864e20 <col:20> 'Storage<bool> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3864df8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x232e3864fc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3864f80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3864f60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3864f48 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3864f28 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x232e3864fb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3865088 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x232e3865020 <col:4, col:14> 'bool':'bool' lvalue ->value 0x232e3864098
| |   | | `-ImplicitCastExpr 0x232e3865008 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3864fe8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x232e3865070 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3865050 <col:22> 'const bool':'const bool' lvalue ParmVar 0x232e33abc68 'val' 'const bool &'
| |   `-BinaryOperator 0x232e3865100 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38650e0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38650c8 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38650a8 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x232e341b2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x232e341b1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x232e386e200 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e386d0e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e386d0d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e386d060 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3865168 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e386dff0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e386d108 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x232e386df00 <col:20> 'Storage<long long> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e386ded8 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x232e386e0a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e386e060 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e386e040 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e386e028 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e386e008 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x232e386e090 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e386e168 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x232e386e100 <col:4, col:14> 'long long':'long long' lvalue ->value 0x232e386d458
| |   | | `-ImplicitCastExpr 0x232e386e0e8 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e386e0c8 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x232e386e150 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e386e130 <col:22> 'const long long':'const long long' lvalue ParmVar 0x232e341b1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x232e386e1e0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e386e1c0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e386e1a8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e386e188 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x232e341b648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x232e341b588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x232e3871830 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3870718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3870700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3870690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e386e248 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3871620 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3870738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x232e3871530 <col:20> 'Storage<unsigned long long> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3871508 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x232e38716d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3871690 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3871670 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3871658 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3871638 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x232e38716c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3871798 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3871730 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x232e3870a88
| |   | | `-ImplicitCastExpr 0x232e3871718 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e38716f8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x232e3871780 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3871760 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x232e341b588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x232e3871810 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38717f0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38717d8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38717b8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x232e341b9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x232e341b918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x232e3875400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e38742e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e38742d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3874260 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3871878 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e38751f0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3874308 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x232e3875100 <col:20> 'Storage<double> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e38750d8 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x232e38752a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3875260 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3875240 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3875228 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3875208 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x232e3875290 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3875368 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x232e3875300 <col:4, col:14> 'double':'double' lvalue ->value 0x232e3874658
| |   | | `-ImplicitCastExpr 0x232e38752e8 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e38752c8 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x232e3875350 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3875330 <col:22> 'const double':'const double' lvalue ParmVar 0x232e341b918 'val' 'const double &'
| |   `-BinaryOperator 0x232e38753e0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38753c0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38753a8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3875388 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x232e341bd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x232e341bc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x232e3879620 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3878418 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3878400 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3878390 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3875448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e38793b0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3878438 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x232e38792c8 <col:20> 'Storage<alt::String> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e38792a0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x232e3879468 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3879420 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3879400 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e38793e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e38793c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x232e3879450 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3879570 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x232e3879558 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e3879510 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x232e3158298 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x232e38794c0 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x232e3878788
| |   | | `-ImplicitCastExpr 0x232e38794a8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3879488 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x232e38794f0 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x232e341bc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x232e3879600 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38795e0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38795c8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38795a8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x232e341c0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x232e341c018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x232e3890e70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e388fbd0 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e388fbb8 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e388fb48 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3879668 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3890c00 <line:85:4, col:34>
| |   | `-VarDecl 0x232e388fbf0 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x232e3890b18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3890af0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x232e3890cb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3890c70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3890c50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3890c38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3890c18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x232e3890ca0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3890dc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x232e3890da8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e3890d60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x232e3424218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x232e3890d10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x232e388ff48
| |   | | `-ImplicitCastExpr 0x232e3890cf8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3890cd8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x232e3890d40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e341c018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x232e3890e50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e3890e30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3890e18 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3890df8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x232e341c458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x232e341c398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x232e38991f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3896518 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3896500 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3896490 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3892b98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3897f90 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3896538 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x232e3897ea8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3897e80 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x232e3898048 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3898000 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3897fe0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3897fc8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3897fa8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x232e3898030 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3899140 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x232e3899128 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e38990d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x232e34e9498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x232e38980a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x232e3896888
| |   | | `-ImplicitCastExpr 0x232e3898088 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3898068 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x232e38980d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e341c398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x232e38991d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38991b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3899198 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3899178 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x232e341c7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x232e341c718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x232e3a1c790 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3a1b678 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3a1b660 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3a1b5f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a178a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3a1c580 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3a1b698 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x232e3a1c490 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3a1c468 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x232e3a1c638 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3a1c5f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3a1c5d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3a1c5b8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3a1c598 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x232e3a1c620 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3a1c6f8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x232e3a1c690 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x232e3a1b9e8
| |   | | `-ImplicitCastExpr 0x232e3a1c678 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3a1c658 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x232e3a1c6e0 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3a1c6c0 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x232e341c718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x232e3a1c770 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e3a1c750 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3a1c738 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a1c718 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x232e341cb58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x232e341ca98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x232e3a230e0 <line:83:3, line:91:3>
|     |-BinaryOperator 0x232e3a219c8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|     | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x232e3a219b0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x232e3a21940 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a1c7d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x232e3a22cf0 <line:85:4, col:34>
|     | `-VarDecl 0x232e3a219e8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x232e3a22c08 <col:20> 'Storage<alt::MValue::Function> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x232e3a22be0 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x232e3a22da8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x232e3a22d60 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|     | | `-ImplicitCastExpr 0x232e3a22d40 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x232e3a22d28 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x232e3a22d08 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x232e3a22d90 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x232e3a23030 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x232e3a23018 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x232e3a22eb0 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x232e3a222b8 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x232e3a22e00 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x232e3a21d38
|     | | `-ImplicitCastExpr 0x232e3a22de8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x232e3a22dc8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x232e3a22e30 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x232e341ca98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x232e3a230c0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|       | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x232e3a230a0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x232e3a23088 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x232e3a23068 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x232e33a5148 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x232e33ab430 <line:94:3, line:97:3>
|   |-BinaryOperator 0x232e33ab388 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x232e33ab280 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | | `-CXXThisExpr 0x232e33ab270 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x232e33ab300 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x232e339ebe0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x232e33ab410 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x232e33ab3b8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     | `-CXXThisExpr 0x232e33ab3a8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x232e33ab3f8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x232e33ab3e8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x232e33a52e8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e33a5228 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e33ab708 <line:100:3, line:106:3>
|   |-BinaryOperator 0x232e33ab4f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x232e33ab460 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | | `-CXXThisExpr 0x232e33ab450 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x232e33ab4e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x232e33ab4b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x232e33a5460
|   |     `-DeclRefExpr 0x232e33ab490 <col:11> 'const alt::MValue' lvalue ParmVar 0x232e33a5228 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x232e33ab5c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x232e33ab528 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   | | `-CXXThisExpr 0x232e33ab518 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x232e33ab5a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x232e33ab578 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x232e33a54c8
|   |     `-DeclRefExpr 0x232e33ab558 <col:14> 'const alt::MValue' lvalue ParmVar 0x232e33a5228 'that' 'const alt::MValue &'
|   `-IfStmt 0x232e33ab6f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x232e33ab638 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x232e33ab620 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x232e33ab5f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     |     `-CXXThisExpr 0x232e33ab5e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x232e33ab6d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x232e33ab6a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|         `-ImplicitCastExpr 0x232e33ab690 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x232e33ab660 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|             `-CXXThisExpr 0x232e33ab650 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x232e33a53b0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x232e33aba20 <line:109:3, line:117:3>
|   |-IfStmt 0x232e33ab7c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x232e33ab7a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x232e33ab788 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x232e33ab770 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x232e33ab740 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   | |       `-CXXThisExpr 0x232e33ab730 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x232e33ab7b8 <line:111:5>
|   |-UnaryOperator 0x232e33ab868 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x232e33ab838 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|   |   `-ImplicitCastExpr 0x232e33ab820 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x232e33ab7f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   |       `-CXXThisExpr 0x232e33ab7e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x232e33aba08 <line:115:4, line:116:12>
|     |-BinaryOperator 0x232e33ab960 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x232e33ab930 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x232e33ab8d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|     | |   `-ImplicitCastExpr 0x232e33ab8c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x232e33ab890 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     | |       `-CXXThisExpr 0x232e33ab880 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x232e33ab948 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x232e33ab908 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x232e33ab9e8 <line:116:5, col:12> 'void' Function 0x232e1e65d28 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x232e33ab9c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x232e33ab990 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|           `-CXXThisExpr 0x232e33ab980 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x232e33a5460 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x232e33a54c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x232e33a5520 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e33a5588 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x232e33abaa8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x232e33aba88 <col:14, col:24> 'void'
|     `-MemberExpr 0x232e33aba58 <col:14> '<bound member function type>' ->CreateNil 0x232e33a5148
|       `-CXXThisExpr 0x232e33aba48 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x232e33a5728 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x232e33a5668 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x232e341b0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341b088 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341b040 <col:29> '<bound member function type>' ->Create 0x232e33abd28
|     | `-CXXThisExpr 0x232e33abe28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e33abb28 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x232e33a5668 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x232e33a5938 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x232e33a5848 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x232e341b438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x232e341b410 <col:28, col:38> 'void'
|     |-MemberExpr 0x232e341b3c8 <col:28> '<bound member function type>' ->Create 0x232e341b2b8
|     | `-CXXThisExpr 0x232e341b3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x232e33a5848 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x232e33a5b18 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x232e33a5a28 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x232e341b7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341b7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341b758 <col:29> '<bound member function type>' ->Create 0x232e341b648
|     | `-CXXThisExpr 0x232e341b748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x232e33a5a28 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x232e33a5cf8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x232e33a5c08 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x232e341bb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341bb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341bae8 <col:31> '<bound member function type>' ->Create 0x232e341b9d8
|     | `-CXXThisExpr 0x232e341bad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x232e33a5c08 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x232e33a5ea8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x232e33a5de8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x232e341bed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341beb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341be68 <col:31> '<bound member function type>' ->Create 0x232e341bd58
|     | `-CXXThisExpr 0x232e341be58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341bbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x232e33a5de8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x232e33a60b8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x232e33a5fc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x232e341c258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341c230 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341c1e8 <col:29> '<bound member function type>' ->Create 0x232e341c0d8
|     | `-CXXThisExpr 0x232e341c1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341bf58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e33a5fc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x232e33a62c8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x232e33a61d8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x232e341c5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341c5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341c568 <col:29> '<bound member function type>' ->Create 0x232e341c458
|     | `-CXXThisExpr 0x232e341c558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e33a61d8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x232e33a64d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x232e33a63e8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x232e341c958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341c930 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341c8e8 <col:31> '<bound member function type>' ->Create 0x232e341c7d8
|     | `-CXXThisExpr 0x232e341c8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x232e33a63e8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x232e33a6688 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x232e33a65c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x232e341ccd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x232e341ccb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x232e341cc68 <col:33> '<bound member function type>' ->Create 0x232e341cb58
|     | `-CXXThisExpr 0x232e341cc58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x232e33a65c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x232e33a6838 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x232e33a6770 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x232e341cfb0 <col:23, col:43>
|   `-ExprWithCleanups 0x232e341cf98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x232e341cf28 <col:25, col:40> 'void'
|       |-MemberExpr 0x232e341cea0 <col:25, col:35> '<bound member function type>' ->Create 0x232e341b2b8
|       | `-CXXThisExpr 0x232e341ce90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341cf80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x232e341cf68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x232e341cf50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x232e341cda8 <col:37> 'int32_t':'int' lvalue ParmVar 0x232e33a6770 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x232e33a69b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x232e33a68f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x232e341d288 <col:24, col:45>
|   `-ExprWithCleanups 0x232e341d270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x232e341d200 <col:26, col:42> 'void'
|       |-MemberExpr 0x232e341d178 <col:26, col:37> '<bound member function type>' ->Create 0x232e341b648
|       | `-CXXThisExpr 0x232e341d168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x232e341d240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x232e341d228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x232e341d080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x232e33a68f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x232e33a6b10 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x232e33a6a80 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x232e341d600 <col:27, col:50>
|   `-ExprWithCleanups 0x232e341d5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x232e341d508 <col:29, col:47> 'void'
|       |-MemberExpr 0x232e341d480 <col:29, col:42> '<bound member function type>' ->Create 0x232e341bd58
|       | `-CXXThisExpr 0x232e341d470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x232e341d5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x232e341d5a8)
|           `-CXXConstructExpr 0x232e341d578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x232e341d560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x232e341d358 <col:44> 'const char *' lvalue ParmVar 0x232e33a6a80 'val' 'const char *'
|-CXXConstructorDecl 0x232e33a6d38 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x232e33a6c70 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x232e341d990 <col:34, col:57>
|   `-ExprWithCleanups 0x232e341d978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x232e341d880 <col:36, col:54> 'void'
|       |-MemberExpr 0x232e341d7f8 <col:36, col:49> '<bound member function type>' ->Create 0x232e341bd58
|       | `-CXXThisExpr 0x232e341d7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x232e341d948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x232e341d928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x232e341d920)
|             `-ImplicitCastExpr 0x232e341d908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x232e341d8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x232e341d6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e33a6c70 'val' 'const std::string &'
|-CXXConstructorDecl 0x232e33a6e88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e33a6df8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e341da30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x232e341da08 <col:32, col:41> 'void'
|     |-MemberExpr 0x232e341d9b8 <col:32> '<bound member function type>' ->Copy 0x232e33a52e8
|     | `-CXXThisExpr 0x232e341d9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341d9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x232e33a6df8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x232e33a7038 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x232e33a6f48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e341db68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x232e341da88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x232e341da58 <col:4> '<bound member function type>' ->Destroy 0x232e33a53b0
|   |   `-CXXThisExpr 0x232e341da48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x232e341db08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x232e341dab8 <col:4> '<bound member function type>' ->Copy 0x232e33a52e8
|   | | `-CXXThisExpr 0x232e341daa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x232e341dae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x232e33a6f48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x232e341db58 <line:146:4, col:12>
|     `-UnaryOperator 0x232e341db40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e341db30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x232e33a7128 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x232e341dc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x232e341dc50 <line:151:4, col:22>
|     `-BinaryOperator 0x232e341dc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x232e341dbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x232e341dba0 <col:11> '<bound member function type>' ->ToInt 0x232e33a7218
|       |   `-CXXThisExpr 0x232e341db90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x232e341dc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x232e341dbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x232e33a7218 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x232e341f0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x232e341dcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x232e341dcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341dc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341dc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e341f048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x232e341dd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x232e341dd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341dd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341e218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341e200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341e1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341e1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x232e341e140 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |           `-CXXThisExpr 0x232e341e130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341e2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x232e341e290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e341e260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341e6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x232e341e6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x232e341e688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x232e341e600 <col:12, col:19> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |         `-CXXThisExpr 0x232e341e5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341e758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x232e341e738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e341e708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341eb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341eb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341eb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341eb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x232e341eaa0 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e998
|   |   |           `-CXXThisExpr 0x232e341ea90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e341ec10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x232e341ebf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x232e341ebc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e341f038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x232e341f020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x232e341f008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x232e341efe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x232e341ef60 <col:12, col:22> '<bound member function type>' ->Get 0x232e341ee58
|   |               `-CXXThisExpr 0x232e341ef50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e341f0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x232e341f0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x232e341f078 <col:11> 'int' 0
|-CXXMethodDecl 0x232e33a7308 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x232e341fd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x232e341f140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x232e341f128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341f0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341f0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e341fd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x232e341f1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x232e341f1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341f198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341f440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341f428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341f410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341f3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x232e341f368 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |           `-CXXThisExpr 0x232e341f358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341f4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x232e341f4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e341f488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341f730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x232e341f718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341f700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341f6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x232e341f658 <col:12, col:19> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |           `-CXXThisExpr 0x232e341f648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341f7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x232e341f7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e341f778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341fa08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341f9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x232e341f9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x232e341f948 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e998
|   |   |         `-CXXThisExpr 0x232e341f938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e341faa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x232e341fa80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x232e341fa50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e341fcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x232e341fce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x232e341fcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x232e341fca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x232e341fc20 <col:12, col:22> '<bound member function type>' ->Get 0x232e341ee58
|   |               `-CXXThisExpr 0x232e341fc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e341fd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x232e341fd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x232e341fd38 <col:11> 'int' 0
|-CXXMethodDecl 0x232e33a7428 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x232e3421b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x232e341fe00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x232e341fde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341fdb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341fda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e3421650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x232e341fea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x232e341fe88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341fe58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x232e34201e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x232e34201b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x232e3420158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x232e3420110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x232e34200b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x232e3420028 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |         |     `-CXXThisExpr 0x232e3420018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x232e3420128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x232e34200d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x232e3420140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x232e34200f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x232e3420298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x232e3420278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e3420248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x232e34206f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e34206d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e34206a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e3420690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e3420678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3420628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3420620)
|   |   |               `-CallExpr 0x232e34205e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e34205c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x232e30995f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x232e3420608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x232e34204c0 <col:27, col:34> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |                       `-CXXThisExpr 0x232e34204b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e34207a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x232e3420780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e3420750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x232e3420bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e3420bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e3420ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e3420b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e3420b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3420b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3420b20)
|   |   |               `-CallExpr 0x232e3420ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e3420ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x232e309a088 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x232e3420b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x232e34209c8 <col:27, col:35> '<bound member function type>' ->Get 0x232e341e998
|   |   |                       `-CXXThisExpr 0x232e34209b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e3420ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x232e3420c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x232e3420c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3421138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x232e3421120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e3421108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e34210d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e34210c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e34210a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3421058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3421050)
|   |   |               `-CallExpr 0x232e3421010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e3420ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x232e309b298 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x232e3421038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x232e3420ec8 <col:27, col:37> '<bound member function type>' ->Get 0x232e341ee58
|   |   |                       `-CXXThisExpr 0x232e3420eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e34211d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x232e34211b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x232e3421180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed98 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e3421640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x232e3421610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x232e34215f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x232e34215a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x232e3421520 <col:12, col:22> '<bound member function type>' ->Get 0x232e3421418
|   |               `-CXXThisExpr 0x232e3421510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e3421b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x232e3421b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x232e3421b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x232e3421af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x232e3421688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x232e33a7548 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x232e3421be8 <col:24, col:39>
|   `-ReturnStmt 0x232e3421bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e3421bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x232e3421b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x232e33a5460
|         `-CXXThisExpr 0x232e3421b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x232e33aae10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x232e33a75f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x232e33aa410 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x232e33aad70 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x232e33ab018 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x232e33aae68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x232e33aaf78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x232e3a23570 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a232f8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23240 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x232e3a23178 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x232e33a99d8
| |   | | `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |   `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a232e0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a232c8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a232a8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a232a0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a234e0 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23320 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a234b0 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |       `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a23560 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x232e3a23518 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x232e3a234f8 <col:11> 'auto' lvalue Var 0x232e3a23320 '_storage' 'auto'
| |-CXXMethodDecl 0x232e341e038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x232e3a239c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23730 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a236b8 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23688 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23618 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3862198 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a236a0 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23718 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23700 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a236e0 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a236d8)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a23938 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23748 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a23878 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a23860 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a239b8 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a23988 <col:11, col:21> 'bool':'bool' lvalue ->value 0x232e3864098
| |       `-ImplicitCastExpr 0x232e3a23970 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a23950 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3a23748 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x232e341e4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x232e3a23e28 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23b88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23b10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23ae0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23a70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3865168 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a23af8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23b70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23b58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a23b38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a23b30)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a23d98 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23ba0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a23cd8 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a23cc0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a23e18 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a23de8 <col:11, col:21> 'long long':'long long' lvalue ->value 0x232e386d458
| |       `-ImplicitCastExpr 0x232e3a23dd0 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a23db0 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e3a23ba0 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x232e341e998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x232e3a24288 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23fe8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23f70 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23f40 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23ed0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e386e248 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a23f58 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23fd0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23fb8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a23f98 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a23f90)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a241f8 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a24000 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a24138 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a24120 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a24278 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a24248 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x232e3870a88
| |       `-ImplicitCastExpr 0x232e3a24230 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24210 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3a24000 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x232e341ee58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x232e3a246e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a24448 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a243d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a243a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a24330 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3871878 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a243b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a24430 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a24418 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a243f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a243f0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a24658 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a24460 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a24598 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a24580 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a246d8 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a246a8 <col:11, col:21> 'double':'double' lvalue ->value 0x232e3874658
| |       `-ImplicitCastExpr 0x232e3a24690 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24670 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3a24460 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x232e3421418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x232e3a24b48 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a248a8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a24830 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a24800 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a24790 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3875448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a24818 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a24890 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a24878 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a24858 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a24850)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a24ab8 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a248c0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a249f8 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a249e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a24b38 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a24b08 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x232e3878788
| |       `-ImplicitCastExpr 0x232e3a24af0 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24ad0 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3a248c0 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x232e34f19a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x232e3a25998 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a256f8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a25680 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a25650 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a255e0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3879668 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a25668 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a256e0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a256c8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a256a8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a256a0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a25908 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a25710 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a25848 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a25830 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a25988 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a25958 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x232e388ff48
| |       `-ImplicitCastExpr 0x232e3a25940 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a25920 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e3a25710 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x232e34f3d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x232e3a3dd28 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a3da88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a3da10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a3d9e0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a3d970 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3892b98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a3d9f8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a3da70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a3da58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a3da38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a3da30)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a3dc98 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a3daa0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a3dbd8 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a3dbc0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a3dd18 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a3dce8 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x232e3896888
| |       `-ImplicitCastExpr 0x232e3a3dcd0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a3dcb0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3a3daa0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x232e350c2e8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x232e3abbaf8 <line:217:3, line:223:3>
|     |-IfStmt 0x232e3abb858 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x232e3abb7e0 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x232e3abb7b0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x232e3abb740 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a1c7d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x232e3abb7c8 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|     | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x232e3abb840 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x232e3abb828 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x232e3abb808 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3abb800)
|     |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x232e3abba68 <line:221:4, col:53>
|     | `-VarDecl 0x232e3abb870 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x232e3abb9a8 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x232e3abb990 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x232e3abbae8 <line:222:4, col:21>
|       `-MemberExpr 0x232e3abbab8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x232e3a21d38
|         `-ImplicitCastExpr 0x232e3abbaa0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x232e3abba80 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3abb870 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x232e33ab0b8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x232e3421c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x232e3421c40 <col:15, col:23> 'void'
      `-MemberExpr 0x232e3421c10 <col:15> '<bound member function type>' ->Destroy 0x232e33a53b0
        `-CXXThisExpr 0x232e3421c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetRotation
TypedefType 0x232e350e460 'alt::Rotation' sugar
|-TypeAlias 0x232e2eb8760 'Rotation'
`-TemplateSpecializationType 0x232e2eb8630 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x232e2eb84d8 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x232e2eb84c0 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x232e2eb8488 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x232e2eb8610 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x232e2eb84f8 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetRotation
RecordType 0x232e2eb8610 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x232e2eb84f8 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetRotation
ClassTemplateSpecializationDecl 0x232e2eb84f8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IEntity_SetRotation
ClassTemplateSpecializationDecl 0x232e2eb84f8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_GetSyncedMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_GetSyncedMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_GetSyncedMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetRotation
TypedefType 0x232e350e460 'alt::Rotation' sugar
|-TypeAlias 0x232e2eb8760 'Rotation'
`-TemplateSpecializationType 0x232e2eb8630 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x232e2eb84d8 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x232e2eb84c0 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x232e2eb8488 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x232e2eb8610 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x232e2eb84f8 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetRotation
RecordType 0x232e2eb8610 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x232e2eb84f8 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetRotation
ClassTemplateSpecializationDecl 0x232e2eb84f8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IPlayer_SetRotation
ClassTemplateSpecializationDecl 0x232e2eb84f8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_GetSyncedMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_GetSyncedMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_GetSyncedMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_Spawn
TypedefType 0x232e350d6a0 'alt::Position' sugar
|-TypeAlias 0x232e2ea7ff0 'Position'
`-TypedefType 0x232e2ea7fc0 'alt::Point' sugar
  |-TypeAlias 0x232e2ea7c10 'Point'
  `-TemplateSpecializationType 0x232e2ea7ae0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x232e2ea7988 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x232e2ea7970 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x232e2ea7938 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x232e2ea7ac0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x232e2ea79a8 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_Spawn
RecordType 0x232e2ea7ac0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x232e2ea79a8 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_Spawn
ClassTemplateSpecializationDecl 0x232e2ea79a8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IPlayer_Spawn
ClassTemplateSpecializationDecl 0x232e2ea79a8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetName
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetName
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetName
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_Kick
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_Kick
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_Kick
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetRotation
TypedefType 0x232e350e460 'alt::Rotation' sugar
|-TypeAlias 0x232e2eb8760 'Rotation'
`-TemplateSpecializationType 0x232e2eb8630 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x232e2eb84d8 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x232e2eb84c0 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x232e2eb8488 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x232e2eb8610 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x232e2eb84f8 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetRotation
RecordType 0x232e2eb8610 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x232e2eb84f8 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetRotation
ClassTemplateSpecializationDecl 0x232e2eb84f8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IVehicle_SetRotation
ClassTemplateSpecializationDecl 0x232e2eb84f8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_GetSyncedMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_GetSyncedMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_GetSyncedMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetPrimaryColorRGB
RecordType 0x232e3176d80 'struct alt::RGBA'
`-CXXRecord 0x232e3176ce8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetPrimaryColorRGB
RecordType 0x232e3176d80 'struct alt::RGBA'
`-CXXRecord 0x232e3176ce8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetPrimaryColorRGB
CXXRecordDecl 0x232e3176ce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x232e3176e08 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x232e3176ed0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e31778b8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177890 <col:15> 'int' 0
|-FieldDecl 0x232e3176f38 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e31778f8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e31778d0 <col:15> 'int' 0
|-FieldDecl 0x232e3176fa0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e3177938 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177910 <col:15> 'int' 0
|-FieldDecl 0x232e3177008 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e3177978 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177950 <col:15> 'int' 0
|-CXXConstructorDecl 0x232e31770c0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x232e31770c0
|-CXXConstructorDecl 0x232e3177428 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x232e3177178 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e31771f0 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e3177268 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e31772e0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176ed0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e31779d0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177990 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e3177178 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176f38 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177a50 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177a10 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e31771f0 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176fa0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177ad0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177a90 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e3177268 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3177008 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177b50 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177b10 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e31772e0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x232e3177bb0 <line:22:3, line:24:3>
`-FriendDecl 0x232e3177800 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x232e3177740 parent 0x232e3176c78 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x232e3177578 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x232e3177618 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x232e3183838 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x232e31837d0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x232e31837b8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x232e3183798 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x232e3182738 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x232e3182720 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x232e3182700 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x232e3181510 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x232e31814f8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x232e31814d8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x232e3180478 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x232e3180460 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x232e3180440 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x232e317f250 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x232e317f238 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x232e317f218 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x232e317e1b8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x232e317e1a0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x232e317e180 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x232e317cf90 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x232e317cf78 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x232e317cf58 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x232e317bf00 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x232e317bee8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x232e317bea0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x232e3179c60 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x232e3179c48 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x232e3179c28 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x232e3177bc0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e3177578 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x232e3179c10 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x232e3177be0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x232e3179d30 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x232e3179d18 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x232e3179d00 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x232e3179cb8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x232e3176ed0
      | | | | | | | |         `-DeclRefExpr 0x232e3179c98 <col:31> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x232e317cf40 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x232e317bf38 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x232e317d060 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x232e317d048 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x232e317d030 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x232e317cfe8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x232e3176f38
      | | | | | |         `-DeclRefExpr 0x232e317cfc8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x232e317f200 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x232e317e1f0 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x232e317f320 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x232e317f308 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x232e317f2f0 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x232e317f2a8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x232e3176fa0
      | | | |         `-DeclRefExpr 0x232e317f288 <col:77> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x232e31814c0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x232e31804b0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x232e31815e0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x232e31815c8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x232e31815b0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x232e3181568 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x232e3177008
      | |         `-DeclRefExpr 0x232e3181548 <col:100> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x232e3183780 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x232e3182770 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x232e3183828 <line:29:4, col:11>
        `-DeclRefExpr 0x232e3183808 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e3177578 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetSecondaryColorRGB
RecordType 0x232e3176d80 'struct alt::RGBA'
`-CXXRecord 0x232e3176ce8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetSecondaryColorRGB
RecordType 0x232e3176d80 'struct alt::RGBA'
`-CXXRecord 0x232e3176ce8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetSecondaryColorRGB
CXXRecordDecl 0x232e3176ce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x232e3176e08 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x232e3176ed0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e31778b8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177890 <col:15> 'int' 0
|-FieldDecl 0x232e3176f38 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e31778f8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e31778d0 <col:15> 'int' 0
|-FieldDecl 0x232e3176fa0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e3177938 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177910 <col:15> 'int' 0
|-FieldDecl 0x232e3177008 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e3177978 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177950 <col:15> 'int' 0
|-CXXConstructorDecl 0x232e31770c0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x232e31770c0
|-CXXConstructorDecl 0x232e3177428 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x232e3177178 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e31771f0 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e3177268 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e31772e0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176ed0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e31779d0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177990 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e3177178 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176f38 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177a50 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177a10 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e31771f0 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176fa0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177ad0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177a90 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e3177268 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3177008 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177b50 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177b10 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e31772e0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x232e3177bb0 <line:22:3, line:24:3>
`-FriendDecl 0x232e3177800 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x232e3177740 parent 0x232e3176c78 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x232e3177578 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x232e3177618 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x232e3183838 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x232e31837d0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x232e31837b8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x232e3183798 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x232e3182738 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x232e3182720 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x232e3182700 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x232e3181510 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x232e31814f8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x232e31814d8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x232e3180478 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x232e3180460 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x232e3180440 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x232e317f250 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x232e317f238 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x232e317f218 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x232e317e1b8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x232e317e1a0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x232e317e180 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x232e317cf90 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x232e317cf78 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x232e317cf58 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x232e317bf00 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x232e317bee8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x232e317bea0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x232e3179c60 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x232e3179c48 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x232e3179c28 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x232e3177bc0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e3177578 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x232e3179c10 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x232e3177be0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x232e3179d30 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x232e3179d18 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x232e3179d00 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x232e3179cb8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x232e3176ed0
      | | | | | | | |         `-DeclRefExpr 0x232e3179c98 <col:31> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x232e317cf40 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x232e317bf38 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x232e317d060 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x232e317d048 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x232e317d030 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x232e317cfe8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x232e3176f38
      | | | | | |         `-DeclRefExpr 0x232e317cfc8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x232e317f200 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x232e317e1f0 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x232e317f320 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x232e317f308 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x232e317f2f0 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x232e317f2a8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x232e3176fa0
      | | | |         `-DeclRefExpr 0x232e317f288 <col:77> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x232e31814c0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x232e31804b0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x232e31815e0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x232e31815c8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x232e31815b0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x232e3181568 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x232e3177008
      | |         `-DeclRefExpr 0x232e3181548 <col:100> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x232e3183780 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x232e3182770 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x232e3183828 <line:29:4, col:11>
        `-DeclRefExpr 0x232e3183808 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e3177578 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetTireSmokeColor
RecordType 0x232e3176d80 'struct alt::RGBA'
`-CXXRecord 0x232e3176ce8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetTireSmokeColor
RecordType 0x232e3176d80 'struct alt::RGBA'
`-CXXRecord 0x232e3176ce8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetTireSmokeColor
CXXRecordDecl 0x232e3176ce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x232e3176e08 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x232e3176ed0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e31778b8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177890 <col:15> 'int' 0
|-FieldDecl 0x232e3176f38 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e31778f8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e31778d0 <col:15> 'int' 0
|-FieldDecl 0x232e3176fa0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e3177938 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177910 <col:15> 'int' 0
|-FieldDecl 0x232e3177008 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e3177978 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177950 <col:15> 'int' 0
|-CXXConstructorDecl 0x232e31770c0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x232e31770c0
|-CXXConstructorDecl 0x232e3177428 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x232e3177178 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e31771f0 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e3177268 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e31772e0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176ed0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e31779d0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177990 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e3177178 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176f38 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177a50 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177a10 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e31771f0 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176fa0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177ad0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177a90 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e3177268 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3177008 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177b50 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177b10 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e31772e0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x232e3177bb0 <line:22:3, line:24:3>
`-FriendDecl 0x232e3177800 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x232e3177740 parent 0x232e3176c78 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x232e3177578 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x232e3177618 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x232e3183838 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x232e31837d0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x232e31837b8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x232e3183798 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x232e3182738 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x232e3182720 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x232e3182700 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x232e3181510 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x232e31814f8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x232e31814d8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x232e3180478 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x232e3180460 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x232e3180440 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x232e317f250 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x232e317f238 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x232e317f218 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x232e317e1b8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x232e317e1a0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x232e317e180 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x232e317cf90 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x232e317cf78 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x232e317cf58 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x232e317bf00 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x232e317bee8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x232e317bea0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x232e3179c60 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x232e3179c48 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x232e3179c28 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x232e3177bc0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e3177578 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x232e3179c10 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x232e3177be0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x232e3179d30 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x232e3179d18 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x232e3179d00 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x232e3179cb8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x232e3176ed0
      | | | | | | | |         `-DeclRefExpr 0x232e3179c98 <col:31> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x232e317cf40 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x232e317bf38 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x232e317d060 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x232e317d048 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x232e317d030 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x232e317cfe8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x232e3176f38
      | | | | | |         `-DeclRefExpr 0x232e317cfc8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x232e317f200 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x232e317e1f0 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x232e317f320 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x232e317f308 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x232e317f2f0 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x232e317f2a8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x232e3176fa0
      | | | |         `-DeclRefExpr 0x232e317f288 <col:77> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x232e31814c0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x232e31804b0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x232e31815e0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x232e31815c8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x232e31815b0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x232e3181568 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x232e3177008
      | |         `-DeclRefExpr 0x232e3181548 <col:100> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x232e3183780 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x232e3182770 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x232e3183828 <line:29:4, col:11>
        `-DeclRefExpr 0x232e3183808 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e3177578 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetNumberplateText
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetNumberplateText
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetNumberplateText
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetNeonColor
RecordType 0x232e3176d80 'struct alt::RGBA'
`-CXXRecord 0x232e3176ce8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetNeonColor
RecordType 0x232e3176d80 'struct alt::RGBA'
`-CXXRecord 0x232e3176ce8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetNeonColor
CXXRecordDecl 0x232e3176ce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x232e3176e08 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x232e3176ed0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e31778b8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177890 <col:15> 'int' 0
|-FieldDecl 0x232e3176f38 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e31778f8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e31778d0 <col:15> 'int' 0
|-FieldDecl 0x232e3176fa0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e3177938 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177910 <col:15> 'int' 0
|-FieldDecl 0x232e3177008 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x232e3177978 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x232e3177950 <col:15> 'int' 0
|-CXXConstructorDecl 0x232e31770c0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x232e31770c0
|-CXXConstructorDecl 0x232e3177428 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x232e3177178 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e31771f0 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e3177268 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x232e31772e0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176ed0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e31779d0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177990 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e3177178 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176f38 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177a50 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177a10 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e31771f0 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3176fa0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177ad0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177a90 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e3177268 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x232e3177008 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x232e3177b50 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x232e3177b10 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x232e31772e0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x232e3177bb0 <line:22:3, line:24:3>
`-FriendDecl 0x232e3177800 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x232e3177740 parent 0x232e3176c78 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x232e3177578 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x232e3177618 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x232e3183838 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x232e31837d0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x232e31837b8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x232e3183798 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x232e3182738 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x232e3182720 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x232e3182700 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x232e3181510 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x232e31814f8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x232e31814d8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x232e3180478 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x232e3180460 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x232e3180440 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x232e317f250 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x232e317f238 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x232e317f218 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x232e317e1b8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x232e317e1a0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x232e317e180 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x232e317cf90 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x232e317cf78 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x232e317cf58 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x232e317bf00 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x232e317bee8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x232e317bea0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x232e2e91f58 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x232e3179c60 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x232e3179c48 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x232e3179c28 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x232e3177bc0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e3177578 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x232e3179c10 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x232e3177be0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x232e3179d30 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x232e3179d18 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x232e3179d00 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x232e3179cb8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x232e3176ed0
      | | | | | | | |         `-DeclRefExpr 0x232e3179c98 <col:31> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x232e317cf40 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x232e317bf38 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x232e317d060 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x232e317d048 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x232e317d030 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x232e317cfe8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x232e3176f38
      | | | | | |         `-DeclRefExpr 0x232e317cfc8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x232e317f200 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x232e317e1f0 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x232e317f320 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x232e317f308 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x232e317f2f0 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x232e317f2a8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x232e3176fa0
      | | | |         `-DeclRefExpr 0x232e317f288 <col:77> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x232e31814c0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x232e31804b0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x232e31815e0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x232e31815c8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x232e31815b0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x232e3181568 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x232e3177008
      | |         `-DeclRefExpr 0x232e3181548 <col:100> 'const alt::RGBA' lvalue ParmVar 0x232e3177618 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x232e3183780 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x232e3182770 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x232e3183828 <line:29:4, col:11>
        `-DeclRefExpr 0x232e3183808 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e3177578 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadAppearanceDataFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadAppearanceDataFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadAppearanceDataFromBase64
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadGameStateFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadGameStateFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadGameStateFromBase64
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadHealthDataFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadHealthDataFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadHealthDataFromBase64
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadDamageDataFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadDamageDataFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadDamageDataFromBase64
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadScriptDataFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadScriptDataFromBase64
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadScriptDataFromBase64
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_GetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_GetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_GetMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_SetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_SetMetaData
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_SetMetaData
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_SetMetaData
RecordType 0x232e339e9c0 'class alt::MValue'
`-CXXRecord 0x232e339e930 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_SetMetaData
RecordType 0x232e339e9c0 'class alt::MValue'
`-CXXRecord 0x232e339e930 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_SetMetaData
CXXRecordDecl 0x232e339e930 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x232e339ea48 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x232e339ead8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x232e339eb18 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x232e339ebe0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ec38 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ec90 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ece8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ed40 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ed98 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339edf0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339ee48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x232e339eea0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x232e339eef8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x232e339ef60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x232e1c2b4a0 'void'
|-TypeAliasDecl 0x232e339efd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x232e1c2b4c0 'bool'
|-TypeAliasDecl 0x232e339f060 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x232e339f030 'int64_t' sugar
|   |-Typedef 0x232e22628e0 'int64_t'
|   `-BuiltinType 0x232e1c2b580 'long long'
|-TypeAliasDecl 0x232e339f0d0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x232e2f05260 'uint64_t' sugar
|   |-Typedef 0x232e2262aa0 'uint64_t'
|   `-BuiltinType 0x232e1c2b620 'unsigned long long'
|-TypeAliasDecl 0x232e339f148 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x232e1c2b660 'double'
|-TypeAliasDecl 0x232e339f240 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x232e339f1d0 'alt::String' sugar
|   `-RecordType 0x232e3156900 'alt::String'
|     `-CXXRecord 0x232e3156868 'String'
|-TypeAliasDecl 0x232e339f4d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x232e339f420 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x232e339f3e0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x232e339f3c0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x232e339f2d8 'Array'
|-TypeAliasDecl 0x232e339fe38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x232e339fd20 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x232e339fcc0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x232e339fca0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x232e339fb60 'unordered_map'
|-TypeAliasDecl 0x232e339ff80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x232e339ff30 'alt::IBaseObject *'
|   `-ElaboratedType 0x232e339feb0 'alt::IBaseObject' sugar
|     `-RecordType 0x232e339e860 'alt::IBaseObject'
|       `-CXXRecord 0x232e350c678 'IBaseObject'
|-CXXRecordDecl 0x232e339ffe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x232e33a00f8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x232e33a01a0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x232e34f08d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x232e3a22b60 <col:10>
| |-CXXConstructorDecl 0x232e34f09b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x232e34f09b0
| | `-ParmVarDecl 0x232e34f0a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x232e34f0b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x232e34f0b38
| | `-ParmVarDecl 0x232e34f0c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x232e350b9e8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x232e3a222b8 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x232e3a223c8 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x232e3a22fd0 <col:10>
| |   |-BinaryOperator 0x232e3a22f78 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x232e3a22f30 <col:10> 'void *' lvalue ->invoker 0x232e33a01a0
| |   | | `-CXXThisExpr 0x232e3a22f20 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x232e3a22f60 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x232e3a22ef0 <col:10> 'void *const' lvalue .invoker 0x232e33a01a0
| |   |     `-DeclRefExpr 0x232e3a22ed0 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x232e3a223c8 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x232e3a22fc0 <col:10>
| |     `-UnaryOperator 0x232e3a22fa8 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x232e3a22f98 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x232e3a22438 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x232e3a22438
|   `-ParmVarDecl 0x232e3a22548 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x232e33a0210 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x232e33a03d8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x232e33a0468 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x232e33a04f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x232e25be1b0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x232e33ab258 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x232e33ab248 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x232e33ab230 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x232e33ab208 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x232e33a0598 <line:45:38>
| |-CXXConstructorDecl 0x232e33a0620 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x232e33a0738 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x232e34f1530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x232e34f1510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x232e34f14f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x232e33a0738 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x232e34f15b8 <col:9>
| |-CXXConstructorDecl 0x232e33a07d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x232e33a07d8
| | `-ParmVarDecl 0x232e33a08e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x232e33a0988 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x232e33a0988
| | `-ParmVarDecl 0x232e33a0a98 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x232e33a0b08 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x232e33a0b08
| | `-ParmVarDecl 0x232e33a0c18 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x232e33a0ca0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x232e25be078 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x232e34f13c0 <col:9>
| `-CXXConstructorDecl 0x232e34f12e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x232e34f13d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x232e34f1450 <col:9>
|-AccessSpecDecl 0x232e33a0e40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x232e33a0f90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x232e33a0e70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x232e33a0f00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x232e33a1240 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x232e33a14f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x232e33a12e0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a1340 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x232e33a13b8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x232e33a1460 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x232e33a19f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x232e33a1e20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x232e33a1a98 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x232e33a1b18 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x232e33a20c8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x232e33a2168 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x232e33a1af0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x232e33a1a98 '_T'
| | |-TypeAliasTemplateDecl 0x232e33a25c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x232e33a2290 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x232e33a2560 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x232e33a24f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x232e33a28c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x232e33a2628 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a2688 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x232e33a2708 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x232e33a2788 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x232e33a2838 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x232e33a2e90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x232e33a3378 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x232e33a30d0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x232e33a2f48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x232e33a2f48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x232e33a2fa8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x232e33a3028 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x232e33a3668 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x232e33a3758 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x232e33a3838 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x232e33a37f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x232e33a2f48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x232e33a39d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x232e33a3878 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x232e33a3970 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x232e33a3c40 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x232e33a3f20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x232e33a7708 prev 0x232e33a3f20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x232e33a79b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x232e33a7798 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x232e33a77f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x232e33a7878 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x232e33a7920 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x232e33a8ba0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x232e33a82c0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x232e33a8b40 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x232e33a8af0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x232e33a8ea8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x232e33a8c08 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x232e33a8c68 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x232e33a8ce8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x232e33a8d68 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x232e33a8e18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3862658 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3863a80 prev 0x232e3862658 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3862ed8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3863930 prev 0x232e3862ed8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e38639c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3863ba0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3863b80 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3863b58 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x232e3865628 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e386ce40 prev 0x232e3865628 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3865cf8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e386cd68 prev 0x232e3865cf8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3866318 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e386cc18 prev 0x232e3866318 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e386cca8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e386cf60 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e386cf40 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e386cf18 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x232e386e708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3870470 prev 0x232e386e708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386edd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3870398 prev 0x232e386edd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386f3f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e38702c0 prev 0x232e386f3f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e386f9c0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3870170 prev 0x232e386f9c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3870200 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3870590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3870570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3870548 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x232e3871d38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3874040 prev 0x232e3871d38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872408 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873f68 prev 0x232e3872408 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872a28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873e90 prev 0x232e3872a28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3872ff0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3873db8 prev 0x232e3872ff0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3873568 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3873c68 prev 0x232e3873568 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3873cf8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3874160 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3874140 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3874118 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x232e3875908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3878170 prev 0x232e3875908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3875fd8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3878098 prev 0x232e3875fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e38765f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877fc0 prev 0x232e38765f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3876bc0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877ee8 prev 0x232e3876bc0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3877138 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3877e10 prev 0x232e3877138 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3877650 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3877cc0 prev 0x232e3877650 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3877d50 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3878290 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3878270 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3878248 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x232e3879b28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f928 prev 0x232e3879b28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387a1f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f850 prev 0x232e387a1f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387a818 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f778 prev 0x232e387a818 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387ade0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f6a0 prev 0x232e387ade0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387b358 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e388f5c8 prev 0x232e387b358 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387b870 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e387c458 prev 0x232e387b870 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e387bd38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e387c308 prev 0x232e387bd38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e387c398 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e388fa48 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e388fa28 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e388fa00 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x232e3893058 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3896270 prev 0x232e3893058 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3893728 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3896198 prev 0x232e3893728 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3893d48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e38960c0 prev 0x232e3893d48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894310 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895fe8 prev 0x232e3894310 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894888 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895f10 prev 0x232e3894888 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3894da0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895e38 prev 0x232e3894da0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3895268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3895d60 prev 0x232e3895268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e38956d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3895c10 prev 0x232e38956d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3895ca0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3896390 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3896370 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3896348 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x232e3a17d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b3d0 prev 0x232e3a17d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a18438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b2f8 prev 0x232e3a18438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a18a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b220 prev 0x232e3a18a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b148 prev 0x232e3a19020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19598 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1b070 prev 0x232e3a19598 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19ab0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1af98 prev 0x232e3a19ab0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a19f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1aec0 prev 0x232e3a19f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1a3e0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a1ade8 prev 0x232e3a1a3e0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1a7f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x232e3a1ac98 prev 0x232e3a1a7f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x232e3a1ad28 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x232e3a1b4f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x232e3a1b4d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x232e3a1b4a8 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x232e3a1cc98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21720 prev 0x232e3a1cc98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1d368 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21648 prev 0x232e3a1d368 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1d988 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21570 prev 0x232e3a1d988 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1df50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21498 prev 0x232e3a1df50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1e4c8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a213c0 prev 0x232e3a1e4c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1fa00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a212e8 prev 0x232e3a1fa00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a1fec8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21210 prev 0x232e3a1fec8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a20330 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21138 prev 0x232e3a20330 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x232e3a20748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x232e3a21060 prev 0x232e3a20748 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x232e3a20b00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x232e3a20f10 prev 0x232e3a20b00 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x232e3a20fa0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x232e3a21840 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x232e3a21820 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x232e3a217f8 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x232e33a99d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x232e33a98d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x232e33a9970 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3862198 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x232e3863c40 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3863c10 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e38639c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3865168 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x232e386d000 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e386cfd0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e386cca8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e386e248 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x232e3870630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3870600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3870200 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3871878 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x232e3874200 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e38741d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3873cf8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3875448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x232e3878330 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3878300 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3877d50 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3879668 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x232e388fae8 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e388fab8 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e387c398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3892b98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x232e3896430 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3896400 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3895ca0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x232e3a178a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x232e3a1b590 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x232e3a1b560 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a1ad28 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x232e3a1c7d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x232e3a218e0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x232e3a218b0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x232e3a20fa0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x232e33a4348 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x232e33a4020 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x232e33a4000 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x232e33a3f20 '_TypeTag'
|-CXXRecordDecl 0x232e33a43a8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x232e33a44c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x232e33a4568 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x232e33ab1f0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x232e33ab1c8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x232e33a4630 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x232e33ab9d8 <col:72>
| |-CXXMethodDecl 0x232e33a4768 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x232e33a4768
| | `-ParmVarDecl 0x232e33a4878 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x232e3864130 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x232e3864130
| | `-ParmVarDecl 0x232e3864248 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x232e3864c30 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x232e33a4568 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x232e3864d20 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x232e3864d70 <col:10>
|-ClassTemplateDecl 0x232e33a4ad0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x232e33a49b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x232e33a4a40 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x232e33a4d60 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x232e33a4e00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x232e3863dc0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x232e3863fc8 prev 0x232e3863dc0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3864098 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x232e38642d0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x232e38642d0
| | | `-ParmVarDecl 0x232e38643e8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x232e3864488 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x232e3864488
| | | `-ParmVarDecl 0x232e3864598 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x232e3864638 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x232e3864638
| | | `-ParmVarDecl 0x232e3864748 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x232e38647b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x232e38647b8
| | | `-ParmVarDecl 0x232e38648c8 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x232e3864950 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3864d10 <col:10>
| | `-CXXConstructorDecl 0x232e3864b58 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3864d80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e3864de8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e386d180 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x232e386d388 prev 0x232e386d180 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e386d458 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x232e386d4f0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x232e386d4f0
| | | `-ParmVarDecl 0x232e386d608 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x232e386d6a8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x232e386d6a8
| | | `-ParmVarDecl 0x232e386d7b8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x232e386d858 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x232e386d858
| | | `-ParmVarDecl 0x232e386d968 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x232e386d9d8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x232e386d9d8
| | | `-ParmVarDecl 0x232e386dae8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x232e386db70 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e386de50 <col:10>
| | `-CXXConstructorDecl 0x232e386dd78 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e386de60 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e386dec8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38707b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x232e38709b8 prev 0x232e38707b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3870a88 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x232e3870b20 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x232e3870b20
| | | `-ParmVarDecl 0x232e3870c38 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x232e3870cd8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x232e3870cd8
| | | `-ParmVarDecl 0x232e3870de8 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x232e3870e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x232e3870e88
| | | `-ParmVarDecl 0x232e3870f98 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x232e3871008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x232e3871008
| | | `-ParmVarDecl 0x232e3871118 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x232e38711a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3871480 <col:10>
| | `-CXXConstructorDecl 0x232e38713a8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3871490 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e38714f8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e3874380 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x232e3874588 prev 0x232e3874380 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3874658 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x232e38746f0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x232e38746f0
| | | `-ParmVarDecl 0x232e3874808 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x232e38748a8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x232e38748a8
| | | `-ParmVarDecl 0x232e38749b8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x232e3874a58 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x232e3874a58
| | | `-ParmVarDecl 0x232e3874b68 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x232e3874bd8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x232e3874bd8
| | | `-ParmVarDecl 0x232e3874ce8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x232e3874d70 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3875050 <col:10>
| | `-CXXConstructorDecl 0x232e3874f78 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3875060 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e38750c8 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38784b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x232e38786b8 prev 0x232e38784b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3878788 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x232e3878820 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x232e3878820
| | | `-ParmVarDecl 0x232e3878938 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x232e38789d8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x232e38789d8
| | | `-ParmVarDecl 0x232e3878ae8 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x232e3878b88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x232e3878b88
| | | `-ParmVarDecl 0x232e3878c98 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x232e3878d08 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x232e3878d08
| | | `-ParmVarDecl 0x232e3878e18 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x232e3878ea0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e38791c0 <col:10>
| | `-CXXConstructorDecl 0x232e38790a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e38791d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e3878788 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x232e3879230 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x232e3879290 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e388fc68 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x232e388fe78 prev 0x232e388fc68 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e388ff48 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x232e388ffe0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x232e388ffe0
| | | `-ParmVarDecl 0x232e38900f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x232e3890198 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x232e3890198
| | | `-ParmVarDecl 0x232e38902a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x232e3890348 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x232e3890348
| | | `-ParmVarDecl 0x232e3890458 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x232e38904c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x232e38904c8
| | | `-ParmVarDecl 0x232e38905d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x232e3890660 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3890a10 <col:10>
| | `-CXXConstructorDecl 0x232e3890938 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3890a20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e388ff48 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x232e3890a80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x232e3890ae0 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e38965b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x232e38967b8 prev 0x232e38965b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3896888 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x232e3896920 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x232e3896920
| | | `-ParmVarDecl 0x232e3896a38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x232e3896ad8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x232e3896ad8
| | | `-ParmVarDecl 0x232e3896be8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x232e3896c88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x232e3896c88
| | | `-ParmVarDecl 0x232e3896d98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x232e3896e08 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x232e3896e08
| | | `-ParmVarDecl 0x232e3896f18 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x232e3896fa0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3897da0 <col:10>
| | `-CXXConstructorDecl 0x232e3897c88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3897db0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x232e3896888 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x232e3897e10 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x232e3897e70 <col:10>
| |-ClassTemplateSpecializationDecl 0x232e3a1b710 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x232e3a1b918 prev 0x232e3a1b710 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x232e3a1b9e8 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x232e3a1ba80 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x232e3a1ba80
| | | `-ParmVarDecl 0x232e3a1bb98 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x232e3a1bc38 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x232e3a1bc38
| | | `-ParmVarDecl 0x232e3a1bd48 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x232e3a1bde8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x232e3a1bde8
| | | `-ParmVarDecl 0x232e3a1bef8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x232e3a1bf68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x232e3a1bf68
| | | `-ParmVarDecl 0x232e3a1c078 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x232e3a1c100 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x232e3a1c3e0 <col:10>
| | `-CXXConstructorDecl 0x232e3a1c308 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x232e3a1c3f0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x232e3a1c458 <col:10>
| `-ClassTemplateSpecializationDecl 0x232e3a21a60 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x232e3a21c68 prev 0x232e3a21a60 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x232e3a21d38 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x232e3a21dd0 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x232e3a21dd0
|   | `-ParmVarDecl 0x232e3a21ee8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x232e3a21f88 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x232e3a21f88
|   | `-ParmVarDecl 0x232e3a22098 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x232e3a22138 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x232e3a22138
|   | `-ParmVarDecl 0x232e3a22248 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x232e3a225b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x232e3a225b8
|   | `-ParmVarDecl 0x232e3a226c8 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x232e3a22750 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x232e33a4630 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x232e3a22af0 <col:10>
|   `-CXXConstructorDecl 0x232e3a22a18 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x232e3a22b00 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x232e3a21d38 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x232e3a22b70 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x232e3a22bd0 <col:10>
|-FunctionTemplateDecl 0x232e33a50c8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x232e33a4e70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x232e33a5028 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x232e33a4f38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x232e3862150 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3861d88 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x232e3861d00 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x232e33a99d8
| |   |-DeclStmt 0x232e3861f60 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3861db8 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x232e3861f28 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x232e3862008 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x232e3861f98 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x232e3861f78 <col:4> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |   | `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e38620b0 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x232e3862048 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x232e3862028 <col:4> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |   | `-DeclRefExpr 0x232e3862090 <col:22> 'const T' lvalue ParmVar 0x232e33a4f38 'val' 'const T &'
| |   `-BinaryOperator 0x232e3862130 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x232e3862110 <col:14> 'auto' lvalue Var 0x232e3861db8 '_storage' 'auto'
| |-CXXMethodDecl 0x232e33abd28 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x232e33abc68 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x232e3865120 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3863d28 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3863d10 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3863ca0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3862198 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3864f10 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3863d48 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x232e3864e20 <col:20> 'Storage<bool> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3864df8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x232e3864fc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3864f80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3864f60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3864f48 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3864f28 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x232e3864fb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3865088 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x232e3865020 <col:4, col:14> 'bool':'bool' lvalue ->value 0x232e3864098
| |   | | `-ImplicitCastExpr 0x232e3865008 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3864fe8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x232e3865070 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3865050 <col:22> 'const bool':'const bool' lvalue ParmVar 0x232e33abc68 'val' 'const bool &'
| |   `-BinaryOperator 0x232e3865100 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38650e0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38650c8 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38650a8 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3863d48 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x232e341b2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x232e341b1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x232e386e200 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e386d0e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e386d0d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e386d060 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3865168 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e386dff0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e386d108 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x232e386df00 <col:20> 'Storage<long long> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e386ded8 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x232e386e0a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e386e060 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e386e040 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e386e028 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e386e008 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x232e386e090 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e386e168 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x232e386e100 <col:4, col:14> 'long long':'long long' lvalue ->value 0x232e386d458
| |   | | `-ImplicitCastExpr 0x232e386e0e8 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e386e0c8 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x232e386e150 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e386e130 <col:22> 'const long long':'const long long' lvalue ParmVar 0x232e341b1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x232e386e1e0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e386e1c0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e386e1a8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e386e188 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e386d108 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x232e341b648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x232e341b588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x232e3871830 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3870718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3870700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3870690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e386e248 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3871620 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3870738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x232e3871530 <col:20> 'Storage<unsigned long long> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3871508 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x232e38716d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3871690 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3871670 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3871658 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3871638 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x232e38716c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3871798 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3871730 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x232e3870a88
| |   | | `-ImplicitCastExpr 0x232e3871718 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e38716f8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x232e3871780 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3871760 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x232e341b588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x232e3871810 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38717f0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38717d8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38717b8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3870738 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x232e341b9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x232e341b918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x232e3875400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e38742e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e38742d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3874260 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3871878 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e38751f0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3874308 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x232e3875100 <col:20> 'Storage<double> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e38750d8 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x232e38752a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3875260 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3875240 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3875228 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3875208 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x232e3875290 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3875368 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x232e3875300 <col:4, col:14> 'double':'double' lvalue ->value 0x232e3874658
| |   | | `-ImplicitCastExpr 0x232e38752e8 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e38752c8 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x232e3875350 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3875330 <col:22> 'const double':'const double' lvalue ParmVar 0x232e341b918 'val' 'const double &'
| |   `-BinaryOperator 0x232e38753e0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38753c0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38753a8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3875388 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3874308 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x232e341bd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x232e341bc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x232e3879620 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3878418 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3878400 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3878390 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3875448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e38793b0 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3878438 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x232e38792c8 <col:20> 'Storage<alt::String> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e38792a0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x232e3879468 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3879420 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3879400 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e38793e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e38793c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x232e3879450 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3879570 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x232e3879558 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e3879510 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x232e3158298 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x232e38794c0 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x232e3878788
| |   | | `-ImplicitCastExpr 0x232e38794a8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3879488 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x232e38794f0 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x232e341bc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x232e3879600 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38795e0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e38795c8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e38795a8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3878438 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x232e341c0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x232e341c018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x232e3890e70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e388fbd0 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e388fbb8 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e388fb48 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3879668 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3890c00 <line:85:4, col:34>
| |   | `-VarDecl 0x232e388fbf0 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x232e3890b18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3890af0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x232e3890cb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3890c70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3890c50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3890c38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3890c18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x232e3890ca0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3890dc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x232e3890da8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e3890d60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x232e3424218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x232e3890d10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x232e388ff48
| |   | | `-ImplicitCastExpr 0x232e3890cf8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3890cd8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x232e3890d40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e341c018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x232e3890e50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e3890e30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3890e18 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3890df8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e388fbf0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x232e341c458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x232e341c398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x232e38991f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3896518 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3896500 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3896490 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3892b98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3897f90 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3896538 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x232e3897ea8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3897e80 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x232e3898048 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3898000 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3897fe0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3897fc8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3897fa8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x232e3898030 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x232e3899140 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x232e3899128 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x232e38990d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x232e34e9498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x232e38980a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x232e3896888
| |   | | `-ImplicitCastExpr 0x232e3898088 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3898068 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x232e38980d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e341c398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x232e38991d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e38991b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3899198 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3899178 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3896538 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x232e341c7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x232e341c718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x232e3a1c790 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x232e3a1b678 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x232e3a1b660 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3a1b5f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a178a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x232e3a1c580 <line:85:4, col:34>
| |   | `-VarDecl 0x232e3a1b698 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x232e3a1c490 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x232e3a1c468 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x232e3a1c638 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x232e3a1c5f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
| |   | | `-ImplicitCastExpr 0x232e3a1c5d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x232e3a1c5b8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x232e3a1c598 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x232e3a1c620 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
| |   |-BinaryOperator 0x232e3a1c6f8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x232e3a1c690 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x232e3a1b9e8
| |   | | `-ImplicitCastExpr 0x232e3a1c678 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x232e3a1c658 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x232e3a1c6e0 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x232e3a1c6c0 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x232e341c718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x232e3a1c770 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |     | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x232e3a1c750 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x232e3a1c738 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a1c718 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x232e3a1b698 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x232e341cb58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x232e341ca98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x232e3a230e0 <line:83:3, line:91:3>
|     |-BinaryOperator 0x232e3a219c8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x232e3861c70 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|     | | `-CXXThisExpr 0x232e3861c60 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x232e3a219b0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x232e3a21940 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a1c7d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x232e3a22cf0 <line:85:4, col:34>
|     | `-VarDecl 0x232e3a219e8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x232e3a22c08 <col:20> 'Storage<alt::MValue::Function> *' Function 0x232e1e60d98 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x232e3a22be0 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x232e3a22da8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x232e3a22d60 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|     | | `-ImplicitCastExpr 0x232e3a22d40 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x232e3a22d28 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x232e3a22d08 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x232e3a22d90 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x232e3861fe0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x232e3a23030 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x232e3a23018 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x232e3a22eb0 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x232e3a222b8 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x232e3a22e00 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x232e3a21d38
|     | | `-ImplicitCastExpr 0x232e3a22de8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x232e3a22dc8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x232e3a22e30 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x232e341ca98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x232e3a230c0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x232e38620e0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|       | `-CXXThisExpr 0x232e38620d0 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x232e3a230a0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x232e3a23088 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x232e3a23068 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3a219e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x232e33a5148 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x232e33ab430 <line:94:3, line:97:3>
|   |-BinaryOperator 0x232e33ab388 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x232e33ab280 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | | `-CXXThisExpr 0x232e33ab270 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x232e33ab300 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x232e339ebe0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x232e33ab410 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x232e33ab3b8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     | `-CXXThisExpr 0x232e33ab3a8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x232e33ab3f8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x232e33ab3e8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x232e33a52e8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e33a5228 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e33ab708 <line:100:3, line:106:3>
|   |-BinaryOperator 0x232e33ab4f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x232e33ab460 <col:4> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | | `-CXXThisExpr 0x232e33ab450 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x232e33ab4e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x232e33ab4b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x232e33a5460
|   |     `-DeclRefExpr 0x232e33ab490 <col:11> 'const alt::MValue' lvalue ParmVar 0x232e33a5228 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x232e33ab5c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x232e33ab528 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   | | `-CXXThisExpr 0x232e33ab518 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x232e33ab5a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x232e33ab578 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x232e33a54c8
|   |     `-DeclRefExpr 0x232e33ab558 <col:14> 'const alt::MValue' lvalue ParmVar 0x232e33a5228 'that' 'const alt::MValue &'
|   `-IfStmt 0x232e33ab6f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x232e33ab638 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x232e33ab620 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x232e33ab5f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     |     `-CXXThisExpr 0x232e33ab5e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x232e33ab6d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x232e33ab6a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|         `-ImplicitCastExpr 0x232e33ab690 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x232e33ab660 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|             `-CXXThisExpr 0x232e33ab650 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x232e33a53b0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x232e33aba20 <line:109:3, line:117:3>
|   |-IfStmt 0x232e33ab7c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x232e33ab7a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x232e33ab788 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x232e33ab770 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x232e33ab740 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   | |       `-CXXThisExpr 0x232e33ab730 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x232e33ab7b8 <line:111:5>
|   |-UnaryOperator 0x232e33ab868 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x232e33ab838 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|   |   `-ImplicitCastExpr 0x232e33ab820 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x232e33ab7f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|   |       `-CXXThisExpr 0x232e33ab7e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x232e33aba08 <line:115:4, line:116:12>
|     |-BinaryOperator 0x232e33ab960 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x232e33ab930 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x232e33ab8d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x232e33a4568
|     | |   `-ImplicitCastExpr 0x232e33ab8c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x232e33ab890 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     | |       `-CXXThisExpr 0x232e33ab880 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x232e33ab948 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x232e33ab908 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x232e33ab9e8 <line:116:5, col:12> 'void' Function 0x232e1e65d28 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x232e33ab9c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x232e33ab990 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|           `-CXXThisExpr 0x232e33ab980 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x232e33a5460 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x232e33a54c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x232e33a5520 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e33a5588 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x232e33abaa8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x232e33aba88 <col:14, col:24> 'void'
|     `-MemberExpr 0x232e33aba58 <col:14> '<bound member function type>' ->CreateNil 0x232e33a5148
|       `-CXXThisExpr 0x232e33aba48 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x232e33a5728 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x232e33a5668 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x232e341b0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341b088 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341b040 <col:29> '<bound member function type>' ->Create 0x232e33abd28
|     | `-CXXThisExpr 0x232e33abe28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e33abb28 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x232e33a5668 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x232e33a5938 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x232e33a5848 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x232e341b438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x232e341b410 <col:28, col:38> 'void'
|     |-MemberExpr 0x232e341b3c8 <col:28> '<bound member function type>' ->Create 0x232e341b2b8
|     | `-CXXThisExpr 0x232e341b3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x232e33a5848 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x232e33a5b18 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x232e33a5a28 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x232e341b7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341b7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341b758 <col:29> '<bound member function type>' ->Create 0x232e341b648
|     | `-CXXThisExpr 0x232e341b748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x232e33a5a28 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x232e33a5cf8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x232e33a5c08 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x232e341bb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341bb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341bae8 <col:31> '<bound member function type>' ->Create 0x232e341b9d8
|     | `-CXXThisExpr 0x232e341bad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341b848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x232e33a5c08 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x232e33a5ea8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x232e33a5de8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x232e341bed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341beb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341be68 <col:31> '<bound member function type>' ->Create 0x232e341bd58
|     | `-CXXThisExpr 0x232e341be58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341bbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x232e33a5de8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x232e33a60b8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x232e33a5fc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x232e341c258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341c230 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341c1e8 <col:29> '<bound member function type>' ->Create 0x232e341c0d8
|     | `-CXXThisExpr 0x232e341c1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341bf58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x232e33a5fc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x232e33a62c8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x232e33a61d8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x232e341c5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x232e341c5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x232e341c568 <col:29> '<bound member function type>' ->Create 0x232e341c458
|     | `-CXXThisExpr 0x232e341c558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x232e33a61d8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x232e33a64d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x232e33a63e8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x232e341c958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x232e341c930 <col:31, col:41> 'void'
|     |-MemberExpr 0x232e341c8e8 <col:31> '<bound member function type>' ->Create 0x232e341c7d8
|     | `-CXXThisExpr 0x232e341c8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x232e33a63e8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x232e33a6688 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x232e33a65c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x232e341ccd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x232e341ccb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x232e341cc68 <col:33> '<bound member function type>' ->Create 0x232e341cb58
|     | `-CXXThisExpr 0x232e341cc58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341c9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x232e33a65c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x232e33a6838 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x232e33a6770 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x232e341cfb0 <col:23, col:43>
|   `-ExprWithCleanups 0x232e341cf98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x232e341cf28 <col:25, col:40> 'void'
|       |-MemberExpr 0x232e341cea0 <col:25, col:35> '<bound member function type>' ->Create 0x232e341b2b8
|       | `-CXXThisExpr 0x232e341ce90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341cf80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x232e341cf68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x232e341cf50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x232e341cda8 <col:37> 'int32_t':'int' lvalue ParmVar 0x232e33a6770 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x232e33a69b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x232e33a68f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x232e341d288 <col:24, col:45>
|   `-ExprWithCleanups 0x232e341d270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x232e341d200 <col:26, col:42> 'void'
|       |-MemberExpr 0x232e341d178 <col:26, col:37> '<bound member function type>' ->Create 0x232e341b648
|       | `-CXXThisExpr 0x232e341d168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x232e341d240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x232e341d228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x232e341d080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x232e33a68f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x232e33a6b10 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x232e33a6a80 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x232e341d600 <col:27, col:50>
|   `-ExprWithCleanups 0x232e341d5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x232e341d508 <col:29, col:47> 'void'
|       |-MemberExpr 0x232e341d480 <col:29, col:42> '<bound member function type>' ->Create 0x232e341bd58
|       | `-CXXThisExpr 0x232e341d470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x232e341d5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x232e341d5a8)
|           `-CXXConstructExpr 0x232e341d578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x232e341d560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x232e341d358 <col:44> 'const char *' lvalue ParmVar 0x232e33a6a80 'val' 'const char *'
|-CXXConstructorDecl 0x232e33a6d38 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x232e33a6c70 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x232e341d990 <col:34, col:57>
|   `-ExprWithCleanups 0x232e341d978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x232e341d880 <col:36, col:54> 'void'
|       |-MemberExpr 0x232e341d7f8 <col:36, col:49> '<bound member function type>' ->Create 0x232e341bd58
|       | `-CXXThisExpr 0x232e341d7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x232e341d960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x232e341d948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x232e341d928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x232e341d920)
|             `-ImplicitCastExpr 0x232e341d908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x232e341d8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x232e341d6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e33a6c70 'val' 'const std::string &'
|-CXXConstructorDecl 0x232e33a6e88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x232e33a6df8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e341da30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x232e341da08 <col:32, col:41> 'void'
|     |-MemberExpr 0x232e341d9b8 <col:32> '<bound member function type>' ->Copy 0x232e33a52e8
|     | `-CXXThisExpr 0x232e341d9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x232e341d9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x232e33a6df8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x232e33a7038 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x232e33a6f48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x232e341db68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x232e341da88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x232e341da58 <col:4> '<bound member function type>' ->Destroy 0x232e33a53b0
|   |   `-CXXThisExpr 0x232e341da48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x232e341db08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x232e341dab8 <col:4> '<bound member function type>' ->Copy 0x232e33a52e8
|   | | `-CXXThisExpr 0x232e341daa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x232e341dae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x232e33a6f48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x232e341db58 <line:146:4, col:12>
|     `-UnaryOperator 0x232e341db40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e341db30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x232e33a7128 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x232e341dc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x232e341dc50 <line:151:4, col:22>
|     `-BinaryOperator 0x232e341dc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x232e341dbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x232e341dba0 <col:11> '<bound member function type>' ->ToInt 0x232e33a7218
|       |   `-CXXThisExpr 0x232e341db90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x232e341dc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x232e341dbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x232e33a7218 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x232e341f0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x232e341dcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x232e341dcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341dc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341dc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e341f048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x232e341dd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x232e341dd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341dd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341e218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341e200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341e1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341e1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x232e341e140 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |           `-CXXThisExpr 0x232e341e130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341e2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x232e341e290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e341e260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341e6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x232e341e6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x232e341e688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x232e341e600 <col:12, col:19> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |         `-CXXThisExpr 0x232e341e5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341e758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x232e341e738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e341e708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341eb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341eb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341eb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341eb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x232e341eaa0 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e998
|   |   |           `-CXXThisExpr 0x232e341ea90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e341ec10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x232e341ebf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x232e341ebc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e341f038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x232e341f020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x232e341f008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x232e341efe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x232e341ef60 <col:12, col:22> '<bound member function type>' ->Get 0x232e341ee58
|   |               `-CXXThisExpr 0x232e341ef50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e341f0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x232e341f0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x232e341f078 <col:11> 'int' 0
|-CXXMethodDecl 0x232e33a7308 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x232e341fd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x232e341f140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x232e341f128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341f0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341f0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e341fd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x232e341f1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x232e341f1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341f198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341f440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341f428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341f410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341f3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x232e341f368 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |           `-CXXThisExpr 0x232e341f358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341f4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x232e341f4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e341f488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341f730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x232e341f718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x232e341f700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x232e341f6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x232e341f658 <col:12, col:19> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |           `-CXXThisExpr 0x232e341f648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e341f7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x232e341f7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e341f778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e341fa08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x232e341f9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x232e341f9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x232e341f948 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e998
|   |   |         `-CXXThisExpr 0x232e341f938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e341faa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x232e341fa80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x232e341fa50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e341fcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x232e341fce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x232e341fcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x232e341fca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x232e341fc20 <col:12, col:22> '<bound member function type>' ->Get 0x232e341ee58
|   |               `-CXXThisExpr 0x232e341fc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e341fd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x232e341fd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x232e341fd38 <col:11> 'int' 0
|-CXXMethodDecl 0x232e33a7428 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x232e3421b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x232e341fe00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x232e341fde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x232e341fdb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|   | |   `-CXXThisExpr 0x232e341fda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x232e3421650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x232e341fea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x232e341fe88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x232e341fe58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec38 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x232e34201e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x232e34201b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x232e3420158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x232e3420110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x232e34200b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x232e3420028 <col:12, col:20> '<bound member function type>' ->Get 0x232e341e038
|   |   |         |     `-CXXThisExpr 0x232e3420018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x232e3420128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x232e34200d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x232e3420140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x232e34200f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x232e3420298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x232e3420278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x232e3420248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ec90 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x232e34206f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e34206d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e34206a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e3420690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e3420678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3420628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3420620)
|   |   |               `-CallExpr 0x232e34205e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e34205c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x232e30995f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x232e3420608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x232e34204c0 <col:27, col:34> '<bound member function type>' ->Get 0x232e341e4f8
|   |   |                       `-CXXThisExpr 0x232e34204b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e34207a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x232e3420780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x232e3420750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ece8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3420c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x232e3420bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e3420bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e3420ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e3420b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e3420b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3420b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3420b20)
|   |   |               `-CallExpr 0x232e3420ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e3420ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x232e309a088 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x232e3420b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x232e34209c8 <col:27, col:35> '<bound member function type>' ->Get 0x232e341e998
|   |   |                       `-CXXThisExpr 0x232e34209b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x232e3420ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x232e3420c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x232e3420c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed40 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x232e3421138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x232e3421120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x232e3421108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x232e34210d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x232e34210c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x232e34210a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x232e3421058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e3421050)
|   |   |               `-CallExpr 0x232e3421010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x232e3420ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x232e3420f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x232e309b298 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x232e3421038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x232e3420f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x232e3420ec8 <col:27, col:37> '<bound member function type>' ->Get 0x232e341ee58
|   |   |                       `-CXXThisExpr 0x232e3420eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x232e34211d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x232e34211b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x232e3421180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x232e339ed98 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x232e3421640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x232e3421610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x232e34215f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x232e34215a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x232e3421520 <col:12, col:22> '<bound member function type>' ->Get 0x232e3421418
|   |               `-CXXThisExpr 0x232e3421510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x232e3421b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x232e3421b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x232e3421b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x232e3421af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x232e3421688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x232e33a7548 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x232e3421be8 <col:24, col:39>
|   `-ReturnStmt 0x232e3421bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e3421bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x232e3421b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x232e33a5460
|         `-CXXThisExpr 0x232e3421b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x232e33aae10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x232e33a75f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x232e33aa410 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x232e33aad70 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x232e33ab018 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x232e33aae68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x232e33aaf78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x232e3a23570 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a232f8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23240 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x232e3a23178 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x232e33a99d8
| |   | | `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |   `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a232e0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a232c8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a232a8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a232a0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a234e0 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23320 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a234b0 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |       `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a23560 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x232e3a23518 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x232e3a234f8 <col:11> 'auto' lvalue Var 0x232e3a23320 '_storage' 'auto'
| |-CXXMethodDecl 0x232e341e038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x232e3a239c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23730 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a236b8 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23688 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23618 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3862198 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a236a0 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23718 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23700 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a236e0 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a236d8)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a23938 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23748 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a23878 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a23860 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a239b8 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a23988 <col:11, col:21> 'bool':'bool' lvalue ->value 0x232e3864098
| |       `-ImplicitCastExpr 0x232e3a23970 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a23950 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x232e3a23748 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x232e341e4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x232e3a23e28 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23b88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23b10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23ae0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23a70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3865168 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a23af8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23b70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23b58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a23b38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a23b30)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a23d98 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a23ba0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a23cd8 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a23cc0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a23e18 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a23de8 <col:11, col:21> 'long long':'long long' lvalue ->value 0x232e386d458
| |       `-ImplicitCastExpr 0x232e3a23dd0 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a23db0 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x232e3a23ba0 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x232e341e998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x232e3a24288 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a23fe8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a23f70 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a23f40 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a23ed0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e386e248 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a23f58 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a23fd0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a23fb8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a23f98 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a23f90)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a241f8 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a24000 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a24138 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a24120 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a24278 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a24248 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x232e3870a88
| |       `-ImplicitCastExpr 0x232e3a24230 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24210 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x232e3a24000 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x232e341ee58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x232e3a246e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a24448 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a243d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a243a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a24330 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3871878 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a243b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a24430 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a24418 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a243f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a243f0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a24658 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a24460 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a24598 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a24580 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a246d8 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a246a8 <col:11, col:21> 'double':'double' lvalue ->value 0x232e3874658
| |       `-ImplicitCastExpr 0x232e3a24690 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24670 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x232e3a24460 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x232e3421418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x232e3a24b48 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a248a8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a24830 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a24800 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a24790 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3875448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a24818 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a24890 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a24878 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a24858 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a24850)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a24ab8 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a248c0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a249f8 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a249e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a24b38 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a24b08 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x232e3878788
| |       `-ImplicitCastExpr 0x232e3a24af0 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a24ad0 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x232e3a248c0 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x232e34f19a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x232e3a25998 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a256f8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a25680 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a25650 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a255e0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3879668 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a25668 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a256e0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a256c8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a256a8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a256a0)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a25908 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a25710 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a25848 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a25830 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a25988 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a25958 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x232e388ff48
| |       `-ImplicitCastExpr 0x232e3a25940 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a25920 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x232e3a25710 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x232e34f3d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x232e3a3dd28 <line:217:3, line:223:3>
| |   |-IfStmt 0x232e3a3da88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x232e3a3da10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x232e3a3d9e0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x232e3a3d970 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3892b98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x232e3a3d9f8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
| |   | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x232e3a3da70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x232e3a3da58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x232e3a3da38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3a3da30)
| |   |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x232e3a3dc98 <line:221:4, col:53>
| |   | `-VarDecl 0x232e3a3daa0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x232e3a3dbd8 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x232e3a3dbc0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
| |   |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x232e3a3dd18 <line:222:4, col:21>
| |     `-MemberExpr 0x232e3a3dce8 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x232e3896888
| |       `-ImplicitCastExpr 0x232e3a3dcd0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x232e3a3dcb0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x232e3a3daa0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x232e350c2e8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x232e3abbaf8 <line:217:3, line:223:3>
|     |-IfStmt 0x232e3abb858 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x232e3abb7e0 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x232e3abb7b0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x232e3abb740 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x232e3a1c7d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x232e3abb7c8 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x232e3a23210 <col:30> 'alt::MValue::Type' lvalue ->type 0x232e33a5460
|     | |     `-CXXThisExpr 0x232e3a23200 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x232e3abb840 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x232e3abb828 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x232e3abb808 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x232e3abb800)
|     |       `-CXXTemporaryObjectExpr 0x232e3a23270 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x232e3abba68 <line:221:4, col:53>
|     | `-VarDecl 0x232e3abb870 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x232e3abb9a8 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x232e3abb990 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x232e3a23420 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x232e33a54c8
|     |         `-CXXThisExpr 0x232e3a23410 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x232e3abbae8 <line:222:4, col:21>
|       `-MemberExpr 0x232e3abbab8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x232e3a21d38
|         `-ImplicitCastExpr 0x232e3abbaa0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x232e3abba80 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x232e3abb870 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x232e33ab0b8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x232e3421c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x232e3421c40 <col:15, col:23> 'void'
      `-MemberExpr 0x232e3421c10 <col:15> '<bound member function type>' ->Destroy 0x232e33a53b0
        `-CXXThisExpr 0x232e3421c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_CPlayerConnectEvent_Cancel1
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_CPlayerConnectEvent_Cancel1
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_CPlayerConnectEvent_Cancel1
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPackage_FileExists
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPackage_FileExists
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPackage_FileExists
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPackage_OpenFile
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPackage_OpenFile
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPackage_OpenFile
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IClient_LogInfo
ElaboratedType 0x232e35e43c0 'alt::StringView' sugar
`-RecordType 0x232e316b870 'class alt::StringView'
  `-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IClient_LogInfo
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IClient_LogInfo
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IClient_RegisterScriptRuntime
ElaboratedType 0x232e35e43c0 'alt::StringView' sugar
`-RecordType 0x232e316b870 'class alt::StringView'
  `-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IClient_RegisterScriptRuntime
RecordType 0x232e316b870 'class alt::StringView'
`-CXXRecord 0x232e316b7e0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IClient_RegisterScriptRuntime
CXXRecordDecl 0x232e316b7e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x232e316b8f8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x232e316b9a0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x232e316ba08 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x232e316ba60 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x232e316bc00 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x232e316baa8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x232e316bb20 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316d558 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d518 <col:9> 'const char *' lvalue ParmVar 0x232e316baa8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316d5d8 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x232e316d598 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316bb20 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316d628 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x232e316bcd8 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316da38 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316da08 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x232e316d638 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x232e316da20 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x232e316d648 <col:24> 'int' 0
| `-CompoundStmt 0x232e316db80 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x232e316be28 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x232e316bd98 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316dce0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x232e316dcc8 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x232e316db90 <col:15> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| |   `-CallExpr 0x232e316dc50 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x232e316dc38 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x232e316dc18 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x232e1f9fca0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x232e316dc78 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x232e316dbf8 <col:28> 'const char *' lvalue ParmVar 0x232e316bd98 '_str' 'const char *'
| `-CompoundStmt 0x232e316dd48 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x232e316c1b0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x232e316bee8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x232e316c108 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x232e316c048 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x232e35131b8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x232e35130c8 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x232e316c3a8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x232e316c2e0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316ded0 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316de08 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x232e316ddd8 <col:15, col:20> '<bound member function type>' .data 0x232e2a7a2f8
| |   |   `-DeclRefExpr 0x232e316dd58 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x232e316de78 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316de48 <col:28, col:33> '<bound member function type>' .size 0x232e2a7a668
| |       `-DeclRefExpr 0x232e316de28 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x232e316c2e0 '_str' 'const std::string &'
| `-CompoundStmt 0x232e316df38 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x232e316c4f8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x232e316c468 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e0c0 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316dff8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x232e316dfc8 <col:15, col:20> '<bound member function type>' .GetData 0x232e31585a8
| |   |   `-DeclRefExpr 0x232e316df48 <col:15> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x232e316e068 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x232e316e038 <col:31, col:36> '<bound member function type>' .GetSize 0x232e3158788
| |       `-DeclRefExpr 0x232e316e018 <col:31> 'const alt::String' lvalue ParmVar 0x232e316c468 '_str' 'const alt::String &'
| `-CompoundStmt 0x232e316e128 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x232e316c738 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x232e316c648 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x232e316e3f0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x232e316e258 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x232e316e158 <col:15, col:20> '<bound member function type>' .data 0x232e2bf7790
| |   |   `-ImplicitCastExpr 0x232e316e278 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x232e316e138 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x232e316e380 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x232e316e2b0 <col:28, col:33> '<bound member function type>' .size 0x232e2bf7498
| |       `-ImplicitCastExpr 0x232e316e3a0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x232e316e290 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x232e316c648 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x232e316e458 <line:60:3, line:62:3>
|-CXXMethodDecl 0x232e316c838 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x232e316e530 <col:24, col:44>
|   `-ReturnStmt 0x232e316e520 <col:26, col:41>
|     `-BinaryOperator 0x232e316e500 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x232e316e4d0 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x232e316e478 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       |   `-CXXThisExpr 0x232e316e468 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x232e316e4e8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x232e316e4a8 <col:41> 'int' 0
|-CXXMethodDecl 0x232e316c900 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x232e316e5b0 <col:31, col:46>
|   `-ReturnStmt 0x232e316e5a0 <col:33, col:40>
|     `-ImplicitCastExpr 0x232e316e588 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316e558 <col:40> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316e548 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316c9c0 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x232e316e630 <col:24, col:39>
|   `-ReturnStmt 0x232e316e620 <col:26, col:33>
|     `-ImplicitCastExpr 0x232e316e608 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x232e316e5d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         `-CXXThisExpr 0x232e316e5c8 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316cb00 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x232e316ca70 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x232e316e720 <col:35, col:55>
|   `-ReturnStmt 0x232e316e710 <col:37, col:52>
|     `-ImplicitCastExpr 0x232e316e6f8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x232e316e6d8 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x232e316e6a8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x232e316e658 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|         |   `-CXXThisExpr 0x232e316e648 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x232e316e6c0 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x232e316e688 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x232e316ca70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x232e316cc78 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cbb8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eb60 <col:42, col:108>
|   `-ReturnStmt 0x232e316eb50 <col:44, col:105>
|     `-BinaryOperator 0x232e316ea60 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x232e316e7f8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x232e316e7c8 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x232e316e748 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|       | |   `-CXXThisExpr 0x232e316e738 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x232e316e7e0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x232e316e798 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x232e316ba08
|       |     `-DeclRefExpr 0x232e316e778 <col:59> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|       `-BinaryOperator 0x232e316ea40 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x232e316e968 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x232e316e950 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x232e316e930 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x232e1f2f398 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x232e316e9b8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9a0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e870 <col:79> 'const char *const' lvalue ->data 0x232e316b9a0
|         | |     `-CXXThisExpr 0x232e316e860 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x232e316e9e8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x232e316e9d0 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x232e316e8c0 <col:85, col:90> 'const char *' lvalue .data 0x232e316b9a0
|         | |     `-DeclRefExpr 0x232e316e8a0 <col:85> 'alt::StringView' lvalue ParmVar 0x232e316cbb8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x232e316ea00 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x232e316e900 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|         |     `-CXXThisExpr 0x232e316e8f0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x232e316ea18 <col:105> 'int' 0
|-CXXMethodDecl 0x232e316cdc0 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x232e316cd30 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x232e316eee0 <col:42, col:69>
|   `-ReturnStmt 0x232e316eed0 <col:44, col:66>
|     `-UnaryOperator 0x232e316eeb8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x232e316ee98 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x232e316ee60 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x232e316ee48 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x232e316ee00 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x232e316cc78 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x232e316eb88 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x232e316eb78 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x232e316edd0 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x232e316ec18 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316eba0 <col:62> 'alt::StringView' lvalue ParmVar 0x232e316cd30 'that' 'alt::StringView'
|-CXXMethodDecl 0x232e316cef8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x232e316fb50 <col:32, col:66>
|   `-ReturnStmt 0x232e316fb40 <col:34, col:63>
|     `-ExprWithCleanups 0x232e316fb28 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x232e316fb08 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x232e316fb00)
|         `-CXXTemporaryObjectExpr 0x232e316fac0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x232e316fa90 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316ef50 <col:53> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316ef40 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316faa8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316ef90 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316ef80 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x232e316d008 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x232e316fd40 <col:27, col:58>
|   `-ReturnStmt 0x232e316fd30 <col:29, col:55>
|     `-ExprWithCleanups 0x232e316fd18 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x232e316fcf8 <col:36, col:55> 'alt::String' (CXXTemporary 0x232e316fcf0)
|         `-CXXTemporaryObjectExpr 0x232e316fcb0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x232e316fc80 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x232e316fb88 <col:44> 'const char *const' lvalue ->data 0x232e316b9a0
|           |   `-CXXThisExpr 0x232e316fb78 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x232e316fc98 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x232e316fbc8 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x232e316ba08
|               `-CXXThisExpr 0x232e316fbb8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x232e316d0e0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x232e316fdc0 <col:28, col:43>
|   `-ReturnStmt 0x232e316fdb0 <col:30, col:37>
|     `-ImplicitCastExpr 0x232e316fd98 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x232e316fd68 <col:37> 'const char *const' lvalue ->data 0x232e316b9a0
|         `-CXXThisExpr 0x232e316fd58 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x232e316d4c0 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x232e316d400 parent 0x232e316b770 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x232e316d260 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x232e316d2d8 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x232e3176c60 <line:79:3, line:81:3>
|     `-ReturnStmt 0x232e3176c50 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x232e3176c18 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x232e3176c00 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x232e3176be0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x232e2e95b08 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x232e316fdd8 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x232e316d260 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x232e316fe48 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x232e316fe18 <col:21, col:26> '<bound member function type>' .CStr 0x232e316d0e0
|             `-ImplicitCastExpr 0x232e316fe68 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x232e316fdf8 <col:21> 'alt::StringView' lvalue ParmVar 0x232e316d2d8 'view' 'alt::StringView'
|-CXXConstructorDecl 0x232e316d6d8 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e316d7e8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316b9a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x232e316ecc8 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x232e316ec80 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
| |     `-DeclRefExpr 0x232e316ec60 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x232e316ba08 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x232e316ed70 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x232e316ed28 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
| |     `-DeclRefExpr 0x232e316ed08 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e316d7e8 '' 'const alt::StringView &'
| `-CompoundStmt 0x232e316edc0 <col:8>
|-CXXConstructorDecl 0x232e316d888 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e316d888
| `-ParmVarDecl 0x232e316d998 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x232e316daa0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x232e35c5318 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x232e35c5428 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x232e3aca3d8 <col:8>
|   |-BinaryOperator 0x232e3aca2b8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x232e3aca270 <col:8> 'const char *' lvalue ->data 0x232e316b9a0
|   | | `-CXXThisExpr 0x232e3aca260 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca2a0 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca230 <col:8> 'const char *const' lvalue .data 0x232e316b9a0
|   |     `-DeclRefExpr 0x232e3aca210 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   |-BinaryOperator 0x232e3aca380 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x232e3aca338 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x232e316ba08
|   | | `-CXXThisExpr 0x232e3aca328 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x232e3aca368 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x232e3aca2f8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x232e316ba08
|   |     `-DeclRefExpr 0x232e3aca2d8 <col:8> 'const alt::StringView' lvalue ParmVar 0x232e35c5428 '' 'const alt::StringView &'
|   `-ReturnStmt 0x232e3aca3c8 <col:8>
|     `-UnaryOperator 0x232e3aca3b0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x232e3aca3a0 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x232e35c5498 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x232e35c5498
  `-ParmVarDecl 0x232e35c55a8 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

