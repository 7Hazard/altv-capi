
/**
 * THIS HEADER IS AUTOGENERATED
 * Jul  2 2019 00:12:31
 * 
 * Source implementation for alt:V C API
 */

#include "cpp-sdk/SDK.h"

#ifdef CAPI_DLL
#ifdef _WIN32
#define CAPI CAPIEXTERN __declspec(dllexport)
#endif // _WIN32
#else
#define CAPI CAPIEXTERN
#endif // CAPI_DLL
#include "altv-capi.hpp"

using namespace alt;

CAPI void alt_VectorLayoutfloat4_free(struct alt_VectorLayoutfloat4* ptr)
{
    delete ptr;
}

CAPI void alt_Vectorfloat4VectorLayoutfloat4_free(struct alt_Vectorfloat4VectorLayoutfloat4* ptr)
{
    delete ptr;
}

CAPI float alt_Vectorfloat4VectorLayoutfloat4_LengthSqr(struct alt_Vectorfloat4VectorLayoutfloat4* _instance)
{
    return (float)((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->LengthSqr();
}

CAPI float alt_Vectorfloat4VectorLayoutfloat4_Length(struct alt_Vectorfloat4VectorLayoutfloat4* _instance)
{
    return (float)((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->Length();
}

CAPI void alt_PointLayout_free(struct alt_PointLayout* ptr)
{
    delete ptr;
}

CAPI void alt_PointPaddedLayout_free(struct alt_PointPaddedLayout* ptr)
{
    delete ptr;
}

CAPI void alt_RotationLayout_free(struct alt_RotationLayout* ptr)
{
    delete ptr;
}

CAPI void alt_RotationLayout_Normalize(struct alt_RotationLayout* _instance)
{
    return (void)((alt::RotationLayout *)_instance)->Normalize();
}

CAPI void alt_RotationPaddedLayout_free(struct alt_RotationPaddedLayout* ptr)
{
    delete ptr;
}

CAPI void alt_RotationPaddedLayout_Normalize(struct alt_RotationPaddedLayout* _instance)
{
    return (void)((alt::RotationLayout *)_instance)->Normalize();
}

CAPI void alt_ViewMatrixLayout_free(struct alt_ViewMatrixLayout* ptr)
{
    delete ptr;
}

CAPI void alt_String_free(struct alt_String* ptr)
{
    delete ptr;
}

CAPI _Bool alt_String_IsEmpty(struct alt_String* _instance)
{
    return (_Bool)((alt::String *)_instance)->IsEmpty();
}

CAPI const char * alt_String_GetData(struct alt_String* _instance)
{
    return (const char *)((alt::String *)_instance)->GetData();
}

CAPI char * alt_String_GetData1(struct alt_String* _instance)
{
    return (char *)((alt::String *)_instance)->GetData();
}

CAPI unsigned long long alt_String_GetSize(struct alt_String* _instance)
{
    return (unsigned long long)((alt::String *)_instance)->GetSize();
}

CAPI const char * alt_String_CStr(struct alt_String* _instance)
{
    return (const char *)((alt::String *)_instance)->CStr();
}

CAPI void alt_StringView_free(struct alt_StringView* ptr)
{
    delete ptr;
}

CAPI _Bool alt_StringView_IsEmpty(struct alt_StringView* _instance)
{
    return (_Bool)((alt::StringView *)_instance)->IsEmpty();
}

CAPI const char * alt_StringView_GetData(struct alt_StringView* _instance)
{
    return (const char *)((alt::StringView *)_instance)->GetData();
}

CAPI unsigned long long alt_StringView_GetSize(struct alt_StringView* _instance)
{
    return (unsigned long long)((alt::StringView *)_instance)->GetSize();
}

CAPI const char * alt_StringView_CStr(struct alt_StringView* _instance)
{
    return (const char *)((alt::StringView *)_instance)->CStr();
}

CAPI void alt_RGBA_free(struct alt_RGBA* ptr)
{
    delete ptr;
}

CAPI void alt_ArrayMValue_free(struct alt_ArrayMValue* ptr)
{
    delete ptr;
}

CAPI void alt_ArrayMValue_Push(struct alt_ArrayMValue* _instance, struct alt_MValue* el)
{
    return (void)((alt::Array<alt::MValue> *)_instance)->Push((const class alt::MValue &)el);
}

CAPI unsigned long long alt_ArrayMValue_GetSize(struct alt_ArrayMValue* _instance)
{
    return (unsigned long long)((alt::Array<alt::MValue> *)_instance)->GetSize();
}

CAPI unsigned long long alt_ArrayMValue_GetCapacity(struct alt_ArrayMValue* _instance)
{
    return (unsigned long long)((alt::Array<alt::MValue> *)_instance)->GetCapacity();
}

CAPI struct alt_MValue* alt_ArrayMValue_begin(struct alt_ArrayMValue* _instance)
{
    return (struct alt_MValue*)((alt::Array<alt::MValue> *)_instance)->begin();
}

CAPI struct alt_MValue* alt_ArrayMValue_begin1(struct alt_ArrayMValue* _instance)
{
    return (struct alt_MValue*)((alt::Array<alt::MValue> *)_instance)->begin();
}

CAPI struct alt_MValue* alt_ArrayMValue_end(struct alt_ArrayMValue* _instance)
{
    return (struct alt_MValue*)((alt::Array<alt::MValue> *)_instance)->end();
}

CAPI struct alt_MValue* alt_ArrayMValue_end1(struct alt_ArrayMValue* _instance)
{
    return (struct alt_MValue*)((alt::Array<alt::MValue> *)_instance)->end();
}

CAPI void alt_ArrayString_free(struct alt_ArrayString* ptr)
{
    delete ptr;
}

CAPI void alt_ArrayString_Push(struct alt_ArrayString* _instance, struct alt_String* el)
{
    return (void)((alt::Array<alt::String> *)_instance)->Push((const class alt::String &)el);
}

CAPI unsigned long long alt_ArrayString_GetSize(struct alt_ArrayString* _instance)
{
    return (unsigned long long)((alt::Array<alt::String> *)_instance)->GetSize();
}

CAPI unsigned long long alt_ArrayString_GetCapacity(struct alt_ArrayString* _instance)
{
    return (unsigned long long)((alt::Array<alt::String> *)_instance)->GetCapacity();
}

CAPI struct alt_String* alt_ArrayString_begin(struct alt_ArrayString* _instance)
{
    return (struct alt_String*)((alt::Array<alt::String> *)_instance)->begin();
}

CAPI struct alt_String* alt_ArrayString_begin1(struct alt_ArrayString* _instance)
{
    return (struct alt_String*)((alt::Array<alt::String> *)_instance)->begin();
}

CAPI struct alt_String* alt_ArrayString_end(struct alt_ArrayString* _instance)
{
    return (struct alt_String*)((alt::Array<alt::String> *)_instance)->end();
}

CAPI struct alt_String* alt_ArrayString_end1(struct alt_ArrayString* _instance)
{
    return (struct alt_String*)((alt::Array<alt::String> *)_instance)->end();
}

CAPI void alt_ArrayStringView_free(struct alt_ArrayStringView* ptr)
{
    delete ptr;
}

CAPI void alt_ArrayStringView_Push(struct alt_ArrayStringView* _instance, struct alt_StringView* el)
{
    return (void)((alt::Array<alt::StringView> *)_instance)->Push((const class alt::StringView &)el);
}

CAPI unsigned long long alt_ArrayStringView_GetSize(struct alt_ArrayStringView* _instance)
{
    return (unsigned long long)((alt::Array<alt::StringView> *)_instance)->GetSize();
}

CAPI unsigned long long alt_ArrayStringView_GetCapacity(struct alt_ArrayStringView* _instance)
{
    return (unsigned long long)((alt::Array<alt::StringView> *)_instance)->GetCapacity();
}

CAPI struct alt_StringView* alt_ArrayStringView_begin(struct alt_ArrayStringView* _instance)
{
    return (struct alt_StringView*)((alt::Array<alt::StringView> *)_instance)->begin();
}

CAPI struct alt_StringView* alt_ArrayStringView_begin1(struct alt_ArrayStringView* _instance)
{
    return (struct alt_StringView*)((alt::Array<alt::StringView> *)_instance)->begin();
}

CAPI struct alt_StringView* alt_ArrayStringView_end(struct alt_ArrayStringView* _instance)
{
    return (struct alt_StringView*)((alt::Array<alt::StringView> *)_instance)->end();
}

CAPI struct alt_StringView* alt_ArrayStringView_end1(struct alt_ArrayStringView* _instance)
{
    return (struct alt_StringView*)((alt::Array<alt::StringView> *)_instance)->end();
}

CAPI void alt_MValue_free(struct alt_MValue* ptr)
{
    delete ptr;
}

CAPI _Bool alt_MValue_ToBool(struct alt_MValue* _instance)
{
    return (_Bool)((alt::MValue *)_instance)->ToBool();
}

CAPI long long alt_MValue_ToInt(struct alt_MValue* _instance)
{
    return (long long)((alt::MValue *)_instance)->ToInt();
}

CAPI unsigned long long alt_MValue_ToUInt(struct alt_MValue* _instance)
{
    return (unsigned long long)((alt::MValue *)_instance)->ToUInt();
}

CAPI struct alt_String* alt_MValue_ToString(struct alt_MValue* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::MValue *)_instance)->ToString()));
}

CAPI enum alt_MValue_Type alt_MValue_GetType(struct alt_MValue* _instance)
{
    return (enum alt_MValue_Type)((alt::MValue *)_instance)->GetType();
}

CAPI void alt_MValue_Function_free(struct alt_MValue_Function* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_Storage_free(struct alt_MValue_Storage* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_Storage_Bool_free(struct alt_MValue_Storage_Bool* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_Storagelonglong_free(struct alt_MValue_Storagelonglong* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_Storageunsignedlonglong_free(struct alt_MValue_Storageunsignedlonglong* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_Storagedouble_free(struct alt_MValue_Storagedouble* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_StorageString_free(struct alt_MValue_StorageString* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_StorageArrayMValue_free(struct alt_MValue_StorageArrayMValue* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_StorageIBaseObjectPtr_free(struct alt_MValue_StorageIBaseObjectPtr* ptr)
{
    delete ptr;
}

CAPI void alt_MValue_StorageMValue_Function_free(struct alt_MValue_StorageMValue_Function* ptr)
{
    delete ptr;
}

CAPI void alt_MValueList_free(struct alt_MValueList* ptr)
{
    delete ptr;
}

CAPI _Bool alt_MValueList_ToBool(struct alt_MValueList* _instance)
{
    return (_Bool)((alt::MValue *)_instance)->ToBool();
}

CAPI long long alt_MValueList_ToInt(struct alt_MValueList* _instance)
{
    return (long long)((alt::MValue *)_instance)->ToInt();
}

CAPI unsigned long long alt_MValueList_ToUInt(struct alt_MValueList* _instance)
{
    return (unsigned long long)((alt::MValue *)_instance)->ToUInt();
}

CAPI struct alt_String* alt_MValueList_ToString(struct alt_MValueList* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::MValue *)_instance)->ToString()));
}

CAPI enum alt_MValue_Type alt_MValueList_GetType(struct alt_MValueList* _instance)
{
    return (enum alt_MValue_Type)((alt::MValue *)_instance)->GetType();
}

CAPI unsigned long long alt_MValueList_GetSize(struct alt_MValueList* _instance)
{
    return (unsigned long long)((alt::MValueList *)_instance)->GetSize();
}

CAPI void alt_MValueList_Push(struct alt_MValueList* _instance, struct alt_MValue* val)
{
    return (void)((alt::MValueList *)_instance)->Push(*(class alt::MValue*)val);
}

CAPI void alt_MValueDict_free(struct alt_MValueDict* ptr)
{
    delete ptr;
}

CAPI _Bool alt_MValueDict_ToBool(struct alt_MValueDict* _instance)
{
    return (_Bool)((alt::MValue *)_instance)->ToBool();
}

CAPI long long alt_MValueDict_ToInt(struct alt_MValueDict* _instance)
{
    return (long long)((alt::MValue *)_instance)->ToInt();
}

CAPI unsigned long long alt_MValueDict_ToUInt(struct alt_MValueDict* _instance)
{
    return (unsigned long long)((alt::MValue *)_instance)->ToUInt();
}

CAPI struct alt_String* alt_MValueDict_ToString(struct alt_MValueDict* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::MValue *)_instance)->ToString()));
}

CAPI enum alt_MValue_Type alt_MValueDict_GetType(struct alt_MValueDict* _instance)
{
    return (enum alt_MValue_Type)((alt::MValue *)_instance)->GetType();
}

CAPI void alt_IResource_free(struct alt_IResource* ptr)
{
    delete ptr;
}

CAPI enum alt_IResource_State alt_IResource_GetState(struct alt_IResource* _instance)
{
    return (enum alt_IResource_State)((alt::IResource *)_instance)->GetState();
}

CAPI _Bool alt_IResource_IsStarted(struct alt_IResource* _instance)
{
    return (_Bool)((alt::IResource *)_instance)->IsStarted();
}

CAPI void alt_IResource_GetType(struct alt_IResource* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::IResource *)_instance)->GetType();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_IResource_GetName(struct alt_IResource* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::IResource *)_instance)->GetName();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_IResource_GetPath(struct alt_IResource* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::IResource *)_instance)->GetPath();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_IResource_GetMain(struct alt_IResource* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::IResource *)_instance)->GetMain();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI struct alt_IPackage* alt_IResource_GetPackage(struct alt_IResource* _instance)
{
    return (struct alt_IPackage*)((alt::IResource *)_instance)->GetPackage();
}

CAPI struct alt_MValueDict* alt_IResource_GetExports(struct alt_IResource* _instance)
{
    return (struct alt_MValueDict*)(new class alt::MValueDict(((alt::IResource *)_instance)->GetExports()));
}

CAPI _Bool alt_IResource_Instantiate(struct alt_IResource* _instance)
{
    return (_Bool)((alt::IResource *)_instance)->Instantiate();
}

CAPI _Bool alt_IResource_Start(struct alt_IResource* _instance)
{
    return (_Bool)((alt::IResource *)_instance)->Start();
}

CAPI _Bool alt_IResource_Stop(struct alt_IResource* _instance)
{
    return (_Bool)((alt::IResource *)_instance)->Stop();
}

CAPI _Bool alt_IResource_OnEvent(struct alt_IResource* _instance, struct alt_CEvent* ev)
{
    return (_Bool)((alt::IResource *)_instance)->OnEvent((const class alt::CEvent *)ev);
}

CAPI void alt_IResource_OnTick(struct alt_IResource* _instance)
{
    return (void)((alt::IResource *)_instance)->OnTick();
}

CAPI void alt_IResource_OnCreateBaseObject(struct alt_IResource* _instance, struct alt_IBaseObject* object)
{
    return (void)((alt::IResource *)_instance)->OnCreateBaseObject((class alt::IBaseObject *)object);
}

CAPI void alt_IResource_OnRemoveBaseObject(struct alt_IResource* _instance, struct alt_IBaseObject* object)
{
    return (void)((alt::IResource *)_instance)->OnRemoveBaseObject((class alt::IBaseObject *)object);
}

CAPI void alt_IResource_CreationInfo_free(struct alt_IResource_CreationInfo* ptr)
{
    delete ptr;
}

CAPI void alt_MValueFunction_free(struct alt_MValueFunction* ptr)
{
    delete ptr;
}

CAPI _Bool alt_MValueFunction_ToBool(struct alt_MValueFunction* _instance)
{
    return (_Bool)((alt::MValue *)_instance)->ToBool();
}

CAPI long long alt_MValueFunction_ToInt(struct alt_MValueFunction* _instance)
{
    return (long long)((alt::MValue *)_instance)->ToInt();
}

CAPI unsigned long long alt_MValueFunction_ToUInt(struct alt_MValueFunction* _instance)
{
    return (unsigned long long)((alt::MValue *)_instance)->ToUInt();
}

CAPI struct alt_String* alt_MValueFunction_ToString(struct alt_MValueFunction* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::MValue *)_instance)->ToString()));
}

CAPI enum alt_MValue_Type alt_MValueFunction_GetType(struct alt_MValueFunction* _instance)
{
    return (enum alt_MValue_Type)((alt::MValue *)_instance)->GetType();
}

CAPI struct alt_MValueFunction_Invoker* alt_MValueFunction_GetInvoker(struct alt_MValueFunction* _instance)
{
    return (struct alt_MValueFunction_Invoker*)((alt::MValueFunction *)_instance)->GetInvoker();
}

CAPI void alt_MValueFunction_Invoker_free(struct alt_MValueFunction_Invoker* ptr)
{
    delete ptr;
}

CAPI struct alt_MValue* alt_MValueFunction_Invoker_Invoke(struct alt_MValueFunction_Invoker* _instance, struct alt_MValueList* args)
{
    return (struct alt_MValue*)(new class alt::MValue(((alt::MValueFunction::Invoker *)_instance)->Invoke(*(class alt::MValueList*)args)));
}

CAPI void alt_IBaseObject_free(struct alt_IBaseObject* ptr)
{
    delete ptr;
}

CAPI enum alt_IBaseObject_Type alt_IBaseObject_GetType(struct alt_IBaseObject* _instance)
{
    return (enum alt_IBaseObject_Type)((alt::IBaseObject *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IBaseObject_GetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key)
{
    return (struct alt_MValue*)(new class alt::MValue(((alt::IBaseObject *)_instance)->GetMetaData(*(class alt::StringView*)key)));
}

CAPI void alt_IBaseObject_SetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    return (void)((alt::IBaseObject *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IWorldObject_free(struct alt_IWorldObject* ptr)
{
    delete ptr;
}

CAPI enum alt_IBaseObject_Type alt_IWorldObject_GetType(struct alt_IWorldObject* _instance)
{
    return (enum alt_IBaseObject_Type)((alt::IBaseObject *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IWorldObject_GetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key)
{
    return (struct alt_MValue*)(new class alt::MValue(((alt::IBaseObject *)_instance)->GetMetaData(*(class alt::StringView*)key)));
}

CAPI void alt_IWorldObject_SetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    return (void)((alt::IBaseObject *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI struct alt_Vectorfloat3PointLayout* alt_IWorldObject_GetPosition(struct alt_IWorldObject* _instance)
{
    return (struct alt_Vectorfloat3PointLayout*)(new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IWorldObject *)_instance)->GetPosition()));
}

CAPI short alt_IWorldObject_GetDimension(struct alt_IWorldObject* _instance)
{
    return (short)((alt::IWorldObject *)_instance)->GetDimension();
}

CAPI void alt_IEntity_free(struct alt_IEntity* ptr)
{
    delete ptr;
}

CAPI struct alt_Vectorfloat3PointLayout* alt_IEntity_GetPosition(struct alt_IEntity* _instance)
{
    return (struct alt_Vectorfloat3PointLayout*)(new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IWorldObject *)_instance)->GetPosition()));
}

CAPI short alt_IEntity_GetDimension(struct alt_IEntity* _instance)
{
    return (short)((alt::IWorldObject *)_instance)->GetDimension();
}

CAPI unsigned short alt_IEntity_GetID(struct alt_IEntity* _instance)
{
    return (unsigned short)((alt::IEntity *)_instance)->GetID();
}

CAPI unsigned int alt_IEntity_GetModel(struct alt_IEntity* _instance)
{
    return (unsigned int)((alt::IEntity *)_instance)->GetModel();
}

CAPI struct alt_Vectorfloat3RotationLayout* alt_IEntity_GetRotation(struct alt_IEntity* _instance)
{
    return (struct alt_Vectorfloat3RotationLayout*)(new class alt::Vector<float, 3, class alt::RotationLayout>(((alt::IEntity *)_instance)->GetRotation()));
}

CAPI void alt_IEntity_SetRotation(struct alt_IEntity* _instance, struct alt_Vectorfloat3RotationLayout* rot)
{
    return (void)((alt::IEntity *)_instance)->SetRotation(*(class alt::Vector<float, 3, class alt::RotationLayout>*)rot);
}

CAPI struct alt_MValue* alt_IEntity_GetSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key)
{
    return (struct alt_MValue*)(new class alt::MValue(((alt::IEntity *)_instance)->GetSyncedMetaData(*(class alt::StringView*)key)));
}

CAPI void alt_IPlayer_free(struct alt_IPlayer* ptr)
{
    delete ptr;
}

CAPI unsigned short alt_IPlayer_GetID(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IEntity *)_instance)->GetID();
}

CAPI unsigned int alt_IPlayer_GetModel(struct alt_IPlayer* _instance)
{
    return (unsigned int)((alt::IEntity *)_instance)->GetModel();
}

CAPI struct alt_Vectorfloat3RotationLayout* alt_IPlayer_GetRotation(struct alt_IPlayer* _instance)
{
    return (struct alt_Vectorfloat3RotationLayout*)(new class alt::Vector<float, 3, class alt::RotationLayout>(((alt::IEntity *)_instance)->GetRotation()));
}

CAPI void alt_IPlayer_SetRotation(struct alt_IPlayer* _instance, struct alt_Vectorfloat3RotationLayout* rot)
{
    return (void)((alt::IEntity *)_instance)->SetRotation(*(class alt::Vector<float, 3, class alt::RotationLayout>*)rot);
}

CAPI struct alt_MValue* alt_IPlayer_GetSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key)
{
    return (struct alt_MValue*)(new class alt::MValue(((alt::IEntity *)_instance)->GetSyncedMetaData(*(class alt::StringView*)key)));
}

CAPI _Bool alt_IPlayer_IsConnected(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsConnected();
}

CAPI unsigned int alt_IPlayer_GetPing(struct alt_IPlayer* _instance)
{
    return (unsigned int)((alt::IPlayer *)_instance)->GetPing();
}

CAPI void alt_IPlayer_GetIP(struct alt_IPlayer* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::IPlayer *)_instance)->GetIP();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_IPlayer_Spawn(struct alt_IPlayer* _instance, struct alt_Vectorfloat3PointLayout* pos, unsigned int delayMs)
{
    return (void)((alt::IPlayer *)_instance)->Spawn(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos, (unsigned int)delayMs);
}

CAPI void alt_IPlayer_Despawn(struct alt_IPlayer* _instance)
{
    return (void)((alt::IPlayer *)_instance)->Despawn();
}

CAPI void alt_IPlayer_GetName(struct alt_IPlayer* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::IPlayer *)_instance)->GetName();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_IPlayer_SetName(struct alt_IPlayer* _instance, struct alt_StringView* name)
{
    return (void)((alt::IPlayer *)_instance)->SetName(*(class alt::StringView*)name);
}

CAPI unsigned short alt_IPlayer_GetHealth(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetHealth();
}

CAPI void alt_IPlayer_SetHealth(struct alt_IPlayer* _instance, unsigned short health)
{
    return (void)((alt::IPlayer *)_instance)->SetHealth((unsigned short)health);
}

CAPI unsigned short alt_IPlayer_GetMaxHealth(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetMaxHealth();
}

CAPI void alt_IPlayer_SetMaxHealth(struct alt_IPlayer* _instance, unsigned short health)
{
    return (void)((alt::IPlayer *)_instance)->SetMaxHealth((unsigned short)health);
}

CAPI void alt_IPlayer_SetDateTime(struct alt_IPlayer* _instance, int day, int month, int year, int hour, int minute, int second)
{
    return (void)((alt::IPlayer *)_instance)->SetDateTime((int)day, (int)month, (int)year, (int)hour, (int)minute, (int)second);
}

CAPI void alt_IPlayer_SetWeather(struct alt_IPlayer* _instance, unsigned int weather)
{
    return (void)((alt::IPlayer *)_instance)->SetWeather((unsigned int)weather);
}

CAPI void alt_IPlayer_GiveWeapon(struct alt_IPlayer* _instance, unsigned int weapon, int ammo, _Bool selectWeapon)
{
    return (void)((alt::IPlayer *)_instance)->GiveWeapon((unsigned int)weapon, (int)ammo, (_Bool)selectWeapon);
}

CAPI void alt_IPlayer_RemoveWeapon(struct alt_IPlayer* _instance, unsigned int weapon)
{
    return (void)((alt::IPlayer *)_instance)->RemoveWeapon((unsigned int)weapon);
}

CAPI void alt_IPlayer_RemoveAllWeapons(struct alt_IPlayer* _instance)
{
    return (void)((alt::IPlayer *)_instance)->RemoveAllWeapons();
}

CAPI void alt_IPlayer_AddWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component)
{
    return (void)((alt::IPlayer *)_instance)->AddWeaponComponent((unsigned int)weapon, (unsigned int)component);
}

CAPI void alt_IPlayer_RemoveWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component)
{
    return (void)((alt::IPlayer *)_instance)->RemoveWeaponComponent((unsigned int)weapon, (unsigned int)component);
}

CAPI struct alt_Arrayunsigned_int* alt_IPlayer_GetCurrentWeaponComponents(struct alt_IPlayer* _instance)
{
    return (struct alt_Arrayunsigned_int*)(new class alt::Array<unsigned int>(((alt::IPlayer *)_instance)->GetCurrentWeaponComponents()));
}

CAPI void alt_IPlayer_SetWeaponTintIndex(struct alt_IPlayer* _instance, unsigned int weapon, unsigned char tintIndex)
{
    return (void)((alt::IPlayer *)_instance)->SetWeaponTintIndex((unsigned int)weapon, (unsigned char)tintIndex);
}

CAPI unsigned char alt_IPlayer_GetCurrentWeaponTintIndex(struct alt_IPlayer* _instance)
{
    return (unsigned char)((alt::IPlayer *)_instance)->GetCurrentWeaponTintIndex();
}

CAPI unsigned int alt_IPlayer_GetCurrentWeapon(struct alt_IPlayer* _instance)
{
    return (unsigned int)((alt::IPlayer *)_instance)->GetCurrentWeapon();
}

CAPI void alt_IPlayer_SetCurrentWeapon(struct alt_IPlayer* _instance, unsigned int weapon)
{
    return (void)((alt::IPlayer *)_instance)->SetCurrentWeapon((unsigned int)weapon);
}

CAPI _Bool alt_IPlayer_IsDead(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsDead();
}

CAPI _Bool alt_IPlayer_IsJumping(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsJumping();
}

CAPI _Bool alt_IPlayer_IsInRagdoll(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsInRagdoll();
}

CAPI _Bool alt_IPlayer_IsAiming(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsAiming();
}

CAPI _Bool alt_IPlayer_IsShooting(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsShooting();
}

CAPI _Bool alt_IPlayer_IsReloading(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsReloading();
}

CAPI unsigned short alt_IPlayer_GetArmour(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetArmour();
}

CAPI void alt_IPlayer_SetArmour(struct alt_IPlayer* _instance, unsigned short armor)
{
    return (void)((alt::IPlayer *)_instance)->SetArmour((unsigned short)armor);
}

CAPI unsigned short alt_IPlayer_GetMaxArmour(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetMaxArmour();
}

CAPI void alt_IPlayer_SetMaxArmour(struct alt_IPlayer* _instance, unsigned short armor)
{
    return (void)((alt::IPlayer *)_instance)->SetMaxArmour((unsigned short)armor);
}

CAPI float alt_IPlayer_GetMoveSpeed(struct alt_IPlayer* _instance)
{
    return (float)((alt::IPlayer *)_instance)->GetMoveSpeed();
}

CAPI unsigned int alt_IPlayer_GetWeapon(struct alt_IPlayer* _instance)
{
    return (unsigned int)((alt::IPlayer *)_instance)->GetWeapon();
}

CAPI unsigned short alt_IPlayer_GetAmmo(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetAmmo();
}

CAPI struct alt_Vectorfloat3PointLayout* alt_IPlayer_GetAimPos(struct alt_IPlayer* _instance)
{
    return (struct alt_Vectorfloat3PointLayout*)(new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IPlayer *)_instance)->GetAimPos()));
}

CAPI struct alt_Vectorfloat3RotationLayout* alt_IPlayer_GetHeadRotation(struct alt_IPlayer* _instance)
{
    return (struct alt_Vectorfloat3RotationLayout*)(new class alt::Vector<float, 3, class alt::RotationLayout>(((alt::IPlayer *)_instance)->GetHeadRotation()));
}

CAPI _Bool alt_IPlayer_IsInVehicle(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsInVehicle();
}

CAPI struct alt_IVehicle* alt_IPlayer_GetVehicle(struct alt_IPlayer* _instance)
{
    return (struct alt_IVehicle*)((alt::IPlayer *)_instance)->GetVehicle();
}

CAPI unsigned char alt_IPlayer_GetSeat(struct alt_IPlayer* _instance)
{
    return (unsigned char)((alt::IPlayer *)_instance)->GetSeat();
}

CAPI struct alt_IEntity* alt_IPlayer_GetEntityAimingAt(struct alt_IPlayer* _instance)
{
    return (struct alt_IEntity*)((alt::IPlayer *)_instance)->GetEntityAimingAt();
}

CAPI struct alt_Vectorfloat3PointLayout* alt_IPlayer_GetEntityAimOffset(struct alt_IPlayer* _instance)
{
    return (struct alt_Vectorfloat3PointLayout*)(new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IPlayer *)_instance)->GetEntityAimOffset()));
}

CAPI _Bool alt_IPlayer_IsFlashlightActive(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsFlashlightActive();
}

CAPI void alt_IPlayer_Kick(struct alt_IPlayer* _instance, struct alt_StringView* reason)
{
    return (void)((alt::IPlayer *)_instance)->Kick(*(class alt::StringView*)reason);
}

CAPI void alt_IVehicle_free(struct alt_IVehicle* ptr)
{
    delete ptr;
}

CAPI unsigned short alt_IVehicle_GetID(struct alt_IVehicle* _instance)
{
    return (unsigned short)((alt::IEntity *)_instance)->GetID();
}

CAPI unsigned int alt_IVehicle_GetModel(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IEntity *)_instance)->GetModel();
}

CAPI struct alt_Vectorfloat3RotationLayout* alt_IVehicle_GetRotation(struct alt_IVehicle* _instance)
{
    return (struct alt_Vectorfloat3RotationLayout*)(new class alt::Vector<float, 3, class alt::RotationLayout>(((alt::IEntity *)_instance)->GetRotation()));
}

CAPI void alt_IVehicle_SetRotation(struct alt_IVehicle* _instance, struct alt_Vectorfloat3RotationLayout* rot)
{
    return (void)((alt::IEntity *)_instance)->SetRotation(*(class alt::Vector<float, 3, class alt::RotationLayout>*)rot);
}

CAPI struct alt_MValue* alt_IVehicle_GetSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key)
{
    return (struct alt_MValue*)(new class alt::MValue(((alt::IEntity *)_instance)->GetSyncedMetaData(*(class alt::StringView*)key)));
}

CAPI struct alt_IPlayer* alt_IVehicle_GetDriver(struct alt_IVehicle* _instance)
{
    return (struct alt_IPlayer*)((alt::IVehicle *)_instance)->GetDriver();
}

CAPI unsigned char alt_IVehicle_GetMod(struct alt_IVehicle* _instance, unsigned char category)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetMod((unsigned char)category);
}

CAPI unsigned char alt_IVehicle_GetModsCount(struct alt_IVehicle* _instance, unsigned char category)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetModsCount((unsigned char)category);
}

CAPI _Bool alt_IVehicle_SetMod(struct alt_IVehicle* _instance, unsigned char category, unsigned char id)
{
    return (_Bool)((alt::IVehicle *)_instance)->SetMod((unsigned char)category, (unsigned char)id);
}

CAPI unsigned char alt_IVehicle_GetModKitsCount(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetModKitsCount();
}

CAPI unsigned char alt_IVehicle_GetModKit(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetModKit();
}

CAPI _Bool alt_IVehicle_SetModKit(struct alt_IVehicle* _instance, unsigned char id)
{
    return (_Bool)((alt::IVehicle *)_instance)->SetModKit((unsigned char)id);
}

CAPI _Bool alt_IVehicle_IsPrimaryColorRGB(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsPrimaryColorRGB();
}

CAPI unsigned char alt_IVehicle_GetPrimaryColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetPrimaryColor();
}

CAPI void alt_IVehicle_GetPrimaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* _return)
{
    const auto& addr = ((alt::IVehicle *)_instance)->GetPrimaryColorRGB();
    memcpy(_return, &addr, sizeof(struct alt::RGBA));
}

CAPI void alt_IVehicle_SetPrimaryColor(struct alt_IVehicle* _instance, unsigned char color)
{
    return (void)((alt::IVehicle *)_instance)->SetPrimaryColor((unsigned char)color);
}

CAPI void alt_IVehicle_SetPrimaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color)
{
    return (void)((alt::IVehicle *)_instance)->SetPrimaryColorRGB(*(struct alt::RGBA*)color);
}

CAPI _Bool alt_IVehicle_IsSecondaryColorRGB(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsSecondaryColorRGB();
}

CAPI unsigned char alt_IVehicle_GetSecondaryColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetSecondaryColor();
}

CAPI void alt_IVehicle_GetSecondaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* _return)
{
    const auto& addr = ((alt::IVehicle *)_instance)->GetSecondaryColorRGB();
    memcpy(_return, &addr, sizeof(struct alt::RGBA));
}

CAPI void alt_IVehicle_SetSecondaryColor(struct alt_IVehicle* _instance, unsigned char color)
{
    return (void)((alt::IVehicle *)_instance)->SetSecondaryColor((unsigned char)color);
}

CAPI void alt_IVehicle_SetSecondaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color)
{
    return (void)((alt::IVehicle *)_instance)->SetSecondaryColorRGB(*(struct alt::RGBA*)color);
}

CAPI unsigned char alt_IVehicle_GetPearlColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetPearlColor();
}

CAPI void alt_IVehicle_SetPearlColor(struct alt_IVehicle* _instance, unsigned char color)
{
    return (void)((alt::IVehicle *)_instance)->SetPearlColor((unsigned char)color);
}

CAPI unsigned char alt_IVehicle_GetWheelColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWheelColor();
}

CAPI void alt_IVehicle_SetWheelColor(struct alt_IVehicle* _instance, unsigned char color)
{
    return (void)((alt::IVehicle *)_instance)->SetWheelColor((unsigned char)color);
}

CAPI unsigned char alt_IVehicle_GetInteriorColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetInteriorColor();
}

CAPI void alt_IVehicle_SetInteriorColor(struct alt_IVehicle* _instance, unsigned char color)
{
    return (void)((alt::IVehicle *)_instance)->SetInteriorColor((unsigned char)color);
}

CAPI unsigned char alt_IVehicle_GetDashboardColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetDashboardColor();
}

CAPI void alt_IVehicle_SetDashboardColor(struct alt_IVehicle* _instance, unsigned char color)
{
    return (void)((alt::IVehicle *)_instance)->SetDashboardColor((unsigned char)color);
}

CAPI _Bool alt_IVehicle_IsTireSmokeColorCustom(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsTireSmokeColorCustom();
}

CAPI void alt_IVehicle_GetTireSmokeColor(struct alt_IVehicle* _instance, struct alt_RGBA* _return)
{
    const auto& addr = ((alt::IVehicle *)_instance)->GetTireSmokeColor();
    memcpy(_return, &addr, sizeof(struct alt::RGBA));
}

CAPI void alt_IVehicle_SetTireSmokeColor(struct alt_IVehicle* _instance, struct alt_RGBA* color)
{
    return (void)((alt::IVehicle *)_instance)->SetTireSmokeColor(*(struct alt::RGBA*)color);
}

CAPI unsigned char alt_IVehicle_GetWheelType(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWheelType();
}

CAPI unsigned char alt_IVehicle_GetWheelVariation(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWheelVariation();
}

CAPI void alt_IVehicle_SetWheels(struct alt_IVehicle* _instance, unsigned char type, unsigned char variation)
{
    return (void)((alt::IVehicle *)_instance)->SetWheels((unsigned char)type, (unsigned char)variation);
}

CAPI _Bool alt_IVehicle_GetCustomTires(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->GetCustomTires();
}

CAPI void alt_IVehicle_SetCustomTires(struct alt_IVehicle* _instance, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->SetCustomTires((_Bool)state);
}

CAPI unsigned char alt_IVehicle_GetSpecialDarkness(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetSpecialDarkness();
}

CAPI void alt_IVehicle_SetSpecialDarkness(struct alt_IVehicle* _instance, unsigned char value)
{
    return (void)((alt::IVehicle *)_instance)->SetSpecialDarkness((unsigned char)value);
}

CAPI unsigned int alt_IVehicle_GetNumberplateIndex(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IVehicle *)_instance)->GetNumberplateIndex();
}

CAPI void alt_IVehicle_SetNumberplateIndex(struct alt_IVehicle* _instance, unsigned int index)
{
    return (void)((alt::IVehicle *)_instance)->SetNumberplateIndex((unsigned int)index);
}

CAPI void alt_IVehicle_GetNumberplateText(struct alt_IVehicle* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::IVehicle *)_instance)->GetNumberplateText();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_IVehicle_SetNumberplateText(struct alt_IVehicle* _instance, struct alt_StringView* text)
{
    return (void)((alt::IVehicle *)_instance)->SetNumberplateText(*(class alt::StringView*)text);
}

CAPI unsigned char alt_IVehicle_GetWindowTint(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWindowTint();
}

CAPI void alt_IVehicle_SetWindowTint(struct alt_IVehicle* _instance, unsigned char tint)
{
    return (void)((alt::IVehicle *)_instance)->SetWindowTint((unsigned char)tint);
}

CAPI unsigned char alt_IVehicle_GetDirtLevel(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetDirtLevel();
}

CAPI void alt_IVehicle_SetDirtLevel(struct alt_IVehicle* _instance, unsigned char level)
{
    return (void)((alt::IVehicle *)_instance)->SetDirtLevel((unsigned char)level);
}

CAPI _Bool alt_IVehicle_IsExtraOn(struct alt_IVehicle* _instance, unsigned char extraID)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsExtraOn((unsigned char)extraID);
}

CAPI void alt_IVehicle_ToggleExtra(struct alt_IVehicle* _instance, unsigned char extraID, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->ToggleExtra((unsigned char)extraID, (_Bool)state);
}

CAPI _Bool alt_IVehicle_IsNeonActive(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsNeonActive();
}

CAPI void alt_IVehicle_GetNeonActive(struct alt_IVehicle* _instance, _Bool * left, _Bool * right, _Bool * front, _Bool * back)
{
    return (void)((alt::IVehicle *)_instance)->GetNeonActive((_Bool *)left, (_Bool *)right, (_Bool *)front, (_Bool *)back);
}

CAPI void alt_IVehicle_SetNeonActive(struct alt_IVehicle* _instance, _Bool left, _Bool right, _Bool front, _Bool back)
{
    return (void)((alt::IVehicle *)_instance)->SetNeonActive((_Bool)left, (_Bool)right, (_Bool)front, (_Bool)back);
}

CAPI void alt_IVehicle_GetNeonColor(struct alt_IVehicle* _instance, struct alt_RGBA* _return)
{
    const auto& addr = ((alt::IVehicle *)_instance)->GetNeonColor();
    memcpy(_return, &addr, sizeof(struct alt::RGBA));
}

CAPI void alt_IVehicle_SetNeonColor(struct alt_IVehicle* _instance, struct alt_RGBA* color)
{
    return (void)((alt::IVehicle *)_instance)->SetNeonColor(*(struct alt::RGBA*)color);
}

CAPI struct alt_String* alt_IVehicle_GetAppearanceDataBase64(struct alt_IVehicle* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::IVehicle *)_instance)->GetAppearanceDataBase64()));
}

CAPI void alt_IVehicle_LoadAppearanceDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    return (void)((alt::IVehicle *)_instance)->LoadAppearanceDataFromBase64(*(class alt::StringView*)base64);
}

CAPI _Bool alt_IVehicle_IsEngineOn(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsEngineOn();
}

CAPI void alt_IVehicle_SetEngineOn(struct alt_IVehicle* _instance, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->SetEngineOn((_Bool)state);
}

CAPI _Bool alt_IVehicle_IsHandbrakeActive(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsHandbrakeActive();
}

CAPI unsigned char alt_IVehicle_GetHeadlightColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetHeadlightColor();
}

CAPI void alt_IVehicle_SetHeadlightColor(struct alt_IVehicle* _instance, unsigned char color)
{
    return (void)((alt::IVehicle *)_instance)->SetHeadlightColor((unsigned char)color);
}

CAPI unsigned int alt_IVehicle_GetRadioStationIndex(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IVehicle *)_instance)->GetRadioStationIndex();
}

CAPI void alt_IVehicle_SetRadioStationIndex(struct alt_IVehicle* _instance, unsigned int stationIndex)
{
    return (void)((alt::IVehicle *)_instance)->SetRadioStationIndex((unsigned int)stationIndex);
}

CAPI _Bool alt_IVehicle_IsSirenActive(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsSirenActive();
}

CAPI void alt_IVehicle_SetSirenActive(struct alt_IVehicle* _instance, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->SetSirenActive((_Bool)state);
}

CAPI unsigned char alt_IVehicle_GetLockState(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetLockState();
}

CAPI void alt_IVehicle_SetLockState(struct alt_IVehicle* _instance, unsigned char state)
{
    return (void)((alt::IVehicle *)_instance)->SetLockState((unsigned char)state);
}

CAPI unsigned char alt_IVehicle_GetDoorState(struct alt_IVehicle* _instance, unsigned char doorId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetDoorState((unsigned char)doorId);
}

CAPI void alt_IVehicle_SetDoorState(struct alt_IVehicle* _instance, unsigned char doorId, unsigned char state)
{
    return (void)((alt::IVehicle *)_instance)->SetDoorState((unsigned char)doorId, (unsigned char)state);
}

CAPI _Bool alt_IVehicle_IsWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsWindowOpened((unsigned char)windowId);
}

CAPI void alt_IVehicle_SetWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->SetWindowOpened((unsigned char)windowId, (_Bool)state);
}

CAPI _Bool alt_IVehicle_IsDaylightOn(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsDaylightOn();
}

CAPI _Bool alt_IVehicle_IsNightlightOn(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsNightlightOn();
}

CAPI _Bool alt_IVehicle_IsRoofOpened(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsRoofOpened();
}

CAPI void alt_IVehicle_SetRoofOpened(struct alt_IVehicle* _instance, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->SetRoofOpened((_Bool)state);
}

CAPI _Bool alt_IVehicle_IsFlamethrowerActive(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsFlamethrowerActive();
}

CAPI struct alt_String* alt_IVehicle_GetGameStateBase64(struct alt_IVehicle* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::IVehicle *)_instance)->GetGameStateBase64()));
}

CAPI void alt_IVehicle_LoadGameStateFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    return (void)((alt::IVehicle *)_instance)->LoadGameStateFromBase64(*(class alt::StringView*)base64);
}

CAPI int alt_IVehicle_GetEngineHealth(struct alt_IVehicle* _instance)
{
    return (int)((alt::IVehicle *)_instance)->GetEngineHealth();
}

CAPI void alt_IVehicle_SetEngineHealth(struct alt_IVehicle* _instance, int health)
{
    return (void)((alt::IVehicle *)_instance)->SetEngineHealth((int)health);
}

CAPI int alt_IVehicle_GetPetrolTankHealth(struct alt_IVehicle* _instance)
{
    return (int)((alt::IVehicle *)_instance)->GetPetrolTankHealth();
}

CAPI void alt_IVehicle_SetPetrolTankHealth(struct alt_IVehicle* _instance, int health)
{
    return (void)((alt::IVehicle *)_instance)->SetPetrolTankHealth((int)health);
}

CAPI unsigned char alt_IVehicle_GetWheelsCount(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWheelsCount();
}

CAPI _Bool alt_IVehicle_IsWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsWheelBurst((unsigned char)wheelId);
}

CAPI void alt_IVehicle_SetWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->SetWheelBurst((unsigned char)wheelId, (_Bool)state);
}

CAPI _Bool alt_IVehicle_DoesWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId)
{
    return (_Bool)((alt::IVehicle *)_instance)->DoesWheelHasTire((unsigned char)wheelId);
}

CAPI void alt_IVehicle_SetWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->SetWheelHasTire((unsigned char)wheelId, (_Bool)state);
}

CAPI float alt_IVehicle_GetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId)
{
    return (float)((alt::IVehicle *)_instance)->GetWheelHealth((unsigned char)wheelId);
}

CAPI void alt_IVehicle_SetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId, float health)
{
    return (void)((alt::IVehicle *)_instance)->SetWheelHealth((unsigned char)wheelId, (float)health);
}

CAPI unsigned char alt_IVehicle_GetRepairsCount(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetRepairsCount();
}

CAPI unsigned int alt_IVehicle_GetBodyHealth(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IVehicle *)_instance)->GetBodyHealth();
}

CAPI void alt_IVehicle_SetBodyHealth(struct alt_IVehicle* _instance, unsigned int health)
{
    return (void)((alt::IVehicle *)_instance)->SetBodyHealth((unsigned int)health);
}

CAPI unsigned int alt_IVehicle_GetBodyAdditionalHealth(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IVehicle *)_instance)->GetBodyAdditionalHealth();
}

CAPI void alt_IVehicle_SetBodyAdditionalHealth(struct alt_IVehicle* _instance, unsigned int health)
{
    return (void)((alt::IVehicle *)_instance)->SetBodyAdditionalHealth((unsigned int)health);
}

CAPI struct alt_String* alt_IVehicle_GetHealthDataBase64(struct alt_IVehicle* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::IVehicle *)_instance)->GetHealthDataBase64()));
}

CAPI void alt_IVehicle_LoadHealthDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    return (void)((alt::IVehicle *)_instance)->LoadHealthDataFromBase64(*(class alt::StringView*)base64);
}

CAPI unsigned char alt_IVehicle_GetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetPartDamageLevel((unsigned char)partId);
}

CAPI void alt_IVehicle_SetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId, unsigned char damage)
{
    return (void)((alt::IVehicle *)_instance)->SetPartDamageLevel((unsigned char)partId, (unsigned char)damage);
}

CAPI unsigned char alt_IVehicle_GetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetPartBulletHoles((unsigned char)partId);
}

CAPI void alt_IVehicle_SetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId, unsigned char shootsCount)
{
    return (void)((alt::IVehicle *)_instance)->SetPartBulletHoles((unsigned char)partId, (unsigned char)shootsCount);
}

CAPI _Bool alt_IVehicle_IsLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsLightDamaged((unsigned char)lightId);
}

CAPI void alt_IVehicle_SetLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId, _Bool isDamaged)
{
    return (void)((alt::IVehicle *)_instance)->SetLightDamaged((unsigned char)lightId, (_Bool)isDamaged);
}

CAPI _Bool alt_IVehicle_IsWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsWindowDamaged((unsigned char)windowId);
}

CAPI void alt_IVehicle_SetWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId, _Bool isDamaged)
{
    return (void)((alt::IVehicle *)_instance)->SetWindowDamaged((unsigned char)windowId, (_Bool)isDamaged);
}

CAPI _Bool alt_IVehicle_IsSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsSpecialLightDamaged((unsigned char)specialLightId);
}

CAPI void alt_IVehicle_SetSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId, _Bool isDamaged)
{
    return (void)((alt::IVehicle *)_instance)->SetSpecialLightDamaged((unsigned char)specialLightId, (_Bool)isDamaged);
}

CAPI _Bool alt_IVehicle_HasArmoredWindows(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->HasArmoredWindows();
}

CAPI float alt_IVehicle_GetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId)
{
    return (float)((alt::IVehicle *)_instance)->GetArmoredWindowHealth((unsigned char)windowId);
}

CAPI void alt_IVehicle_SetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId, float health)
{
    return (void)((alt::IVehicle *)_instance)->SetArmoredWindowHealth((unsigned char)windowId, (float)health);
}

CAPI unsigned char alt_IVehicle_GetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetArmoredWindowShootCount((unsigned char)windowId);
}

CAPI void alt_IVehicle_SetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId, unsigned char count)
{
    return (void)((alt::IVehicle *)_instance)->SetArmoredWindowShootCount((unsigned char)windowId, (unsigned char)count);
}

CAPI unsigned char alt_IVehicle_GetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetBumperDamageLevel((unsigned char)bumperId);
}

CAPI void alt_IVehicle_SetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId, unsigned char damageLevel)
{
    return (void)((alt::IVehicle *)_instance)->SetBumperDamageLevel((unsigned char)bumperId, (unsigned char)damageLevel);
}

CAPI struct alt_String* alt_IVehicle_GetDamageDataBase64(struct alt_IVehicle* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::IVehicle *)_instance)->GetDamageDataBase64()));
}

CAPI void alt_IVehicle_LoadDamageDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    return (void)((alt::IVehicle *)_instance)->LoadDamageDataFromBase64(*(class alt::StringView*)base64);
}

CAPI void alt_IVehicle_SetManualEngineControl(struct alt_IVehicle* _instance, _Bool state)
{
    return (void)((alt::IVehicle *)_instance)->SetManualEngineControl((_Bool)state);
}

CAPI _Bool alt_IVehicle_IsManualEngineControl(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsManualEngineControl();
}

CAPI struct alt_String* alt_IVehicle_GetScriptDataBase64(struct alt_IVehicle* _instance)
{
    return (struct alt_String*)(new class alt::String(((alt::IVehicle *)_instance)->GetScriptDataBase64()));
}

CAPI void alt_IVehicle_LoadScriptDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    return (void)((alt::IVehicle *)_instance)->LoadScriptDataFromBase64(*(class alt::StringView*)base64);
}

CAPI void alt_ICheckpoint_free(struct alt_ICheckpoint* ptr)
{
    delete ptr;
}

CAPI struct alt_Vectorfloat3PointLayout* alt_ICheckpoint_GetPosition(struct alt_ICheckpoint* _instance)
{
    return (struct alt_Vectorfloat3PointLayout*)(new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IWorldObject *)_instance)->GetPosition()));
}

CAPI short alt_ICheckpoint_GetDimension(struct alt_ICheckpoint* _instance)
{
    return (short)((alt::IWorldObject *)_instance)->GetDimension();
}

CAPI _Bool alt_ICheckpoint_IsGlobal(struct alt_ICheckpoint* _instance)
{
    return (_Bool)((alt::ICheckpoint *)_instance)->IsGlobal();
}

CAPI struct alt_IPlayer* alt_ICheckpoint_GetTarget(struct alt_ICheckpoint* _instance)
{
    return (struct alt_IPlayer*)((alt::ICheckpoint *)_instance)->GetTarget();
}

CAPI unsigned char alt_ICheckpoint_GetCheckpointType(struct alt_ICheckpoint* _instance)
{
    return (unsigned char)((alt::ICheckpoint *)_instance)->GetCheckpointType();
}

CAPI float alt_ICheckpoint_GetHeight(struct alt_ICheckpoint* _instance)
{
    return (float)((alt::ICheckpoint *)_instance)->GetHeight();
}

CAPI float alt_ICheckpoint_GetRadius(struct alt_ICheckpoint* _instance)
{
    return (float)((alt::ICheckpoint *)_instance)->GetRadius();
}

CAPI void alt_ICheckpoint_GetColor(struct alt_ICheckpoint* _instance, struct alt_RGBA* _return)
{
    const auto& addr = ((alt::ICheckpoint *)_instance)->GetColor();
    memcpy(_return, &addr, sizeof(struct alt::RGBA));
}

CAPI _Bool alt_ICheckpoint_IsEntityIn(struct alt_ICheckpoint* _instance, struct alt_IEntity* ent)
{
    return (_Bool)((alt::ICheckpoint *)_instance)->IsEntityIn((class alt::IEntity *)ent);
}

CAPI void alt_IBlip_free(struct alt_IBlip* ptr)
{
    delete ptr;
}

CAPI struct alt_Vectorfloat3PointLayout* alt_IBlip_GetPosition(struct alt_IBlip* _instance)
{
    return (struct alt_Vectorfloat3PointLayout*)(new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IWorldObject *)_instance)->GetPosition()));
}

CAPI short alt_IBlip_GetDimension(struct alt_IBlip* _instance)
{
    return (short)((alt::IWorldObject *)_instance)->GetDimension();
}

CAPI _Bool alt_IBlip_IsGlobal(struct alt_IBlip* _instance)
{
    return (_Bool)((alt::IBlip *)_instance)->IsGlobal();
}

CAPI struct alt_IPlayer* alt_IBlip_GetTarget(struct alt_IBlip* _instance)
{
    return (struct alt_IPlayer*)((alt::IBlip *)_instance)->GetTarget();
}

CAPI _Bool alt_IBlip_IsAttached(struct alt_IBlip* _instance)
{
    return (_Bool)((alt::IBlip *)_instance)->IsAttached();
}

CAPI struct alt_IEntity* alt_IBlip_AttachedTo(struct alt_IBlip* _instance)
{
    return (struct alt_IEntity*)((alt::IBlip *)_instance)->AttachedTo();
}

CAPI enum alt_IBlip_Type alt_IBlip_GetBlipType(struct alt_IBlip* _instance)
{
    return (enum alt_IBlip_Type)((alt::IBlip *)_instance)->GetBlipType();
}

CAPI void alt_IBlip_SetSprite(struct alt_IBlip* _instance, unsigned short sprite)
{
    return (void)((alt::IBlip *)_instance)->SetSprite((unsigned short)sprite);
}

CAPI void alt_IBlip_SetColor(struct alt_IBlip* _instance, unsigned char color)
{
    return (void)((alt::IBlip *)_instance)->SetColor((unsigned char)color);
}

CAPI void alt_IBlip_SetRoute(struct alt_IBlip* _instance, _Bool state)
{
    return (void)((alt::IBlip *)_instance)->SetRoute((_Bool)state);
}

CAPI void alt_IBlip_SetRouteColor(struct alt_IBlip* _instance, unsigned char color)
{
    return (void)((alt::IBlip *)_instance)->SetRouteColor((unsigned char)color);
}

CAPI void alt_IVoiceChannel_free(struct alt_IVoiceChannel* ptr)
{
    delete ptr;
}

CAPI enum alt_IBaseObject_Type alt_IVoiceChannel_GetType(struct alt_IVoiceChannel* _instance)
{
    return (enum alt_IBaseObject_Type)((alt::IBaseObject *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IVoiceChannel_GetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key)
{
    return (struct alt_MValue*)(new class alt::MValue(((alt::IBaseObject *)_instance)->GetMetaData(*(class alt::StringView*)key)));
}

CAPI void alt_IVoiceChannel_SetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    return (void)((alt::IBaseObject *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IVoiceChannel_AddPlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    return (void)((alt::IVoiceChannel *)_instance)->AddPlayer((class alt::IPlayer *)player);
}

CAPI void alt_IVoiceChannel_RemovePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    return (void)((alt::IVoiceChannel *)_instance)->RemovePlayer((class alt::IPlayer *)player);
}

CAPI void alt_IVoiceChannel_MutePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    return (void)((alt::IVoiceChannel *)_instance)->MutePlayer((class alt::IPlayer *)player);
}

CAPI void alt_IVoiceChannel_UnmutePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    return (void)((alt::IVoiceChannel *)_instance)->UnmutePlayer((class alt::IPlayer *)player);
}

CAPI _Bool alt_IVoiceChannel_IsPlayerConnected(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    return (_Bool)((alt::IVoiceChannel *)_instance)->IsPlayerConnected((class alt::IPlayer *)player);
}

CAPI _Bool alt_IVoiceChannel_IsPlayerMuted(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    return (_Bool)((alt::IVoiceChannel *)_instance)->IsPlayerMuted((class alt::IPlayer *)player);
}

CAPI _Bool alt_IVoiceChannel_IsSpatial(struct alt_IVoiceChannel* _instance)
{
    return (_Bool)((alt::IVoiceChannel *)_instance)->IsSpatial();
}

CAPI float alt_IVoiceChannel_GetMaxDistance(struct alt_IVoiceChannel* _instance)
{
    return (float)((alt::IVoiceChannel *)_instance)->GetMaxDistance();
}

CAPI void alt_CEvent_free(struct alt_CEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CEvent_GetType(struct alt_CEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CEvent_WasCancelled(struct alt_CEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CEvent_Cancel(struct alt_CEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI void alt_CServerScriptEvent_free(struct alt_CServerScriptEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CServerScriptEvent_GetType(struct alt_CServerScriptEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CServerScriptEvent_WasCancelled(struct alt_CServerScriptEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CServerScriptEvent_Cancel(struct alt_CServerScriptEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI void alt_CServerScriptEvent_GetName(struct alt_CServerScriptEvent* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::CServerScriptEvent *)_instance)->GetName();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI struct alt_MValueList* alt_CServerScriptEvent_GetArgs(struct alt_CServerScriptEvent* _instance)
{
    return (struct alt_MValueList*)(new class alt::MValueList(((alt::CServerScriptEvent *)_instance)->GetArgs()));
}

CAPI void alt_CClientScriptEvent_free(struct alt_CClientScriptEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CClientScriptEvent_GetType(struct alt_CClientScriptEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CClientScriptEvent_WasCancelled(struct alt_CClientScriptEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CClientScriptEvent_Cancel(struct alt_CClientScriptEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI void alt_CClientScriptEvent_GetName(struct alt_CClientScriptEvent* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::CClientScriptEvent *)_instance)->GetName();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI struct alt_MValueList* alt_CClientScriptEvent_GetArgs(struct alt_CClientScriptEvent* _instance)
{
    return (struct alt_MValueList*)(new class alt::MValueList(((alt::CClientScriptEvent *)_instance)->GetArgs()));
}

CAPI void alt_CPlayerConnectEvent_free(struct alt_CPlayerConnectEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CPlayerConnectEvent_GetType(struct alt_CPlayerConnectEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerConnectEvent_WasCancelled(struct alt_CPlayerConnectEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerConnectEvent_Cancel(struct alt_CPlayerConnectEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IPlayer* alt_CPlayerConnectEvent_GetTarget(struct alt_CPlayerConnectEvent* _instance)
{
    return (struct alt_IPlayer*)((alt::CPlayerConnectEvent *)_instance)->GetTarget();
}

CAPI void alt_CPlayerConnectEvent_GetReason(struct alt_CPlayerConnectEvent* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::CPlayerConnectEvent *)_instance)->GetReason();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_CPlayerConnectEvent_Cancel1(struct alt_CPlayerConnectEvent* _instance, struct alt_StringView* _reason)
{
    return (void)((alt::CPlayerConnectEvent *)_instance)->Cancel(*(class alt::StringView*)_reason);
}

CAPI void alt_CPlayerDisconnectEvent_free(struct alt_CPlayerDisconnectEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CPlayerDisconnectEvent_GetType(struct alt_CPlayerDisconnectEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerDisconnectEvent_WasCancelled(struct alt_CPlayerDisconnectEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerDisconnectEvent_Cancel(struct alt_CPlayerDisconnectEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IPlayer* alt_CPlayerDisconnectEvent_GetTarget(struct alt_CPlayerDisconnectEvent* _instance)
{
    return (struct alt_IPlayer*)((alt::CPlayerDisconnectEvent *)_instance)->GetTarget();
}

CAPI void alt_CPlayerDisconnectEvent_GetReason(struct alt_CPlayerDisconnectEvent* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::CPlayerDisconnectEvent *)_instance)->GetReason();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_CPlayerDamageEvent_free(struct alt_CPlayerDamageEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CPlayerDamageEvent_GetType(struct alt_CPlayerDamageEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerDamageEvent_WasCancelled(struct alt_CPlayerDamageEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerDamageEvent_Cancel(struct alt_CPlayerDamageEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IPlayer* alt_CPlayerDamageEvent_GetTarget(struct alt_CPlayerDamageEvent* _instance)
{
    return (struct alt_IPlayer*)((alt::CPlayerDamageEvent *)_instance)->GetTarget();
}

CAPI struct alt_IEntity* alt_CPlayerDamageEvent_GetAttacker(struct alt_CPlayerDamageEvent* _instance)
{
    return (struct alt_IEntity*)((alt::CPlayerDamageEvent *)_instance)->GetAttacker();
}

CAPI unsigned short alt_CPlayerDamageEvent_GetDamage(struct alt_CPlayerDamageEvent* _instance)
{
    return (unsigned short)((alt::CPlayerDamageEvent *)_instance)->GetDamage();
}

CAPI unsigned int alt_CPlayerDamageEvent_GetWeapon(struct alt_CPlayerDamageEvent* _instance)
{
    return (unsigned int)((alt::CPlayerDamageEvent *)_instance)->GetWeapon();
}

CAPI void alt_CPlayerDeathEvent_free(struct alt_CPlayerDeathEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CPlayerDeathEvent_GetType(struct alt_CPlayerDeathEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerDeathEvent_WasCancelled(struct alt_CPlayerDeathEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerDeathEvent_Cancel(struct alt_CPlayerDeathEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IPlayer* alt_CPlayerDeathEvent_GetTarget(struct alt_CPlayerDeathEvent* _instance)
{
    return (struct alt_IPlayer*)((alt::CPlayerDeathEvent *)_instance)->GetTarget();
}

CAPI struct alt_IEntity* alt_CPlayerDeathEvent_GetKiller(struct alt_CPlayerDeathEvent* _instance)
{
    return (struct alt_IEntity*)((alt::CPlayerDeathEvent *)_instance)->GetKiller();
}

CAPI unsigned int alt_CPlayerDeathEvent_GetWeapon(struct alt_CPlayerDeathEvent* _instance)
{
    return (unsigned int)((alt::CPlayerDeathEvent *)_instance)->GetWeapon();
}

CAPI void alt_CCheckpointEvent_free(struct alt_CCheckpointEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CCheckpointEvent_GetType(struct alt_CCheckpointEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CCheckpointEvent_WasCancelled(struct alt_CCheckpointEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CCheckpointEvent_Cancel(struct alt_CCheckpointEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_ICheckpoint* alt_CCheckpointEvent_GetTarget(struct alt_CCheckpointEvent* _instance)
{
    return (struct alt_ICheckpoint*)((alt::CCheckpointEvent *)_instance)->GetTarget();
}

CAPI struct alt_IEntity* alt_CCheckpointEvent_GetEntity(struct alt_CCheckpointEvent* _instance)
{
    return (struct alt_IEntity*)((alt::CCheckpointEvent *)_instance)->GetEntity();
}

CAPI _Bool alt_CCheckpointEvent_GetState(struct alt_CCheckpointEvent* _instance)
{
    return (_Bool)((alt::CCheckpointEvent *)_instance)->GetState();
}

CAPI void alt_CColShapeEvent_free(struct alt_CColShapeEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CColShapeEvent_GetType(struct alt_CColShapeEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CColShapeEvent_WasCancelled(struct alt_CColShapeEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CColShapeEvent_Cancel(struct alt_CColShapeEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IColShape* alt_CColShapeEvent_GetTarget(struct alt_CColShapeEvent* _instance)
{
    return (struct alt_IColShape*)((alt::CColShapeEvent *)_instance)->GetTarget();
}

CAPI struct alt_IEntity* alt_CColShapeEvent_GetEntity(struct alt_CColShapeEvent* _instance)
{
    return (struct alt_IEntity*)((alt::CColShapeEvent *)_instance)->GetEntity();
}

CAPI _Bool alt_CColShapeEvent_GetState(struct alt_CColShapeEvent* _instance)
{
    return (_Bool)((alt::CColShapeEvent *)_instance)->GetState();
}

CAPI void alt_CPlayerEnterVehicleEvent_free(struct alt_CPlayerEnterVehicleEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CPlayerEnterVehicleEvent_GetType(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerEnterVehicleEvent_WasCancelled(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerEnterVehicleEvent_Cancel(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IVehicle* alt_CPlayerEnterVehicleEvent_GetTarget(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (struct alt_IVehicle*)((alt::CPlayerEnterVehicleEvent *)_instance)->GetTarget();
}

CAPI struct alt_IPlayer* alt_CPlayerEnterVehicleEvent_GetPlayer(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (struct alt_IPlayer*)((alt::CPlayerEnterVehicleEvent *)_instance)->GetPlayer();
}

CAPI unsigned char alt_CPlayerEnterVehicleEvent_GetSeat(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (unsigned char)((alt::CPlayerEnterVehicleEvent *)_instance)->GetSeat();
}

CAPI void alt_CPlayerLeaveVehicleEvent_free(struct alt_CPlayerLeaveVehicleEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CPlayerLeaveVehicleEvent_GetType(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerLeaveVehicleEvent_WasCancelled(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerLeaveVehicleEvent_Cancel(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IVehicle* alt_CPlayerLeaveVehicleEvent_GetTarget(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (struct alt_IVehicle*)((alt::CPlayerLeaveVehicleEvent *)_instance)->GetTarget();
}

CAPI struct alt_IPlayer* alt_CPlayerLeaveVehicleEvent_GetPlayer(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (struct alt_IPlayer*)((alt::CPlayerLeaveVehicleEvent *)_instance)->GetPlayer();
}

CAPI unsigned char alt_CPlayerLeaveVehicleEvent_GetSeat(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (unsigned char)((alt::CPlayerLeaveVehicleEvent *)_instance)->GetSeat();
}

CAPI void alt_CPlayerChangeVehicleSeatEvent_free(struct alt_CPlayerChangeVehicleSeatEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CPlayerChangeVehicleSeatEvent_GetType(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerChangeVehicleSeatEvent_WasCancelled(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerChangeVehicleSeatEvent_Cancel(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IVehicle* alt_CPlayerChangeVehicleSeatEvent_GetTarget(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (struct alt_IVehicle*)((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetTarget();
}

CAPI struct alt_IPlayer* alt_CPlayerChangeVehicleSeatEvent_GetPlayer(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (struct alt_IPlayer*)((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetPlayer();
}

CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetOldSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (unsigned char)((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetOldSeat();
}

CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetNewSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (unsigned char)((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetNewSeat();
}

CAPI void alt_CDataNodeReceivedEvent_free(struct alt_CDataNodeReceivedEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CDataNodeReceivedEvent_GetType(struct alt_CDataNodeReceivedEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CDataNodeReceivedEvent_WasCancelled(struct alt_CDataNodeReceivedEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CDataNodeReceivedEvent_Cancel(struct alt_CDataNodeReceivedEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI void alt_CDataNodeReceivedEvent_GetName(struct alt_CDataNodeReceivedEvent* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::CDataNodeReceivedEvent *)_instance)->GetName();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_CDataNodeReceivedEvent_GetJson(struct alt_CDataNodeReceivedEvent* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::CDataNodeReceivedEvent *)_instance)->GetJson();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI void alt_CRemoveEntityEvent_free(struct alt_CRemoveEntityEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CRemoveEntityEvent_GetType(struct alt_CRemoveEntityEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CRemoveEntityEvent_WasCancelled(struct alt_CRemoveEntityEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CRemoveEntityEvent_Cancel(struct alt_CRemoveEntityEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IEntity* alt_CRemoveEntityEvent_GetEntity(struct alt_CRemoveEntityEvent* _instance)
{
    return (struct alt_IEntity*)((alt::CRemoveEntityEvent *)_instance)->GetEntity();
}

CAPI void alt_CConsoleCommandEvent_free(struct alt_CConsoleCommandEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CConsoleCommandEvent_GetType(struct alt_CConsoleCommandEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CConsoleCommandEvent_WasCancelled(struct alt_CConsoleCommandEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CConsoleCommandEvent_Cancel(struct alt_CConsoleCommandEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI void alt_CConsoleCommandEvent_GetName(struct alt_CConsoleCommandEvent* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::CConsoleCommandEvent *)_instance)->GetName();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI struct alt_ArrayStringView* alt_CConsoleCommandEvent_GetArgs(struct alt_CConsoleCommandEvent* _instance)
{
    return (struct alt_ArrayStringView*)&((alt::CConsoleCommandEvent *)_instance)->GetArgs();
}

CAPI void alt_CConnectionCompleteEvent_free(struct alt_CConnectionCompleteEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CConnectionCompleteEvent_GetType(struct alt_CConnectionCompleteEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CConnectionCompleteEvent_WasCancelled(struct alt_CConnectionCompleteEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CConnectionCompleteEvent_Cancel(struct alt_CConnectionCompleteEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI _Bool alt_CConnectionCompleteEvent_IsAnyMapLoaded(struct alt_CConnectionCompleteEvent* _instance)
{
    return (_Bool)((alt::CConnectionCompleteEvent *)_instance)->IsAnyMapLoaded();
}

CAPI void alt_CDisconnectEvent_free(struct alt_CDisconnectEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CDisconnectEvent_GetType(struct alt_CDisconnectEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CDisconnectEvent_WasCancelled(struct alt_CDisconnectEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CDisconnectEvent_Cancel(struct alt_CDisconnectEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI void alt_CGameEntityCreateEvent_free(struct alt_CGameEntityCreateEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CGameEntityCreateEvent_GetType(struct alt_CGameEntityCreateEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CGameEntityCreateEvent_WasCancelled(struct alt_CGameEntityCreateEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CGameEntityCreateEvent_Cancel(struct alt_CGameEntityCreateEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IEntity* alt_CGameEntityCreateEvent_GetTarget(struct alt_CGameEntityCreateEvent* _instance)
{
    return (struct alt_IEntity*)((alt::CGameEntityCreateEvent *)_instance)->GetTarget();
}

CAPI void alt_CGameEntityDestroyEvent_free(struct alt_CGameEntityDestroyEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CGameEntityDestroyEvent_GetType(struct alt_CGameEntityDestroyEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CGameEntityDestroyEvent_WasCancelled(struct alt_CGameEntityDestroyEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CGameEntityDestroyEvent_Cancel(struct alt_CGameEntityDestroyEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_IEntity* alt_CGameEntityDestroyEvent_GetTarget(struct alt_CGameEntityDestroyEvent* _instance)
{
    return (struct alt_IEntity*)((alt::CGameEntityDestroyEvent *)_instance)->GetTarget();
}

CAPI void alt_CKeyboardEvent_free(struct alt_CKeyboardEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CKeyboardEvent_GetType(struct alt_CKeyboardEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CKeyboardEvent_WasCancelled(struct alt_CKeyboardEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CKeyboardEvent_Cancel(struct alt_CKeyboardEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI unsigned int alt_CKeyboardEvent_GetKeyCode(struct alt_CKeyboardEvent* _instance)
{
    return (unsigned int)((alt::CKeyboardEvent *)_instance)->GetKeyCode();
}

CAPI enum alt_CKeyboardEvent_KeyState alt_CKeyboardEvent_GetKeyState(struct alt_CKeyboardEvent* _instance)
{
    return (enum alt_CKeyboardEvent_KeyState)((alt::CKeyboardEvent *)_instance)->GetKeyState();
}

CAPI void alt_CWebViewEvent_free(struct alt_CWebViewEvent* ptr)
{
    delete ptr;
}

CAPI enum alt_CEvent_Type alt_CWebViewEvent_GetType(struct alt_CWebViewEvent* _instance)
{
    return (enum alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CWebViewEvent_WasCancelled(struct alt_CWebViewEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CWebViewEvent_Cancel(struct alt_CWebViewEvent* _instance)
{
    return (void)((alt::CEvent *)_instance)->Cancel();
}

CAPI struct CWebView* alt_CWebViewEvent_GetTarget(struct alt_CWebViewEvent* _instance)
{
    return (struct CWebView*)((alt::CWebViewEvent *)_instance)->GetTarget();
}

CAPI void alt_CWebViewEvent_GetName(struct alt_CWebViewEvent* _instance, struct alt_StringView* _return)
{
    const auto& addr = ((alt::CWebViewEvent *)_instance)->GetName();
    memcpy(_return, &addr, sizeof(class alt::StringView));
}

CAPI struct alt_MValueList* alt_CWebViewEvent_GetArgs(struct alt_CWebViewEvent* _instance)
{
    return (struct alt_MValueList*)(new class alt::MValueList(((alt::CWebViewEvent *)_instance)->GetArgs()));
}

CAPI void alt_IPackage_free(struct alt_IPackage* ptr)
{
    delete ptr;
}

CAPI enum alt_IPackage_Mode alt_IPackage_GetMode(struct alt_IPackage* _instance)
{
    return (enum alt_IPackage_Mode)((alt::IPackage *)_instance)->GetMode();
}

CAPI _Bool alt_IPackage_FileExists(struct alt_IPackage* _instance, struct alt_StringView* path)
{
    return (_Bool)((alt::IPackage *)_instance)->FileExists(*(class alt::StringView*)path);
}

CAPI struct alt_IPackage_File* alt_IPackage_OpenFile(struct alt_IPackage* _instance, struct alt_StringView* path)
{
    return (struct alt_IPackage_File*)((alt::IPackage *)_instance)->OpenFile(*(class alt::StringView*)path);
}

CAPI void alt_IPackage_CloseFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file)
{
    return (void)((alt::IPackage *)_instance)->CloseFile((class alt::IPackage::File *)file);
}

CAPI unsigned long long alt_IPackage_GetFileSize(struct alt_IPackage* _instance, struct alt_IPackage_File* file)
{
    return (unsigned long long)((alt::IPackage *)_instance)->GetFileSize((class alt::IPackage::File *)file);
}

CAPI void alt_IPackage_SeekFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, unsigned long long offset, enum alt_IPackage_SeekOrigin origin)
{
    return (void)((alt::IPackage *)_instance)->SeekFile((class alt::IPackage::File *)file, (unsigned long long)offset, (enum alt::IPackage::SeekOrigin)origin);
}

CAPI unsigned long long alt_IPackage_TellFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file)
{
    return (unsigned long long)((alt::IPackage *)_instance)->TellFile((class alt::IPackage::File *)file);
}

CAPI unsigned long long alt_IPackage_ReadFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void * buffer, unsigned long long size)
{
    return (unsigned long long)((alt::IPackage *)_instance)->ReadFile((class alt::IPackage::File *)file, (void *)buffer, (unsigned long long)size);
}

CAPI unsigned long long alt_IPackage_WriteFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void * buffer, unsigned long long size)
{
    return (unsigned long long)((alt::IPackage *)_instance)->WriteFile((class alt::IPackage::File *)file, (void *)buffer, (unsigned long long)size);
}

CAPI void alt_IPackage_File_free(struct alt_IPackage_File* ptr)
{
    delete ptr;
}

CAPI void alt_IScriptRuntime_free(struct alt_IScriptRuntime* ptr)
{
    delete ptr;
}

CAPI struct alt_IResource* alt_IScriptRuntime_CreateResource(struct alt_IScriptRuntime* _instance, struct alt_IResource_CreationInfo* info)
{
    return (struct alt_IResource*)((alt::IScriptRuntime *)_instance)->CreateResource((struct alt::IResource::CreationInfo *)info);
}

CAPI void alt_IScriptRuntime_RemoveResource(struct alt_IScriptRuntime* _instance, struct alt_IResource* resource)
{
    return (void)((alt::IScriptRuntime *)_instance)->RemoveResource((class alt::IResource *)resource);
}

CAPI void alt_IScriptRuntime_OnTick(struct alt_IScriptRuntime* _instance)
{
    return (void)((alt::IScriptRuntime *)_instance)->OnTick();
}

CAPI void alt_IClient_free(struct alt_IClient* ptr)
{
    delete ptr;
}

CAPI void alt_IClient_LogInfo(struct alt_IClient* _instance, struct alt_StringView* str)
{
    return (void)((alt::IClient *)_instance)->LogInfo(*(class alt::StringView*)str);
}

CAPI _Bool alt_IClient_RegisterScriptRuntime(struct alt_IClient* _instance, struct alt_StringView* resourceType, struct alt_IScriptRuntime* runtime)
{
    return (_Bool)((alt::IClient *)_instance)->RegisterScriptRuntime(*(class alt::StringView*)resourceType, (class alt::IScriptRuntime *)runtime);
}



#include "altv-capi-extra.cpp"
