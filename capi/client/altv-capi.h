
/**
 * CAPI API Header for C
 * THIS HEADER IS AUTOGENERATED
 * Fri Jul 26 04:54:38 2019

 * 
 * Include header for alt:V C API
 */

#ifndef _CAPI_H_
#define _CAPI_H_

#include <stdbool.h>
#define CAPI_EXTERN

#ifdef _WIN32
#define CAPI_EXPORT CAPI_EXTERN __declspec(dllexport)
#define CAPI_IMPORT CAPI_EXTERN __declspec(dllimport)
#else
#define CAPI_EXPORT CAPI_EXTERN
#define CAPI_IMPORT CAPI_EXTERN
#endif

#ifndef CAPI
#ifdef CAPI_DLL
#define CAPI CAPI_IMPORT
#else
#define CAPI CAPI_EXTERN
#endif // CAPI_DLL
#endif // CAPI

typedef struct alt_VectorLayout_float_4 {
    float elements[4];
} alt_VectorLayout_float_4;

CAPI void alt_VectorLayout_float_4_free(struct alt_VectorLayout_float_4* ptr);

// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create();

// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_1(float* _elements);

// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_2(float* el);

CAPI float* alt_VectorLayout_float_4_Access_size_t(struct alt_VectorLayout_float_4* _instance, unsigned long long key);

CAPI float* alt_VectorLayout_float_4_Access_size_t_1(struct alt_VectorLayout_float_4* _instance, unsigned long long key);

// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_3(struct alt_VectorLayout_float_4* _p0);

// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_4(struct alt_VectorLayout_float_4* _p0);

CAPI void alt_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(struct alt_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);

CAPI void alt_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(struct alt_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);


typedef float alt_VectorLayout_float_4_Element;

typedef struct alt_Vector_float_4_VectorLayout_float_4 {
    float elements[4];
} alt_Vector_float_4_VectorLayout_float_4;

CAPI void alt_Vector_float_4_VectorLayout_float_4_free(struct alt_Vector_float_4_VectorLayout_float_4* ptr);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create();

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_1(float* _elements);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_2(float* el);

CAPI float* alt_Vector_float_4_VectorLayout_float_4_Access_size_t(struct alt_Vector_float_4_VectorLayout_float_4* _instance, unsigned long long key);

CAPI float* alt_Vector_float_4_VectorLayout_float_4_Access_size_t_1(struct alt_Vector_float_4_VectorLayout_float_4* _instance, unsigned long long key);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_3(struct alt_VectorLayout_float_4* _p0);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_4(struct alt_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);


// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_5();

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_6(float* _elements);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_7(struct alt_VectorLayout_float_4* layout);

CAPI float alt_Vector_float_4_VectorLayout_float_4_LengthSqr(struct alt_Vector_float_4_VectorLayout_float_4* _instance);

CAPI float alt_Vector_float_4_VectorLayout_float_4_Length(struct alt_Vector_float_4_VectorLayout_float_4* _instance);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_8(struct alt_Vector_float_4_VectorLayout_float_4* _p0);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_9(struct alt_Vector_float_4_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_constVector_float_4_VectorLayout_float_4Ref(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_Vector_float_4_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_Vector_float_4_VectorLayout_float_4RefRef(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_Vector_float_4_VectorLayout_float_4* _p0);


typedef struct alt_VectorLayout_float_4 alt_Vector_float_4_VectorLayout_float_4_Layout;

typedef float alt_Vector_float_4_VectorLayout_float_4_Element;


typedef struct alt_Vector_float_2_VectorLayout_float_2 alt_Vector2f;

typedef struct alt_Vector_int_2_VectorLayout_int_2 alt_Vector2i;


typedef struct alt_Vector_float_3_VectorLayout_float_3 alt_Vector3f;

typedef struct alt_Vector_int_3_VectorLayout_int_3 alt_Vector3i;


typedef struct alt_Vector_float_4_VectorLayout_float_4 alt_Vector4f;

typedef struct alt_Vector_int_4_VectorLayout_int_4 alt_Vector4i;

typedef struct alt_Matrix_float_4_4_MatrixLayout_float_4_4 alt_DXMatrix;

typedef struct alt_PointLayout {
    float x;
    float y;
    float z;
} alt_PointLayout;

CAPI void alt_PointLayout_free(struct alt_PointLayout* ptr);

// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create();

// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_1(float _x, float _y, float _z);

// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_2(float* elements);

CAPI float* alt_PointLayout_Access_size_t(struct alt_PointLayout* _instance, unsigned long long key);

CAPI float* alt_PointLayout_Access_size_t_1(struct alt_PointLayout* _instance, unsigned long long key);

// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_3(struct alt_PointLayout* _p0);

// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_4(struct alt_PointLayout* _p0);


typedef float alt_PointLayout_Element;

typedef struct alt_PointPaddedLayout {
    float x;
    float y;
    float z;
    float pad;
} alt_PointPaddedLayout;

CAPI void alt_PointPaddedLayout_free(struct alt_PointPaddedLayout* ptr);

// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create();

// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_1(float _x, float _y, float _z);

// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_2(float* elements);

CAPI float* alt_PointPaddedLayout_Access_size_t(struct alt_PointPaddedLayout* _instance, unsigned long long key);

CAPI float* alt_PointPaddedLayout_Access_size_t_1(struct alt_PointPaddedLayout* _instance, unsigned long long key);

// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_3(struct alt_PointLayout* _p0);

// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_4(struct alt_PointLayout* _p0);


// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_5();

// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_6(float x, float y, float z);

// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_7(float* elements);


typedef struct alt_Vector_float_3_PointLayout alt_Point;

typedef struct alt_Vector_float_3_PointPaddedLayout alt_PointPadded;

typedef struct alt_Vector_float_3_PointLayout alt_Position;

typedef struct alt_Vector_float_3_PointPaddedLayout alt_PositionPadded;

typedef struct alt_RotationLayout {
    float roll;
    float pitch;
    float yaw;
} alt_RotationLayout;

CAPI void alt_RotationLayout_free(struct alt_RotationLayout* ptr);

// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create(float _roll, float _pitch, float _yaw);

// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_1();

// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_2(float* elements);

CAPI float* alt_RotationLayout_Access_size_t(struct alt_RotationLayout* _instance, unsigned long long key);

CAPI float* alt_RotationLayout_Access_size_t_1(struct alt_RotationLayout* _instance, unsigned long long key);

CAPI void alt_RotationLayout_Normalize(struct alt_RotationLayout* _instance);

// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_3(struct alt_RotationLayout* _p0);

// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_4(struct alt_RotationLayout* _p0);


typedef float alt_RotationLayout_Element;

typedef struct alt_RotationPaddedLayout {
    float roll;
    float pitch;
    float yaw;
    float pad;
} alt_RotationPaddedLayout;

CAPI void alt_RotationPaddedLayout_free(struct alt_RotationPaddedLayout* ptr);

// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create(float _roll, float _pitch, float _yaw);

// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_1();

// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_2(float* elements);

CAPI float* alt_RotationPaddedLayout_Access_size_t(struct alt_RotationPaddedLayout* _instance, unsigned long long key);

CAPI float* alt_RotationPaddedLayout_Access_size_t_1(struct alt_RotationPaddedLayout* _instance, unsigned long long key);

CAPI void alt_RotationPaddedLayout_Normalize(struct alt_RotationPaddedLayout* _instance);

// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_3(struct alt_RotationLayout* _p0);

// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_4(struct alt_RotationLayout* _p0);


// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_5();

// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_6(float roll, float pitch, float yaw);

// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_7(float* elements);


typedef struct alt_Vector_float_3_RotationLayout alt_Rotation;

typedef struct alt_Vector_float_3_RotationPaddedLayout alt_RotationPadded;

typedef struct alt_ViewMatrixLayout {
    struct alt_Vector_float_4_VectorLayout_float_4 right;
    struct alt_Vector_float_4_VectorLayout_float_4 up;
    struct alt_Vector_float_4_VectorLayout_float_4 forward;
    struct alt_Vector_float_4_VectorLayout_float_4 pos;
} alt_ViewMatrixLayout;

CAPI void alt_ViewMatrixLayout_free(struct alt_ViewMatrixLayout* ptr);

// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create();

// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_1(struct alt_Vector_float_4_VectorLayout_float_4* _rows);

// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_2(struct alt_Vector_float_4_VectorLayout_float_4* row);

// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_3(float* elements);

// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_4(struct alt_Vector_float_4_VectorLayout_float_4* _right, struct alt_Vector_float_4_VectorLayout_float_4* _up, struct alt_Vector_float_4_VectorLayout_float_4* _forward, struct alt_Vector_float_4_VectorLayout_float_4* _pos);

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_ViewMatrixLayout_Access_size_t(struct alt_ViewMatrixLayout* _instance, unsigned long long key);

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_ViewMatrixLayout_Access_size_t_1(struct alt_ViewMatrixLayout* _instance, unsigned long long key);


typedef struct alt_Vector_float_4_VectorLayout_float_4 alt_ViewMatrixLayout_Row;

typedef float alt_ViewMatrixLayout_Element;

typedef struct alt_ViewMatrixLayout alt_ViewMatrixLayout_Transposed;

typedef struct alt_Matrix_float_4_4_ViewMatrixLayout alt_ViewMatrix;

typedef unsigned long long alt_Size;

typedef struct alt_String {
    char * data;
    unsigned long long size;
} alt_String;

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create(unsigned long long _size, char fill);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_1(char* _data, unsigned long long size);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_2();

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_3(char* _str);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_5(struct alt_String* that);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_6(struct alt_String* that);

CAPI char* alt_String_Access_uint64_t(struct alt_String* _instance, unsigned long long key);

CAPI char alt_String_Access_uint64_t_1(struct alt_String* _instance, unsigned long long key);

CAPI void alt_String_Assign_constStringRef(struct alt_String* _instance, struct alt_String* that);

CAPI void alt_String_Assign_StringRefRef(struct alt_String* _instance, struct alt_String* that);

CAPI _Bool alt_String_IsEmpty(struct alt_String* _instance);

CAPI char* alt_String_GetData(struct alt_String* _instance);

CAPI char* alt_String_GetData_1(struct alt_String* _instance);

CAPI unsigned long long alt_String_GetSize(struct alt_String* _instance);

CAPI _Bool alt_String_Equals_String(struct alt_String* _instance, struct alt_String* that);

CAPI _Bool alt_String_NotEquals_String(struct alt_String* _instance, struct alt_String* that);

CAPI char* alt_String_CStr(struct alt_String* _instance);


typedef struct alt_StringView {
    const char * data;
    unsigned long long size;
} alt_StringView;

CAPI void alt_StringView_free(struct alt_StringView* ptr);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create(char* _data, unsigned long long _size);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_1();

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_2(char* _str);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_4(struct alt_String* _str);

CAPI _Bool alt_StringView_IsEmpty(struct alt_StringView* _instance);

CAPI char* alt_StringView_GetData(struct alt_StringView* _instance);

CAPI unsigned long long alt_StringView_GetSize(struct alt_StringView* _instance);

CAPI char alt_StringView_Access_uint64_t(struct alt_StringView* _instance, unsigned long long key);

CAPI _Bool alt_StringView_Equals_StringView(struct alt_StringView* _instance, struct alt_StringView* that);

CAPI _Bool alt_StringView_NotEquals_StringView(struct alt_StringView* _instance, struct alt_StringView* that);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_StringView_To_String(struct alt_StringView* _instance);

CAPI char* alt_StringView_CStr(struct alt_StringView* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_6(struct alt_StringView* _p0);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_7(struct alt_StringView* _p0);

CAPI void alt_StringView_Assign_constStringViewRef(struct alt_StringView* _instance, struct alt_StringView* _p0);

CAPI void alt_StringView_Assign_StringViewRefRef(struct alt_StringView* _instance, struct alt_StringView* _p0);


typedef struct alt_RGBA {
    unsigned char r;
    unsigned char g;
    unsigned char b;
    unsigned char a;
} alt_RGBA;

CAPI void alt_RGBA_free(struct alt_RGBA* ptr);

// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_RGBA_Create();

// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_RGBA_Create_1(unsigned char _r, unsigned char _g, unsigned char _b, unsigned char _a);


typedef struct alt_Array_MValue {
    struct alt_MValue* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_MValue;

// Return ptr must be manually freed with alt_Array_MValue_free()
CAPI struct alt_Array_MValue* alt_Array_MValue_Create();

// Return ptr must be manually freed with alt_Array_MValue_free()
CAPI struct alt_Array_MValue* alt_Array_MValue_Create_1(struct alt_MValue* _data, unsigned long long _size);

// Return ptr must be manually freed with alt_Array_MValue_free()
CAPI struct alt_Array_MValue* alt_Array_MValue_Create_2(unsigned long long _size, struct alt_MValue* fill);

// Return ptr must be manually freed with alt_Array_MValue_free()
CAPI struct alt_Array_MValue* alt_Array_MValue_Create_3(struct alt_Array_MValue* that);

// Return ptr must be manually freed with alt_Array_MValue_free()
CAPI struct alt_Array_MValue* alt_Array_MValue_Create_4(struct alt_Array_MValue* that);

CAPI void alt_Array_MValue_Assign_constArray_MValueRef(struct alt_Array_MValue* _instance, struct alt_Array_MValue* that);

CAPI void alt_Array_MValue_Assign_Array_MValueRefRef(struct alt_Array_MValue* _instance, struct alt_Array_MValue* that);

CAPI void alt_Array_MValue_Push(struct alt_Array_MValue* _instance, struct alt_MValue* el);

CAPI unsigned long long alt_Array_MValue_GetSize(struct alt_Array_MValue* _instance);

CAPI unsigned long long alt_Array_MValue_GetCapacity(struct alt_Array_MValue* _instance);

CAPI struct alt_MValue* alt_Array_MValue_Access_uint64_t(struct alt_Array_MValue* _instance, unsigned long long key);

CAPI struct alt_MValue* alt_Array_MValue_Access_uint64_t_1(struct alt_Array_MValue* _instance, unsigned long long key);

CAPI struct alt_MValue* alt_Array_MValue_begin(struct alt_Array_MValue* _instance);

CAPI struct alt_MValue* alt_Array_MValue_begin_1(struct alt_Array_MValue* _instance);

CAPI struct alt_MValue* alt_Array_MValue_end(struct alt_Array_MValue* _instance);

CAPI struct alt_MValue* alt_Array_MValue_end_1(struct alt_Array_MValue* _instance);


typedef struct alt_Array_String {
    struct alt_String* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_String;

// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create();

// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create_1(struct alt_String* _data, unsigned long long _size);

// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create_2(unsigned long long _size, struct alt_String* fill);

// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create_3(struct alt_Array_String* that);

// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create_4(struct alt_Array_String* that);

CAPI void alt_Array_String_Assign_constArray_StringRef(struct alt_Array_String* _instance, struct alt_Array_String* that);

CAPI void alt_Array_String_Assign_Array_StringRefRef(struct alt_Array_String* _instance, struct alt_Array_String* that);

CAPI void alt_Array_String_Push(struct alt_Array_String* _instance, struct alt_String* el);

CAPI unsigned long long alt_Array_String_GetSize(struct alt_Array_String* _instance);

CAPI unsigned long long alt_Array_String_GetCapacity(struct alt_Array_String* _instance);

CAPI struct alt_String* alt_Array_String_Access_uint64_t(struct alt_Array_String* _instance, unsigned long long key);

CAPI struct alt_String* alt_Array_String_Access_uint64_t_1(struct alt_Array_String* _instance, unsigned long long key);

CAPI struct alt_String* alt_Array_String_begin(struct alt_Array_String* _instance);

CAPI struct alt_String* alt_Array_String_begin_1(struct alt_Array_String* _instance);

CAPI struct alt_String* alt_Array_String_end(struct alt_Array_String* _instance);

CAPI struct alt_String* alt_Array_String_end_1(struct alt_Array_String* _instance);


typedef struct alt_Array_StringView {
    struct alt_StringView* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_StringView;

// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create();

// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_1(struct alt_StringView* _data, unsigned long long _size);

// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_2(unsigned long long _size, struct alt_StringView* fill);

// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_3(struct alt_Array_StringView* that);

// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_4(struct alt_Array_StringView* that);

CAPI void alt_Array_StringView_Assign_constArray_StringViewRef(struct alt_Array_StringView* _instance, struct alt_Array_StringView* that);

CAPI void alt_Array_StringView_Assign_Array_StringViewRefRef(struct alt_Array_StringView* _instance, struct alt_Array_StringView* that);

CAPI void alt_Array_StringView_Push(struct alt_Array_StringView* _instance, struct alt_StringView* el);

CAPI unsigned long long alt_Array_StringView_GetSize(struct alt_Array_StringView* _instance);

CAPI unsigned long long alt_Array_StringView_GetCapacity(struct alt_Array_StringView* _instance);

CAPI struct alt_StringView* alt_Array_StringView_Access_uint64_t(struct alt_Array_StringView* _instance, unsigned long long key);

CAPI struct alt_StringView* alt_Array_StringView_Access_uint64_t_1(struct alt_Array_StringView* _instance, unsigned long long key);

CAPI struct alt_StringView* alt_Array_StringView_begin(struct alt_Array_StringView* _instance);

CAPI struct alt_StringView* alt_Array_StringView_begin_1(struct alt_Array_StringView* _instance);

CAPI struct alt_StringView* alt_Array_StringView_end(struct alt_Array_StringView* _instance);

CAPI struct alt_StringView* alt_Array_StringView_end_1(struct alt_Array_StringView* _instance);


typedef enum alt_MValue_Type {
    ALT_MVALUE_TYPE_NIL = 0,
    ALT_MVALUE_TYPE_BOOL = 1,
    ALT_MVALUE_TYPE_INT = 2,
    ALT_MVALUE_TYPE_UINT = 3,
    ALT_MVALUE_TYPE_DOUBLE = 4,
    ALT_MVALUE_TYPE_STRING = 5,
    ALT_MVALUE_TYPE_LIST = 6,
    ALT_MVALUE_TYPE_DICT = 7,
    ALT_MVALUE_TYPE_ENTITY = 8,
    ALT_MVALUE_TYPE_FUNCTION = 9
};

typedef struct alt_MValue {
    enum alt_MValue_Type type;
    struct alt_MValue_Storage* storage;
} alt_MValue;

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create();

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_1(_Bool* val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_2(long long* val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_3(unsigned long long* val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_4(double* val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_5(struct alt_String* val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_6(struct alt_Array_MValue* val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_8(struct alt_IBaseObject** val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_9(struct alt_MValue_Function* val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_10(int val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_11(unsigned int val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_12(char* val);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValue_Create_14(struct alt_MValue* that);

CAPI void alt_MValue_Assign_constMValueRef(struct alt_MValue* _instance, struct alt_MValue* that);

CAPI _Bool alt_MValue_ToBool(struct alt_MValue* _instance);

CAPI long long alt_MValue_ToInt(struct alt_MValue* _instance);

CAPI unsigned long long alt_MValue_ToUInt(struct alt_MValue* _instance);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_MValue_ToString(struct alt_MValue* _instance);

CAPI enum alt_MValue_Type alt_MValue_GetType(struct alt_MValue* _instance);


typedef enum alt_MValue_Type {
    ALT_MVALUE_TYPE_NIL = 0,
    ALT_MVALUE_TYPE_BOOL = 1,
    ALT_MVALUE_TYPE_INT = 2,
    ALT_MVALUE_TYPE_UINT = 3,
    ALT_MVALUE_TYPE_DOUBLE = 4,
    ALT_MVALUE_TYPE_STRING = 5,
    ALT_MVALUE_TYPE_LIST = 6,
    ALT_MVALUE_TYPE_DICT = 7,
    ALT_MVALUE_TYPE_ENTITY = 8,
    ALT_MVALUE_TYPE_FUNCTION = 9
};

typedef void alt_MValue_Nil;

typedef _Bool alt_MValue_Bool;

typedef long long alt_MValue_Int;

typedef unsigned long long alt_MValue_UInt;

typedef double alt_MValue_Double;

typedef struct alt_String alt_MValue_String;

typedef struct alt_Array_MValue alt_MValue_List;

typedef struct alt_IBaseObject* alt_MValue_Entity;

typedef struct alt_MValue_Function {
    void * invoker;
} alt_MValue_Function;

CAPI void alt_MValue_Function_free(struct alt_MValue_Function* ptr);

// Return ptr must be manually freed with alt_MValue_Function_free()
CAPI struct alt_MValue_Function* alt_MValue_Function_Create();

// Return ptr must be manually freed with alt_MValue_Function_free()
CAPI struct alt_MValue_Function* alt_MValue_Function_Create_1(struct alt_MValue_Function* _p0);

// Return ptr must be manually freed with alt_MValue_Function_free()
CAPI struct alt_MValue_Function* alt_MValue_Function_Create_2(struct alt_MValue_Function* _p0);

CAPI void alt_MValue_Function_Assign_constMValue_FunctionRef(struct alt_MValue_Function* _instance, struct alt_MValue_Function* _p0);

CAPI void alt_MValue_Function_Assign_MValue_FunctionRefRef(struct alt_MValue_Function* _instance, struct alt_MValue_Function* _p0);


CAPI void alt_MValue_TypeMismatchException_free(struct alt_MValue_TypeMismatchException* ptr);

CAPI char* alt_MValue_TypeMismatchException_what(struct alt_MValue_TypeMismatchException* _instance);

// Return ptr must be manually freed with alt_MValue_TypeMismatchException_free()
CAPI struct alt_MValue_TypeMismatchException* alt_MValue_TypeMismatchException_Create(struct alt_MValue_TypeMismatchException* _p0);

// Return ptr must be manually freed with alt_MValue_TypeMismatchException_free()
CAPI struct alt_MValue_TypeMismatchException* alt_MValue_TypeMismatchException_Create_1(struct alt_MValue_TypeMismatchException* _p0);

CAPI void alt_MValue_TypeMismatchException_Assign_constMValue_TypeMismatchExceptionRef(struct alt_MValue_TypeMismatchException* _instance, struct alt_MValue_TypeMismatchException* _p0);

CAPI void alt_MValue_TypeMismatchException_Assign_MValue_TypeMismatchExceptionRefRef(struct alt_MValue_TypeMismatchException* _instance, struct alt_MValue_TypeMismatchException* _p0);

// Return ptr must be manually freed with alt_MValue_TypeMismatchException_free()
CAPI struct alt_MValue_TypeMismatchException* alt_MValue_TypeMismatchException_Create_2();




typedef struct alt_MValue__Storage {
    unsigned long long refCount;
} alt_MValue__Storage;

typedef struct alt_MValue_Storage__Bool {
    unsigned long long refCount;
    _Bool value;
} alt_MValue_Storage__Bool;

typedef struct alt_MValue_Storage_longlong {
    unsigned long long refCount;
    long long value;
} alt_MValue_Storage_longlong;

typedef struct alt_MValue_Storage_unsignedlonglong {
    unsigned long long refCount;
    unsigned long long value;
} alt_MValue_Storage_unsignedlonglong;

typedef struct alt_MValue_Storage_double {
    unsigned long long refCount;
    double value;
} alt_MValue_Storage_double;

typedef struct alt_MValue_Storage_String {
    unsigned long long refCount;
    struct alt_String value;
} alt_MValue_Storage_String;

typedef struct alt_MValue_Storage_Array_MValue {
    unsigned long long refCount;
    struct alt_Array_MValue value;
} alt_MValue_Storage_Array_MValue;

typedef struct alt_MValue_Storage_IBaseObjectPtr {
    unsigned long long refCount;
    struct alt_IBaseObject* value;
} alt_MValue_Storage_IBaseObjectPtr;

typedef struct alt_MValue_Storage_MValue_Function {
    unsigned long long refCount;
    struct alt_MValue_Function value;
} alt_MValue_Storage_MValue_Function;

typedef enum alt_MValue_Type {
    ALT_MVALUE_TYPE_NIL = 0,
    ALT_MVALUE_TYPE_BOOL = 1,
    ALT_MVALUE_TYPE_INT = 2,
    ALT_MVALUE_TYPE_UINT = 3,
    ALT_MVALUE_TYPE_DOUBLE = 4,
    ALT_MVALUE_TYPE_STRING = 5,
    ALT_MVALUE_TYPE_LIST = 6,
    ALT_MVALUE_TYPE_DICT = 7,
    ALT_MVALUE_TYPE_ENTITY = 8,
    ALT_MVALUE_TYPE_FUNCTION = 9
};

typedef struct alt_MValueList {
    enum alt_MValue_Type type;
    struct alt_MValue_Storage* storage;
} alt_MValueList;

CAPI void alt_MValueList_free(struct alt_MValueList* ptr);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create();

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_1(_Bool* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_2(long long* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_3(unsigned long long* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_4(double* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_5(struct alt_String* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_6(struct alt_Array_MValue* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_8(struct alt_IBaseObject** val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_9(struct alt_MValue_Function* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_10(int val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_11(unsigned int val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_12(char* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_14(struct alt_MValue* that);

CAPI void alt_MValueList_Assign_constMValueRef(struct alt_MValueList* _instance, struct alt_MValue* that);

CAPI _Bool alt_MValueList_ToBool(struct alt_MValueList* _instance);

CAPI long long alt_MValueList_ToInt(struct alt_MValueList* _instance);

CAPI unsigned long long alt_MValueList_ToUInt(struct alt_MValueList* _instance);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_MValueList_ToString(struct alt_MValueList* _instance);

CAPI enum alt_MValue_Type alt_MValueList_GetType(struct alt_MValueList* _instance);


// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_15();

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_16(unsigned long long size);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_17(struct alt_Array_MValue* list);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_18(struct alt_MValue* val);

CAPI unsigned long long alt_MValueList_GetSize(struct alt_MValueList* _instance);

CAPI struct alt_MValue* alt_MValueList_Access_uint64_t(struct alt_MValueList* _instance, unsigned long long key);

// Return ptr must be manually freed with alt_Array_MValue_free()
CAPI struct alt_Array_MValue* alt_MValueList_To_Array_MValue(struct alt_MValueList* _instance);

CAPI void alt_MValueList_Push(struct alt_MValueList* _instance, struct alt_MValue* val);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_19(struct alt_MValueList* _p0);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_MValueList_Create_20(struct alt_MValueList* _p0);

CAPI void alt_MValueList_Assign_MValueListRefRef(struct alt_MValueList* _instance, struct alt_MValueList* _p0);

CAPI void alt_MValueList_Assign_constMValueListRef(struct alt_MValueList* _instance, struct alt_MValueList* _p0);


typedef enum alt_MValue_Type {
    ALT_MVALUE_TYPE_NIL = 0,
    ALT_MVALUE_TYPE_BOOL = 1,
    ALT_MVALUE_TYPE_INT = 2,
    ALT_MVALUE_TYPE_UINT = 3,
    ALT_MVALUE_TYPE_DOUBLE = 4,
    ALT_MVALUE_TYPE_STRING = 5,
    ALT_MVALUE_TYPE_LIST = 6,
    ALT_MVALUE_TYPE_DICT = 7,
    ALT_MVALUE_TYPE_ENTITY = 8,
    ALT_MVALUE_TYPE_FUNCTION = 9
};

typedef struct alt_MValueDict {
    enum alt_MValue_Type type;
    struct alt_MValue_Storage* storage;
} alt_MValueDict;

CAPI void alt_MValueDict_free(struct alt_MValueDict* ptr);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create();

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_1(_Bool* val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_2(long long* val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_3(unsigned long long* val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_4(double* val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_5(struct alt_String* val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_6(struct alt_Array_MValue* val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_8(struct alt_IBaseObject** val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_9(struct alt_MValue_Function* val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_10(int val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_11(unsigned int val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_12(char* val);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_14(struct alt_MValue* that);

CAPI void alt_MValueDict_Assign_constMValueRef(struct alt_MValueDict* _instance, struct alt_MValue* that);

CAPI _Bool alt_MValueDict_ToBool(struct alt_MValueDict* _instance);

CAPI long long alt_MValueDict_ToInt(struct alt_MValueDict* _instance);

CAPI unsigned long long alt_MValueDict_ToUInt(struct alt_MValueDict* _instance);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_MValueDict_ToString(struct alt_MValueDict* _instance);

CAPI enum alt_MValue_Type alt_MValueDict_GetType(struct alt_MValueDict* _instance);


// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_15();

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_17(struct alt_MValue* val);

CAPI struct alt_MValue* alt_MValueDict_Access_String(struct alt_MValueDict* _instance, struct alt_String* key);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_18(struct alt_MValueDict* _p0);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_MValueDict_Create_19(struct alt_MValueDict* _p0);

CAPI void alt_MValueDict_Assign_MValueDictRefRef(struct alt_MValueDict* _instance, struct alt_MValueDict* _p0);

CAPI void alt_MValueDict_Assign_constMValueDictRef(struct alt_MValueDict* _instance, struct alt_MValueDict* _p0);


typedef enum alt_IResource_State {
    ALT_IRESOURCE_STATE_STOPPED = 0,
    ALT_IRESOURCE_STATE_INSTANTIATING = 1,
    ALT_IRESOURCE_STATE_STARTED = 2
};

typedef struct alt_IResource {
    struct alt_String type;
    struct alt_String name;
    struct alt_String path;
    struct alt_String main;
    struct alt_IPackage* pkg;
    enum alt_IResource_State state;
    struct alt_MValueDict exports;
} alt_IResource;

CAPI enum alt_IResource_State alt_IResource_GetState(struct alt_IResource* _instance);

CAPI _Bool alt_IResource_IsStarted(struct alt_IResource* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IResource_GetType(struct alt_IResource* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IResource_GetName(struct alt_IResource* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IResource_GetPath(struct alt_IResource* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IResource_GetMain(struct alt_IResource* _instance);

CAPI struct alt_IPackage* alt_IResource_GetPackage(struct alt_IResource* _instance);

// Return ptr must be manually freed with alt_MValueDict_free()
CAPI struct alt_MValueDict* alt_IResource_GetExports(struct alt_IResource* _instance);

CAPI _Bool alt_IResource_Instantiate(struct alt_IResource* _instance);

CAPI _Bool alt_IResource_Start(struct alt_IResource* _instance);

CAPI _Bool alt_IResource_Stop(struct alt_IResource* _instance);

CAPI _Bool alt_IResource_OnEvent(struct alt_IResource* _instance, struct alt_CEvent* ev);

CAPI void alt_IResource_OnTick(struct alt_IResource* _instance);

CAPI void alt_IResource_OnCreateBaseObject(struct alt_IResource* _instance, struct alt_IBaseObject* object);

CAPI void alt_IResource_OnRemoveBaseObject(struct alt_IResource* _instance, struct alt_IBaseObject* object);

// Return ptr must be manually freed with alt_IResource_free()
CAPI struct alt_IResource* alt_IResource_Create(struct alt_IResource* _p0);

CAPI void alt_IResource_Assign_constIResourceRef(struct alt_IResource* _instance, struct alt_IResource* _p0);


typedef enum alt_IResource_State {
    ALT_IRESOURCE_STATE_STOPPED = 0,
    ALT_IRESOURCE_STATE_INSTANTIATING = 1,
    ALT_IRESOURCE_STATE_STARTED = 2
};

typedef struct alt_IResource_CreationInfo {
    struct alt_String type;
    struct alt_String name;
    struct alt_String path;
    struct alt_String main;
    struct alt_Array_String deps;
    struct alt_IPackage* pkg;
} alt_IResource_CreationInfo;

CAPI void alt_IResource_CreationInfo_free(struct alt_IResource_CreationInfo* ptr);

// Return ptr must be manually freed with alt_IResource_CreationInfo_free()
CAPI struct alt_IResource_CreationInfo* alt_IResource_CreationInfo_Create(struct alt_IResource_CreationInfo* _p0);

// Return ptr must be manually freed with alt_IResource_CreationInfo_free()
CAPI struct alt_IResource_CreationInfo* alt_IResource_CreationInfo_Create_1(struct alt_IResource_CreationInfo* _p0);

CAPI void alt_IResource_CreationInfo_Assign_IResource_CreationInfoRefRef(struct alt_IResource_CreationInfo* _instance, struct alt_IResource_CreationInfo* _p0);


typedef enum alt_MValue_Type {
    ALT_MVALUE_TYPE_NIL = 0,
    ALT_MVALUE_TYPE_BOOL = 1,
    ALT_MVALUE_TYPE_INT = 2,
    ALT_MVALUE_TYPE_UINT = 3,
    ALT_MVALUE_TYPE_DOUBLE = 4,
    ALT_MVALUE_TYPE_STRING = 5,
    ALT_MVALUE_TYPE_LIST = 6,
    ALT_MVALUE_TYPE_DICT = 7,
    ALT_MVALUE_TYPE_ENTITY = 8,
    ALT_MVALUE_TYPE_FUNCTION = 9
};

typedef struct alt_MValueFunction {
    enum alt_MValue_Type type;
    struct alt_MValue_Storage* storage;
} alt_MValueFunction;

CAPI void alt_MValueFunction_free(struct alt_MValueFunction* ptr);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create();

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_1(_Bool* val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_2(long long* val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_3(unsigned long long* val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_4(double* val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_5(struct alt_String* val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_6(struct alt_Array_MValue* val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_8(struct alt_IBaseObject** val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_9(struct alt_MValue_Function* val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_10(int val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_11(unsigned int val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_12(char* val);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_14(struct alt_MValue* that);

CAPI void alt_MValueFunction_Assign_constMValueRef(struct alt_MValueFunction* _instance, struct alt_MValue* that);

CAPI _Bool alt_MValueFunction_ToBool(struct alt_MValueFunction* _instance);

CAPI long long alt_MValueFunction_ToInt(struct alt_MValueFunction* _instance);

CAPI unsigned long long alt_MValueFunction_ToUInt(struct alt_MValueFunction* _instance);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_MValueFunction_ToString(struct alt_MValueFunction* _instance);

CAPI enum alt_MValue_Type alt_MValueFunction_GetType(struct alt_MValueFunction* _instance);


// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_15(struct alt_MValue_Function* func);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_16(struct alt_MValueFunction_Invoker* invoker);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_17(struct alt_MValue* val);

CAPI struct alt_MValueFunction_Invoker* alt_MValueFunction_GetInvoker(struct alt_MValueFunction* _instance);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_18(struct alt_MValueFunction* _p0);

// Return ptr must be manually freed with alt_MValueFunction_free()
CAPI struct alt_MValueFunction* alt_MValueFunction_Create_19(struct alt_MValueFunction* _p0);

CAPI void alt_MValueFunction_Assign_MValueFunctionRefRef(struct alt_MValueFunction* _instance, struct alt_MValueFunction* _p0);


typedef struct alt_MValueFunction_Invoker alt_MValueFunction_Invoker;

CAPI void alt_MValueFunction_Invoker_free(struct alt_MValueFunction_Invoker* ptr);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_MValueFunction_Invoker_Invoke(struct alt_MValueFunction_Invoker* _instance, struct alt_MValueList* args);

CAPI void alt_MValueFunction_Invoker_Assign_constMValueFunction_InvokerRef(struct alt_MValueFunction_Invoker* _instance, struct alt_MValueFunction_Invoker* _p0);

CAPI void alt_MValueFunction_Invoker_Assign_MValueFunction_InvokerRefRef(struct alt_MValueFunction_Invoker* _instance, struct alt_MValueFunction_Invoker* _p0);


typedef struct alt_IBaseObject alt_IBaseObject;

CAPI enum alt_IBaseObject_Type alt_IBaseObject_GetType(struct alt_IBaseObject* _instance);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IBaseObject_GetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key);

CAPI void alt_IBaseObject_SetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key, struct alt_MValue* val);

CAPI void alt_IBaseObject_Assign_constIBaseObjectRef(struct alt_IBaseObject* _instance, struct alt_IBaseObject* _p0);


typedef enum alt_IBaseObject_Type {
    ALT_IBASEOBJECT_TYPE_PLAYER = 0,
    ALT_IBASEOBJECT_TYPE_VEHICLE = 1,
    ALT_IBASEOBJECT_TYPE_CHECKPOINT = 2,
    ALT_IBASEOBJECT_TYPE_BLIP = 3,
    ALT_IBASEOBJECT_TYPE_WEBVIEW = 4,
    ALT_IBASEOBJECT_TYPE_VOICE_CHANNEL = 5,
    ALT_IBASEOBJECT_TYPE_COLSHAPE = 6
};

typedef struct alt_IWorldObject alt_IWorldObject;

CAPI enum alt_IBaseObject_Type alt_IWorldObject_GetType(struct alt_IWorldObject* _instance);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IWorldObject_GetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key);

CAPI void alt_IWorldObject_SetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key, struct alt_MValue* val);

CAPI void alt_IWorldObject_Assign_constIBaseObjectRef(struct alt_IWorldObject* _instance, struct alt_IBaseObject* _p0);


// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IWorldObject_GetPosition(struct alt_IWorldObject* _instance);

CAPI short alt_IWorldObject_GetDimension(struct alt_IWorldObject* _instance);

CAPI void alt_IWorldObject_Assign_constIWorldObjectRef(struct alt_IWorldObject* _instance, struct alt_IWorldObject* _p0);


typedef struct alt_IEntity alt_IEntity;

CAPI enum alt_IBaseObject_Type alt_IEntity_GetType(struct alt_IEntity* _instance);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IEntity_GetMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI void alt_IEntity_SetMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_MValue* val);

CAPI void alt_IEntity_Assign_constIBaseObjectRef(struct alt_IEntity* _instance, struct alt_IBaseObject* _p0);


// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IEntity_GetPosition(struct alt_IEntity* _instance);

CAPI short alt_IEntity_GetDimension(struct alt_IEntity* _instance);

CAPI void alt_IEntity_Assign_constIWorldObjectRef(struct alt_IEntity* _instance, struct alt_IWorldObject* _p0);


CAPI unsigned short alt_IEntity_GetID(struct alt_IEntity* _instance);

CAPI unsigned int alt_IEntity_GetModel(struct alt_IEntity* _instance);

// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IEntity_GetRotation(struct alt_IEntity* _instance);

CAPI void alt_IEntity_SetRotation(struct alt_IEntity* _instance, struct alt_Vector_float_3_RotationLayout* rot);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IEntity_GetSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI void alt_IEntity_Assign_constIEntityRef(struct alt_IEntity* _instance, struct alt_IEntity* _p0);


typedef struct alt_IPlayer alt_IPlayer;

CAPI enum alt_IBaseObject_Type alt_IPlayer_GetType(struct alt_IPlayer* _instance);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IPlayer_GetMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI void alt_IPlayer_SetMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_MValue* val);

CAPI void alt_IPlayer_Assign_constIBaseObjectRef(struct alt_IPlayer* _instance, struct alt_IBaseObject* _p0);


// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetPosition(struct alt_IPlayer* _instance);

CAPI short alt_IPlayer_GetDimension(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_Assign_constIWorldObjectRef(struct alt_IPlayer* _instance, struct alt_IWorldObject* _p0);


CAPI unsigned short alt_IPlayer_GetID(struct alt_IPlayer* _instance);

CAPI unsigned int alt_IPlayer_GetModel(struct alt_IPlayer* _instance);

// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IPlayer_GetRotation(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetRotation(struct alt_IPlayer* _instance, struct alt_Vector_float_3_RotationLayout* rot);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IPlayer_GetSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI void alt_IPlayer_Assign_constIEntityRef(struct alt_IPlayer* _instance, struct alt_IEntity* _p0);


CAPI _Bool alt_IPlayer_IsConnected(struct alt_IPlayer* _instance);

CAPI unsigned int alt_IPlayer_GetPing(struct alt_IPlayer* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IPlayer_GetIP(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_Spawn(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* pos, unsigned int delayMs);

CAPI void alt_IPlayer_Despawn(struct alt_IPlayer* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IPlayer_GetName(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetName(struct alt_IPlayer* _instance, struct alt_StringView* name);

CAPI unsigned short alt_IPlayer_GetHealth(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetHealth(struct alt_IPlayer* _instance, unsigned short health);

CAPI unsigned short alt_IPlayer_GetMaxHealth(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetMaxHealth(struct alt_IPlayer* _instance, unsigned short health);

CAPI void alt_IPlayer_SetDateTime(struct alt_IPlayer* _instance, int day, int month, int year, int hour, int minute, int second);

CAPI void alt_IPlayer_SetWeather(struct alt_IPlayer* _instance, unsigned int weather);

CAPI void alt_IPlayer_GiveWeapon(struct alt_IPlayer* _instance, unsigned int weapon, int ammo, _Bool selectWeapon);

CAPI void alt_IPlayer_RemoveWeapon(struct alt_IPlayer* _instance, unsigned int weapon);

CAPI void alt_IPlayer_RemoveAllWeapons(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_AddWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component);

CAPI void alt_IPlayer_RemoveWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component);

// Return ptr must be manually freed with alt_Array_unsignedint_free()
CAPI struct alt_Array_unsignedint* alt_IPlayer_GetCurrentWeaponComponents(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetWeaponTintIndex(struct alt_IPlayer* _instance, unsigned int weapon, unsigned char tintIndex);

CAPI unsigned char alt_IPlayer_GetCurrentWeaponTintIndex(struct alt_IPlayer* _instance);

CAPI unsigned int alt_IPlayer_GetCurrentWeapon(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetCurrentWeapon(struct alt_IPlayer* _instance, unsigned int weapon);

CAPI _Bool alt_IPlayer_IsDead(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsJumping(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsInRagdoll(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsAiming(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsShooting(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsReloading(struct alt_IPlayer* _instance);

CAPI unsigned short alt_IPlayer_GetArmour(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetArmour(struct alt_IPlayer* _instance, unsigned short armor);

CAPI unsigned short alt_IPlayer_GetMaxArmour(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetMaxArmour(struct alt_IPlayer* _instance, unsigned short armor);

CAPI float alt_IPlayer_GetMoveSpeed(struct alt_IPlayer* _instance);

CAPI unsigned int alt_IPlayer_GetWeapon(struct alt_IPlayer* _instance);

CAPI unsigned short alt_IPlayer_GetAmmo(struct alt_IPlayer* _instance);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetAimPos(struct alt_IPlayer* _instance);

// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IPlayer_GetHeadRotation(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsInVehicle(struct alt_IPlayer* _instance);

CAPI struct alt_IVehicle* alt_IPlayer_GetVehicle(struct alt_IPlayer* _instance);

CAPI unsigned char alt_IPlayer_GetSeat(struct alt_IPlayer* _instance);

CAPI struct alt_IEntity* alt_IPlayer_GetEntityAimingAt(struct alt_IPlayer* _instance);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetEntityAimOffset(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsFlashlightActive(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_Kick(struct alt_IPlayer* _instance, struct alt_StringView* reason);

CAPI void alt_IPlayer_Assign_constIPlayerRef(struct alt_IPlayer* _instance, struct alt_IPlayer* _p0);


typedef struct alt_IVehicle alt_IVehicle;

CAPI enum alt_IBaseObject_Type alt_IVehicle_GetType(struct alt_IVehicle* _instance);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IVehicle_GetMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI void alt_IVehicle_SetMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_MValue* val);

CAPI void alt_IVehicle_Assign_constIBaseObjectRef(struct alt_IVehicle* _instance, struct alt_IBaseObject* _p0);


// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IVehicle_GetPosition(struct alt_IVehicle* _instance);

CAPI short alt_IVehicle_GetDimension(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_Assign_constIWorldObjectRef(struct alt_IVehicle* _instance, struct alt_IWorldObject* _p0);


CAPI unsigned short alt_IVehicle_GetID(struct alt_IVehicle* _instance);

CAPI unsigned int alt_IVehicle_GetModel(struct alt_IVehicle* _instance);

// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IVehicle_GetRotation(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetRotation(struct alt_IVehicle* _instance, struct alt_Vector_float_3_RotationLayout* rot);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IVehicle_GetSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI void alt_IVehicle_Assign_constIEntityRef(struct alt_IVehicle* _instance, struct alt_IEntity* _p0);


CAPI struct alt_IPlayer* alt_IVehicle_GetDriver(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetMod(struct alt_IVehicle* _instance, unsigned char category);

CAPI unsigned char alt_IVehicle_GetModsCount(struct alt_IVehicle* _instance, unsigned char category);

CAPI _Bool alt_IVehicle_SetMod(struct alt_IVehicle* _instance, unsigned char category, unsigned char id);

CAPI unsigned char alt_IVehicle_GetModKitsCount(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetModKit(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_SetModKit(struct alt_IVehicle* _instance, unsigned char id);

CAPI _Bool alt_IVehicle_IsPrimaryColorRGB(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetPrimaryColor(struct alt_IVehicle* _instance);

// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_IVehicle_GetPrimaryColorRGB(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetPrimaryColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI void alt_IVehicle_SetPrimaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color);

CAPI _Bool alt_IVehicle_IsSecondaryColorRGB(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetSecondaryColor(struct alt_IVehicle* _instance);

// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_IVehicle_GetSecondaryColorRGB(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetSecondaryColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI void alt_IVehicle_SetSecondaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color);

CAPI unsigned char alt_IVehicle_GetPearlColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetPearlColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI unsigned char alt_IVehicle_GetWheelColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetWheelColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI unsigned char alt_IVehicle_GetInteriorColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetInteriorColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI unsigned char alt_IVehicle_GetDashboardColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetDashboardColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI _Bool alt_IVehicle_IsTireSmokeColorCustom(struct alt_IVehicle* _instance);

// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_IVehicle_GetTireSmokeColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetTireSmokeColor(struct alt_IVehicle* _instance, struct alt_RGBA* color);

CAPI unsigned char alt_IVehicle_GetWheelType(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetWheelVariation(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetWheels(struct alt_IVehicle* _instance, unsigned char type, unsigned char variation);

CAPI _Bool alt_IVehicle_GetCustomTires(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetCustomTires(struct alt_IVehicle* _instance, _Bool state);

CAPI unsigned char alt_IVehicle_GetSpecialDarkness(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetSpecialDarkness(struct alt_IVehicle* _instance, unsigned char value);

CAPI unsigned int alt_IVehicle_GetNumberplateIndex(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetNumberplateIndex(struct alt_IVehicle* _instance, unsigned int index);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IVehicle_GetNumberplateText(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetNumberplateText(struct alt_IVehicle* _instance, struct alt_StringView* text);

CAPI unsigned char alt_IVehicle_GetWindowTint(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetWindowTint(struct alt_IVehicle* _instance, unsigned char tint);

CAPI unsigned char alt_IVehicle_GetDirtLevel(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetDirtLevel(struct alt_IVehicle* _instance, unsigned char level);

CAPI _Bool alt_IVehicle_IsExtraOn(struct alt_IVehicle* _instance, unsigned char extraID);

CAPI void alt_IVehicle_ToggleExtra(struct alt_IVehicle* _instance, unsigned char extraID, _Bool state);

CAPI _Bool alt_IVehicle_IsNeonActive(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_GetNeonActive(struct alt_IVehicle* _instance, _Bool* left, _Bool* right, _Bool* front, _Bool* back);

CAPI void alt_IVehicle_SetNeonActive(struct alt_IVehicle* _instance, _Bool left, _Bool right, _Bool front, _Bool back);

// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_IVehicle_GetNeonColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetNeonColor(struct alt_IVehicle* _instance, struct alt_RGBA* color);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetAppearanceDataBase64(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadAppearanceDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI _Bool alt_IVehicle_IsEngineOn(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetEngineOn(struct alt_IVehicle* _instance, _Bool state);

CAPI _Bool alt_IVehicle_IsHandbrakeActive(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetHeadlightColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetHeadlightColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI unsigned int alt_IVehicle_GetRadioStationIndex(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetRadioStationIndex(struct alt_IVehicle* _instance, unsigned int stationIndex);

CAPI _Bool alt_IVehicle_IsSirenActive(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetSirenActive(struct alt_IVehicle* _instance, _Bool state);

CAPI unsigned char alt_IVehicle_GetLockState(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetLockState(struct alt_IVehicle* _instance, unsigned char state);

CAPI unsigned char alt_IVehicle_GetDoorState(struct alt_IVehicle* _instance, unsigned char doorId);

CAPI void alt_IVehicle_SetDoorState(struct alt_IVehicle* _instance, unsigned char doorId, unsigned char state);

CAPI _Bool alt_IVehicle_IsWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId);

CAPI void alt_IVehicle_SetWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId, _Bool state);

CAPI _Bool alt_IVehicle_IsDaylightOn(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_IsNightlightOn(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_IsRoofOpened(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetRoofOpened(struct alt_IVehicle* _instance, _Bool state);

CAPI _Bool alt_IVehicle_IsFlamethrowerActive(struct alt_IVehicle* _instance);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetGameStateBase64(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadGameStateFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI int alt_IVehicle_GetEngineHealth(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetEngineHealth(struct alt_IVehicle* _instance, int health);

CAPI int alt_IVehicle_GetPetrolTankHealth(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetPetrolTankHealth(struct alt_IVehicle* _instance, int health);

CAPI unsigned char alt_IVehicle_GetWheelsCount(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_IsWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId);

CAPI void alt_IVehicle_SetWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

CAPI _Bool alt_IVehicle_DoesWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId);

CAPI void alt_IVehicle_SetWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

CAPI float alt_IVehicle_GetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId);

CAPI void alt_IVehicle_SetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId, float health);

CAPI unsigned char alt_IVehicle_GetRepairsCount(struct alt_IVehicle* _instance);

CAPI unsigned int alt_IVehicle_GetBodyHealth(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetBodyHealth(struct alt_IVehicle* _instance, unsigned int health);

CAPI unsigned int alt_IVehicle_GetBodyAdditionalHealth(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetBodyAdditionalHealth(struct alt_IVehicle* _instance, unsigned int health);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetHealthDataBase64(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadHealthDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI unsigned char alt_IVehicle_GetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId);

CAPI void alt_IVehicle_SetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId, unsigned char damage);

CAPI unsigned char alt_IVehicle_GetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId);

CAPI void alt_IVehicle_SetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId, unsigned char shootsCount);

CAPI _Bool alt_IVehicle_IsLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId);

CAPI void alt_IVehicle_SetLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId, _Bool isDamaged);

CAPI _Bool alt_IVehicle_IsWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId);

CAPI void alt_IVehicle_SetWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId, _Bool isDamaged);

CAPI _Bool alt_IVehicle_IsSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId);

CAPI void alt_IVehicle_SetSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId, _Bool isDamaged);

CAPI _Bool alt_IVehicle_HasArmoredWindows(struct alt_IVehicle* _instance);

CAPI float alt_IVehicle_GetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId);

CAPI void alt_IVehicle_SetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId, float health);

CAPI unsigned char alt_IVehicle_GetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId);

CAPI void alt_IVehicle_SetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId, unsigned char count);

CAPI unsigned char alt_IVehicle_GetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId);

CAPI void alt_IVehicle_SetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId, unsigned char damageLevel);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetDamageDataBase64(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadDamageDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI void alt_IVehicle_SetManualEngineControl(struct alt_IVehicle* _instance, _Bool state);

CAPI _Bool alt_IVehicle_IsManualEngineControl(struct alt_IVehicle* _instance);

// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetScriptDataBase64(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadScriptDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI void alt_IVehicle_Assign_constIVehicleRef(struct alt_IVehicle* _instance, struct alt_IVehicle* _p0);


typedef struct alt_ICheckpoint alt_ICheckpoint;

CAPI enum alt_IBaseObject_Type alt_ICheckpoint_GetType(struct alt_ICheckpoint* _instance);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_ICheckpoint_GetMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key);

CAPI void alt_ICheckpoint_SetMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key, struct alt_MValue* val);

CAPI void alt_ICheckpoint_Assign_constIBaseObjectRef(struct alt_ICheckpoint* _instance, struct alt_IBaseObject* _p0);


// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_ICheckpoint_GetPosition(struct alt_ICheckpoint* _instance);

CAPI short alt_ICheckpoint_GetDimension(struct alt_ICheckpoint* _instance);

CAPI void alt_ICheckpoint_Assign_constIWorldObjectRef(struct alt_ICheckpoint* _instance, struct alt_IWorldObject* _p0);


CAPI _Bool alt_ICheckpoint_IsGlobal(struct alt_ICheckpoint* _instance);

CAPI struct alt_IPlayer* alt_ICheckpoint_GetTarget(struct alt_ICheckpoint* _instance);

CAPI unsigned char alt_ICheckpoint_GetCheckpointType(struct alt_ICheckpoint* _instance);

CAPI float alt_ICheckpoint_GetHeight(struct alt_ICheckpoint* _instance);

CAPI float alt_ICheckpoint_GetRadius(struct alt_ICheckpoint* _instance);

// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_ICheckpoint_GetColor(struct alt_ICheckpoint* _instance);

CAPI _Bool alt_ICheckpoint_IsEntityIn(struct alt_ICheckpoint* _instance, struct alt_IEntity* ent);

CAPI void alt_ICheckpoint_Assign_constICheckpointRef(struct alt_ICheckpoint* _instance, struct alt_ICheckpoint* _p0);


typedef struct alt_IBlip alt_IBlip;

CAPI enum alt_IBaseObject_Type alt_IBlip_GetType(struct alt_IBlip* _instance);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IBlip_GetMetaData(struct alt_IBlip* _instance, struct alt_StringView* key);

CAPI void alt_IBlip_SetMetaData(struct alt_IBlip* _instance, struct alt_StringView* key, struct alt_MValue* val);

CAPI void alt_IBlip_Assign_constIBaseObjectRef(struct alt_IBlip* _instance, struct alt_IBaseObject* _p0);


// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IBlip_GetPosition(struct alt_IBlip* _instance);

CAPI short alt_IBlip_GetDimension(struct alt_IBlip* _instance);

CAPI void alt_IBlip_Assign_constIWorldObjectRef(struct alt_IBlip* _instance, struct alt_IWorldObject* _p0);


CAPI _Bool alt_IBlip_IsGlobal(struct alt_IBlip* _instance);

CAPI struct alt_IPlayer* alt_IBlip_GetTarget(struct alt_IBlip* _instance);

CAPI _Bool alt_IBlip_IsAttached(struct alt_IBlip* _instance);

CAPI struct alt_IEntity* alt_IBlip_AttachedTo(struct alt_IBlip* _instance);

CAPI enum alt_IBlip_Type alt_IBlip_GetBlipType(struct alt_IBlip* _instance);

CAPI void alt_IBlip_SetSprite(struct alt_IBlip* _instance, unsigned short sprite);

CAPI void alt_IBlip_SetColor(struct alt_IBlip* _instance, unsigned char color);

CAPI void alt_IBlip_SetRoute(struct alt_IBlip* _instance, _Bool state);

CAPI void alt_IBlip_SetRouteColor(struct alt_IBlip* _instance, unsigned char color);

CAPI void alt_IBlip_Assign_constIBlipRef(struct alt_IBlip* _instance, struct alt_IBlip* _p0);


typedef enum alt_IBlip_Type {
    ALT_IBLIP_TYPE_VEHICLE = 1,
    ALT_IBLIP_TYPE_PED = 2,
    ALT_IBLIP_TYPE_OBJECT = 3,
    ALT_IBLIP_TYPE_DESTINATION = 4,
    ALT_IBLIP_TYPE_CONT = 5,
    ALT_IBLIP_TYPE_PICKUP_UNK = 6,
    ALT_IBLIP_TYPE_RADIUS = 7,
    ALT_IBLIP_TYPE_PICKUP = 8,
    ALT_IBLIP_TYPE_COP = 9,
    ALT_IBLIP_TYPE_AREA = 11,
    ALT_IBLIP_TYPE_GALLERY = 12,
    ALT_IBLIP_TYPE_PICKUP_OBJECT = 13
};

typedef struct alt_IVoiceChannel alt_IVoiceChannel;

CAPI enum alt_IBaseObject_Type alt_IVoiceChannel_GetType(struct alt_IVoiceChannel* _instance);

// Return ptr must be manually freed with alt_MValue_free()
CAPI struct alt_MValue* alt_IVoiceChannel_GetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key);

CAPI void alt_IVoiceChannel_SetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key, struct alt_MValue* val);

CAPI void alt_IVoiceChannel_Assign_constIBaseObjectRef(struct alt_IVoiceChannel* _instance, struct alt_IBaseObject* _p0);


CAPI void alt_IVoiceChannel_AddPlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player);

CAPI void alt_IVoiceChannel_RemovePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player);

CAPI void alt_IVoiceChannel_MutePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player);

CAPI void alt_IVoiceChannel_UnmutePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player);

CAPI _Bool alt_IVoiceChannel_IsPlayerConnected(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player);

CAPI _Bool alt_IVoiceChannel_IsPlayerMuted(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player);

CAPI _Bool alt_IVoiceChannel_IsSpatial(struct alt_IVoiceChannel* _instance);

CAPI float alt_IVoiceChannel_GetMaxDistance(struct alt_IVoiceChannel* _instance);

CAPI void alt_IVoiceChannel_Assign_constIVoiceChannelRef(struct alt_IVoiceChannel* _instance, struct alt_IVoiceChannel* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
} alt_CEvent;

CAPI void alt_CEvent_free(struct alt_CEvent* ptr);

// Return ptr must be manually freed with alt_CEvent_free()
CAPI struct alt_CEvent* alt_CEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CEvent_GetType(struct alt_CEvent* _instance);

CAPI _Bool alt_CEvent_WasCancelled(struct alt_CEvent* _instance);

CAPI void alt_CEvent_Cancel(struct alt_CEvent* _instance);

// Return ptr must be manually freed with alt_CEvent_free()
CAPI struct alt_CEvent* alt_CEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CEvent_Assign_constCEventRef(struct alt_CEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CEvent_free()
CAPI struct alt_CEvent* alt_CEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CEvent_Assign_CEventRefRef(struct alt_CEvent* _instance, struct alt_CEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CServerScriptEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String name;
    struct alt_MValueList args;
} alt_CServerScriptEvent;

CAPI void alt_CServerScriptEvent_free(struct alt_CServerScriptEvent* ptr);

// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CServerScriptEvent_GetType(struct alt_CServerScriptEvent* _instance);

CAPI _Bool alt_CServerScriptEvent_WasCancelled(struct alt_CServerScriptEvent* _instance);

CAPI void alt_CServerScriptEvent_Cancel(struct alt_CServerScriptEvent* _instance);

// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CServerScriptEvent_Assign_constCEventRef(struct alt_CServerScriptEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CServerScriptEvent_Assign_CEventRefRef(struct alt_CServerScriptEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_3(struct alt_StringView* _name, struct alt_MValueList* _args);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CServerScriptEvent_GetName(struct alt_CServerScriptEvent* _instance);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_CServerScriptEvent_GetArgs(struct alt_CServerScriptEvent* _instance);

// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_4(struct alt_CServerScriptEvent* _p0);

// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_5(struct alt_CServerScriptEvent* _p0);

CAPI void alt_CServerScriptEvent_Assign_constCServerScriptEventRef(struct alt_CServerScriptEvent* _instance, struct alt_CServerScriptEvent* _p0);

CAPI void alt_CServerScriptEvent_Assign_CServerScriptEventRefRef(struct alt_CServerScriptEvent* _instance, struct alt_CServerScriptEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CClientScriptEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String name;
    struct alt_MValueList args;
} alt_CClientScriptEvent;

CAPI void alt_CClientScriptEvent_free(struct alt_CClientScriptEvent* ptr);

// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CClientScriptEvent_GetType(struct alt_CClientScriptEvent* _instance);

CAPI _Bool alt_CClientScriptEvent_WasCancelled(struct alt_CClientScriptEvent* _instance);

CAPI void alt_CClientScriptEvent_Cancel(struct alt_CClientScriptEvent* _instance);

// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CClientScriptEvent_Assign_constCEventRef(struct alt_CClientScriptEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CClientScriptEvent_Assign_CEventRefRef(struct alt_CClientScriptEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_3(struct alt_StringView* _name, struct alt_MValueList* _args);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CClientScriptEvent_GetName(struct alt_CClientScriptEvent* _instance);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_CClientScriptEvent_GetArgs(struct alt_CClientScriptEvent* _instance);

// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_4(struct alt_CClientScriptEvent* _p0);

// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_5(struct alt_CClientScriptEvent* _p0);

CAPI void alt_CClientScriptEvent_Assign_constCClientScriptEventRef(struct alt_CClientScriptEvent* _instance, struct alt_CClientScriptEvent* _p0);

CAPI void alt_CClientScriptEvent_Assign_CClientScriptEventRefRef(struct alt_CClientScriptEvent* _instance, struct alt_CClientScriptEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CPlayerConnectEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IPlayer* target;
    struct alt_String reason;
} alt_CPlayerConnectEvent;

CAPI void alt_CPlayerConnectEvent_free(struct alt_CPlayerConnectEvent* ptr);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CPlayerConnectEvent_GetType(struct alt_CPlayerConnectEvent* _instance);

CAPI _Bool alt_CPlayerConnectEvent_WasCancelled(struct alt_CPlayerConnectEvent* _instance);

CAPI void alt_CPlayerConnectEvent_Cancel(struct alt_CPlayerConnectEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CPlayerConnectEvent_Assign_constCEventRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CPlayerConnectEvent_Assign_CEventRefRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_3(struct alt_IPlayer* _target);

CAPI struct alt_IPlayer* alt_CPlayerConnectEvent_GetTarget(struct alt_CPlayerConnectEvent* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CPlayerConnectEvent_GetReason(struct alt_CPlayerConnectEvent* _instance);

CAPI void alt_CPlayerConnectEvent_Cancel_1(struct alt_CPlayerConnectEvent* _instance, struct alt_StringView* _reason);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_4(struct alt_CPlayerConnectEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_5(struct alt_CPlayerConnectEvent* _p0);

CAPI void alt_CPlayerConnectEvent_Assign_constCPlayerConnectEventRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CPlayerConnectEvent* _p0);

CAPI void alt_CPlayerConnectEvent_Assign_CPlayerConnectEventRefRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CPlayerConnectEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CPlayerDisconnectEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IPlayer* target;
    struct alt_String reason;
} alt_CPlayerDisconnectEvent;

CAPI void alt_CPlayerDisconnectEvent_free(struct alt_CPlayerDisconnectEvent* ptr);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CPlayerDisconnectEvent_GetType(struct alt_CPlayerDisconnectEvent* _instance);

CAPI _Bool alt_CPlayerDisconnectEvent_WasCancelled(struct alt_CPlayerDisconnectEvent* _instance);

CAPI void alt_CPlayerDisconnectEvent_Cancel(struct alt_CPlayerDisconnectEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDisconnectEvent_Assign_constCEventRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDisconnectEvent_Assign_CEventRefRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_3(struct alt_IPlayer* _target, struct alt_StringView* _reason);

CAPI struct alt_IPlayer* alt_CPlayerDisconnectEvent_GetTarget(struct alt_CPlayerDisconnectEvent* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CPlayerDisconnectEvent_GetReason(struct alt_CPlayerDisconnectEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_4(struct alt_CPlayerDisconnectEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_5(struct alt_CPlayerDisconnectEvent* _p0);

CAPI void alt_CPlayerDisconnectEvent_Assign_constCPlayerDisconnectEventRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CPlayerDisconnectEvent* _p0);

CAPI void alt_CPlayerDisconnectEvent_Assign_CPlayerDisconnectEventRefRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CPlayerDisconnectEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CPlayerDamageEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IPlayer* target;
    struct alt_IEntity* attacker;
    unsigned short damage;
    unsigned int weapon;
} alt_CPlayerDamageEvent;

CAPI void alt_CPlayerDamageEvent_free(struct alt_CPlayerDamageEvent* ptr);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CPlayerDamageEvent_GetType(struct alt_CPlayerDamageEvent* _instance);

CAPI _Bool alt_CPlayerDamageEvent_WasCancelled(struct alt_CPlayerDamageEvent* _instance);

CAPI void alt_CPlayerDamageEvent_Cancel(struct alt_CPlayerDamageEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDamageEvent_Assign_constCEventRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDamageEvent_Assign_CEventRefRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_3(struct alt_IPlayer* _target, struct alt_IEntity* _attacker, unsigned short _damage, unsigned int _weapon);

CAPI struct alt_IPlayer* alt_CPlayerDamageEvent_GetTarget(struct alt_CPlayerDamageEvent* _instance);

CAPI struct alt_IEntity* alt_CPlayerDamageEvent_GetAttacker(struct alt_CPlayerDamageEvent* _instance);

CAPI unsigned short alt_CPlayerDamageEvent_GetDamage(struct alt_CPlayerDamageEvent* _instance);

CAPI unsigned int alt_CPlayerDamageEvent_GetWeapon(struct alt_CPlayerDamageEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_4(struct alt_CPlayerDamageEvent* _p0);

CAPI void alt_CPlayerDamageEvent_Assign_constCPlayerDamageEventRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CPlayerDamageEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CPlayerDeathEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IPlayer* target;
    struct alt_IEntity* killer;
    unsigned int weapon;
} alt_CPlayerDeathEvent;

CAPI void alt_CPlayerDeathEvent_free(struct alt_CPlayerDeathEvent* ptr);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CPlayerDeathEvent_GetType(struct alt_CPlayerDeathEvent* _instance);

CAPI _Bool alt_CPlayerDeathEvent_WasCancelled(struct alt_CPlayerDeathEvent* _instance);

CAPI void alt_CPlayerDeathEvent_Cancel(struct alt_CPlayerDeathEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDeathEvent_Assign_constCEventRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDeathEvent_Assign_CEventRefRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_3(struct alt_IPlayer* _target, struct alt_IEntity* _killer, unsigned int _weapon);

CAPI struct alt_IPlayer* alt_CPlayerDeathEvent_GetTarget(struct alt_CPlayerDeathEvent* _instance);

CAPI struct alt_IEntity* alt_CPlayerDeathEvent_GetKiller(struct alt_CPlayerDeathEvent* _instance);

CAPI unsigned int alt_CPlayerDeathEvent_GetWeapon(struct alt_CPlayerDeathEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_4(struct alt_CPlayerDeathEvent* _p0);

CAPI void alt_CPlayerDeathEvent_Assign_constCPlayerDeathEventRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CPlayerDeathEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CCheckpointEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_ICheckpoint* target;
    struct alt_IEntity* entity;
    _Bool state;
} alt_CCheckpointEvent;

CAPI void alt_CCheckpointEvent_free(struct alt_CCheckpointEvent* ptr);

// Return ptr must be manually freed with alt_CCheckpointEvent_free()
CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CCheckpointEvent_GetType(struct alt_CCheckpointEvent* _instance);

CAPI _Bool alt_CCheckpointEvent_WasCancelled(struct alt_CCheckpointEvent* _instance);

CAPI void alt_CCheckpointEvent_Cancel(struct alt_CCheckpointEvent* _instance);

// Return ptr must be manually freed with alt_CCheckpointEvent_free()
CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CCheckpointEvent_Assign_constCEventRef(struct alt_CCheckpointEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CCheckpointEvent_free()
CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CCheckpointEvent_Assign_CEventRefRef(struct alt_CCheckpointEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CCheckpointEvent_free()
CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create_3(struct alt_ICheckpoint* _target, struct alt_IEntity* _entity, _Bool _state);

CAPI struct alt_ICheckpoint* alt_CCheckpointEvent_GetTarget(struct alt_CCheckpointEvent* _instance);

CAPI struct alt_IEntity* alt_CCheckpointEvent_GetEntity(struct alt_CCheckpointEvent* _instance);

CAPI _Bool alt_CCheckpointEvent_GetState(struct alt_CCheckpointEvent* _instance);

// Return ptr must be manually freed with alt_CCheckpointEvent_free()
CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create_4(struct alt_CCheckpointEvent* _p0);

CAPI void alt_CCheckpointEvent_Assign_constCCheckpointEventRef(struct alt_CCheckpointEvent* _instance, struct alt_CCheckpointEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CColShapeEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IColShape* target;
    struct alt_IEntity* entity;
    _Bool state;
} alt_CColShapeEvent;

CAPI void alt_CColShapeEvent_free(struct alt_CColShapeEvent* ptr);

// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CColShapeEvent_GetType(struct alt_CColShapeEvent* _instance);

CAPI _Bool alt_CColShapeEvent_WasCancelled(struct alt_CColShapeEvent* _instance);

CAPI void alt_CColShapeEvent_Cancel(struct alt_CColShapeEvent* _instance);

// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CColShapeEvent_Assign_constCEventRef(struct alt_CColShapeEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CColShapeEvent_Assign_CEventRefRef(struct alt_CColShapeEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_3(struct alt_IColShape* _target, struct alt_IEntity* _entity, _Bool _state);

CAPI struct alt_IColShape* alt_CColShapeEvent_GetTarget(struct alt_CColShapeEvent* _instance);

CAPI struct alt_IEntity* alt_CColShapeEvent_GetEntity(struct alt_CColShapeEvent* _instance);

CAPI _Bool alt_CColShapeEvent_GetState(struct alt_CColShapeEvent* _instance);

// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_4(struct alt_CColShapeEvent* _p0);

CAPI void alt_CColShapeEvent_Assign_constCColShapeEventRef(struct alt_CColShapeEvent* _instance, struct alt_CColShapeEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CPlayerEnterVehicleEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IVehicle* target;
    struct alt_IPlayer* player;
    unsigned char seat;
} alt_CPlayerEnterVehicleEvent;

CAPI void alt_CPlayerEnterVehicleEvent_free(struct alt_CPlayerEnterVehicleEvent* ptr);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CPlayerEnterVehicleEvent_GetType(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI _Bool alt_CPlayerEnterVehicleEvent_WasCancelled(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI void alt_CPlayerEnterVehicleEvent_Cancel(struct alt_CPlayerEnterVehicleEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CPlayerEnterVehicleEvent_Assign_constCEventRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CPlayerEnterVehicleEvent_Assign_CEventRefRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_3(struct alt_IVehicle* _target, struct alt_IPlayer* _player, unsigned char _seat);

CAPI struct alt_IVehicle* alt_CPlayerEnterVehicleEvent_GetTarget(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI struct alt_IPlayer* alt_CPlayerEnterVehicleEvent_GetPlayer(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI unsigned char alt_CPlayerEnterVehicleEvent_GetSeat(struct alt_CPlayerEnterVehicleEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_4(struct alt_CPlayerEnterVehicleEvent* _p0);

CAPI void alt_CPlayerEnterVehicleEvent_Assign_constCPlayerEnterVehicleEventRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CPlayerEnterVehicleEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CPlayerLeaveVehicleEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IVehicle* target;
    struct alt_IPlayer* player;
    unsigned char seat;
} alt_CPlayerLeaveVehicleEvent;

CAPI void alt_CPlayerLeaveVehicleEvent_free(struct alt_CPlayerLeaveVehicleEvent* ptr);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CPlayerLeaveVehicleEvent_GetType(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI _Bool alt_CPlayerLeaveVehicleEvent_WasCancelled(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI void alt_CPlayerLeaveVehicleEvent_Cancel(struct alt_CPlayerLeaveVehicleEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_constCEventRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_CEventRefRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_3(struct alt_IVehicle* _target, struct alt_IPlayer* _player, unsigned char _seat);

CAPI struct alt_IVehicle* alt_CPlayerLeaveVehicleEvent_GetTarget(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI struct alt_IPlayer* alt_CPlayerLeaveVehicleEvent_GetPlayer(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI unsigned char alt_CPlayerLeaveVehicleEvent_GetSeat(struct alt_CPlayerLeaveVehicleEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_4(struct alt_CPlayerLeaveVehicleEvent* _p0);

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_constCPlayerLeaveVehicleEventRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CPlayerLeaveVehicleEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CPlayerChangeVehicleSeatEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IVehicle* target;
    struct alt_IPlayer* player;
    unsigned char oldSeat;
    unsigned char newSeat;
} alt_CPlayerChangeVehicleSeatEvent;

CAPI void alt_CPlayerChangeVehicleSeatEvent_free(struct alt_CPlayerChangeVehicleSeatEvent* ptr);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CPlayerChangeVehicleSeatEvent_GetType(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI _Bool alt_CPlayerChangeVehicleSeatEvent_WasCancelled(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Cancel(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_constCEventRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_CEventRefRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_3(struct alt_IVehicle* _target, struct alt_IPlayer* _player, unsigned char _oldSeat, unsigned char _newSeat);

CAPI struct alt_IVehicle* alt_CPlayerChangeVehicleSeatEvent_GetTarget(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI struct alt_IPlayer* alt_CPlayerChangeVehicleSeatEvent_GetPlayer(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetOldSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetNewSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_4(struct alt_CPlayerChangeVehicleSeatEvent* _p0);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_constCPlayerChangeVehicleSeatEventRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CPlayerChangeVehicleSeatEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CDataNodeReceivedEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String name;
    struct alt_String json;
} alt_CDataNodeReceivedEvent;

CAPI void alt_CDataNodeReceivedEvent_free(struct alt_CDataNodeReceivedEvent* ptr);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CDataNodeReceivedEvent_GetType(struct alt_CDataNodeReceivedEvent* _instance);

CAPI _Bool alt_CDataNodeReceivedEvent_WasCancelled(struct alt_CDataNodeReceivedEvent* _instance);

CAPI void alt_CDataNodeReceivedEvent_Cancel(struct alt_CDataNodeReceivedEvent* _instance);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CDataNodeReceivedEvent_Assign_constCEventRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CDataNodeReceivedEvent_Assign_CEventRefRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_3(struct alt_StringView* _name, struct alt_StringView* _logJson);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CDataNodeReceivedEvent_GetName(struct alt_CDataNodeReceivedEvent* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CDataNodeReceivedEvent_GetJson(struct alt_CDataNodeReceivedEvent* _instance);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_4(struct alt_CDataNodeReceivedEvent* _p0);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_5(struct alt_CDataNodeReceivedEvent* _p0);

CAPI void alt_CDataNodeReceivedEvent_Assign_constCDataNodeReceivedEventRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CDataNodeReceivedEvent* _p0);

CAPI void alt_CDataNodeReceivedEvent_Assign_CDataNodeReceivedEventRefRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CDataNodeReceivedEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CRemoveEntityEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IEntity* target;
} alt_CRemoveEntityEvent;

CAPI void alt_CRemoveEntityEvent_free(struct alt_CRemoveEntityEvent* ptr);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CRemoveEntityEvent_GetType(struct alt_CRemoveEntityEvent* _instance);

CAPI _Bool alt_CRemoveEntityEvent_WasCancelled(struct alt_CRemoveEntityEvent* _instance);

CAPI void alt_CRemoveEntityEvent_Cancel(struct alt_CRemoveEntityEvent* _instance);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CRemoveEntityEvent_Assign_constCEventRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CRemoveEntityEvent_Assign_CEventRefRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_3(struct alt_IEntity* _target);

CAPI struct alt_IEntity* alt_CRemoveEntityEvent_GetEntity(struct alt_CRemoveEntityEvent* _instance);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_4(struct alt_CRemoveEntityEvent* _p0);

CAPI void alt_CRemoveEntityEvent_Assign_constCRemoveEntityEventRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CRemoveEntityEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CConsoleCommandEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_StringView name;
    struct alt_Array_StringView args;
} alt_CConsoleCommandEvent;

CAPI void alt_CConsoleCommandEvent_free(struct alt_CConsoleCommandEvent* ptr);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CConsoleCommandEvent_GetType(struct alt_CConsoleCommandEvent* _instance);

CAPI _Bool alt_CConsoleCommandEvent_WasCancelled(struct alt_CConsoleCommandEvent* _instance);

CAPI void alt_CConsoleCommandEvent_Cancel(struct alt_CConsoleCommandEvent* _instance);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CConsoleCommandEvent_Assign_constCEventRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CConsoleCommandEvent_Assign_CEventRefRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_3(struct alt_StringView* _name, struct alt_Array_StringView* _args);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CConsoleCommandEvent_GetName(struct alt_CConsoleCommandEvent* _instance);

CAPI struct alt_Array_StringView* alt_CConsoleCommandEvent_GetArgs(struct alt_CConsoleCommandEvent* _instance);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_4(struct alt_CConsoleCommandEvent* _p0);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_5(struct alt_CConsoleCommandEvent* _p0);

CAPI void alt_CConsoleCommandEvent_Assign_constCConsoleCommandEventRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CConsoleCommandEvent* _p0);

CAPI void alt_CConsoleCommandEvent_Assign_CConsoleCommandEventRefRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CConsoleCommandEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CConnectionCompleteEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    _Bool isAnyMapLoaded;
} alt_CConnectionCompleteEvent;

CAPI void alt_CConnectionCompleteEvent_free(struct alt_CConnectionCompleteEvent* ptr);

// Return ptr must be manually freed with alt_CConnectionCompleteEvent_free()
CAPI struct alt_CConnectionCompleteEvent* alt_CConnectionCompleteEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CConnectionCompleteEvent_GetType(struct alt_CConnectionCompleteEvent* _instance);

CAPI _Bool alt_CConnectionCompleteEvent_WasCancelled(struct alt_CConnectionCompleteEvent* _instance);

CAPI void alt_CConnectionCompleteEvent_Cancel(struct alt_CConnectionCompleteEvent* _instance);

// Return ptr must be manually freed with alt_CConnectionCompleteEvent_free()
CAPI struct alt_CConnectionCompleteEvent* alt_CConnectionCompleteEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CConnectionCompleteEvent_Assign_constCEventRef(struct alt_CConnectionCompleteEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CConnectionCompleteEvent_free()
CAPI struct alt_CConnectionCompleteEvent* alt_CConnectionCompleteEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CConnectionCompleteEvent_Assign_CEventRefRef(struct alt_CConnectionCompleteEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CConnectionCompleteEvent_free()
CAPI struct alt_CConnectionCompleteEvent* alt_CConnectionCompleteEvent_Create_3(_Bool _anyMapLoaded);

CAPI _Bool alt_CConnectionCompleteEvent_IsAnyMapLoaded(struct alt_CConnectionCompleteEvent* _instance);

// Return ptr must be manually freed with alt_CConnectionCompleteEvent_free()
CAPI struct alt_CConnectionCompleteEvent* alt_CConnectionCompleteEvent_Create_4(struct alt_CConnectionCompleteEvent* _p0);

CAPI void alt_CConnectionCompleteEvent_Assign_constCConnectionCompleteEventRef(struct alt_CConnectionCompleteEvent* _instance, struct alt_CConnectionCompleteEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CDisconnectEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
} alt_CDisconnectEvent;

CAPI void alt_CDisconnectEvent_free(struct alt_CDisconnectEvent* ptr);

// Return ptr must be manually freed with alt_CDisconnectEvent_free()
CAPI struct alt_CDisconnectEvent* alt_CDisconnectEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CDisconnectEvent_GetType(struct alt_CDisconnectEvent* _instance);

CAPI _Bool alt_CDisconnectEvent_WasCancelled(struct alt_CDisconnectEvent* _instance);

CAPI void alt_CDisconnectEvent_Cancel(struct alt_CDisconnectEvent* _instance);

// Return ptr must be manually freed with alt_CDisconnectEvent_free()
CAPI struct alt_CDisconnectEvent* alt_CDisconnectEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CDisconnectEvent_Assign_constCEventRef(struct alt_CDisconnectEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CDisconnectEvent_free()
CAPI struct alt_CDisconnectEvent* alt_CDisconnectEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CDisconnectEvent_Assign_CEventRefRef(struct alt_CDisconnectEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CDisconnectEvent_free()
CAPI struct alt_CDisconnectEvent* alt_CDisconnectEvent_Create_3();

// Return ptr must be manually freed with alt_CDisconnectEvent_free()
CAPI struct alt_CDisconnectEvent* alt_CDisconnectEvent_Create_4(struct alt_CDisconnectEvent* _p0);

CAPI void alt_CDisconnectEvent_Assign_constCDisconnectEventRef(struct alt_CDisconnectEvent* _instance, struct alt_CDisconnectEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CGameEntityCreateEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IEntity* target;
} alt_CGameEntityCreateEvent;

CAPI void alt_CGameEntityCreateEvent_free(struct alt_CGameEntityCreateEvent* ptr);

// Return ptr must be manually freed with alt_CGameEntityCreateEvent_free()
CAPI struct alt_CGameEntityCreateEvent* alt_CGameEntityCreateEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CGameEntityCreateEvent_GetType(struct alt_CGameEntityCreateEvent* _instance);

CAPI _Bool alt_CGameEntityCreateEvent_WasCancelled(struct alt_CGameEntityCreateEvent* _instance);

CAPI void alt_CGameEntityCreateEvent_Cancel(struct alt_CGameEntityCreateEvent* _instance);

// Return ptr must be manually freed with alt_CGameEntityCreateEvent_free()
CAPI struct alt_CGameEntityCreateEvent* alt_CGameEntityCreateEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CGameEntityCreateEvent_Assign_constCEventRef(struct alt_CGameEntityCreateEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CGameEntityCreateEvent_free()
CAPI struct alt_CGameEntityCreateEvent* alt_CGameEntityCreateEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CGameEntityCreateEvent_Assign_CEventRefRef(struct alt_CGameEntityCreateEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CGameEntityCreateEvent_free()
CAPI struct alt_CGameEntityCreateEvent* alt_CGameEntityCreateEvent_Create_3(struct alt_IEntity* _target);

CAPI struct alt_IEntity* alt_CGameEntityCreateEvent_GetTarget(struct alt_CGameEntityCreateEvent* _instance);

// Return ptr must be manually freed with alt_CGameEntityCreateEvent_free()
CAPI struct alt_CGameEntityCreateEvent* alt_CGameEntityCreateEvent_Create_4(struct alt_CGameEntityCreateEvent* _p0);

CAPI void alt_CGameEntityCreateEvent_Assign_constCGameEntityCreateEventRef(struct alt_CGameEntityCreateEvent* _instance, struct alt_CGameEntityCreateEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CGameEntityDestroyEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IEntity* target;
} alt_CGameEntityDestroyEvent;

CAPI void alt_CGameEntityDestroyEvent_free(struct alt_CGameEntityDestroyEvent* ptr);

// Return ptr must be manually freed with alt_CGameEntityDestroyEvent_free()
CAPI struct alt_CGameEntityDestroyEvent* alt_CGameEntityDestroyEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CGameEntityDestroyEvent_GetType(struct alt_CGameEntityDestroyEvent* _instance);

CAPI _Bool alt_CGameEntityDestroyEvent_WasCancelled(struct alt_CGameEntityDestroyEvent* _instance);

CAPI void alt_CGameEntityDestroyEvent_Cancel(struct alt_CGameEntityDestroyEvent* _instance);

// Return ptr must be manually freed with alt_CGameEntityDestroyEvent_free()
CAPI struct alt_CGameEntityDestroyEvent* alt_CGameEntityDestroyEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CGameEntityDestroyEvent_Assign_constCEventRef(struct alt_CGameEntityDestroyEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CGameEntityDestroyEvent_free()
CAPI struct alt_CGameEntityDestroyEvent* alt_CGameEntityDestroyEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CGameEntityDestroyEvent_Assign_CEventRefRef(struct alt_CGameEntityDestroyEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CGameEntityDestroyEvent_free()
CAPI struct alt_CGameEntityDestroyEvent* alt_CGameEntityDestroyEvent_Create_3(struct alt_IEntity* _target);

CAPI struct alt_IEntity* alt_CGameEntityDestroyEvent_GetTarget(struct alt_CGameEntityDestroyEvent* _instance);

// Return ptr must be manually freed with alt_CGameEntityDestroyEvent_free()
CAPI struct alt_CGameEntityDestroyEvent* alt_CGameEntityDestroyEvent_Create_4(struct alt_CGameEntityDestroyEvent* _p0);

CAPI void alt_CGameEntityDestroyEvent_Assign_constCGameEntityDestroyEventRef(struct alt_CGameEntityDestroyEvent* _instance, struct alt_CGameEntityDestroyEvent* _p0);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef enum alt_CKeyboardEvent_KeyState {
    ALT_CKEYBOARDEVENT_KEYSTATE_UP = 0,
    ALT_CKEYBOARDEVENT_KEYSTATE_DOWN = 1
};

typedef struct alt_CKeyboardEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    unsigned int keyCode;
    enum alt_CKeyboardEvent_KeyState keyState;
} alt_CKeyboardEvent;

CAPI void alt_CKeyboardEvent_free(struct alt_CKeyboardEvent* ptr);

// Return ptr must be manually freed with alt_CKeyboardEvent_free()
CAPI struct alt_CKeyboardEvent* alt_CKeyboardEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CKeyboardEvent_GetType(struct alt_CKeyboardEvent* _instance);

CAPI _Bool alt_CKeyboardEvent_WasCancelled(struct alt_CKeyboardEvent* _instance);

CAPI void alt_CKeyboardEvent_Cancel(struct alt_CKeyboardEvent* _instance);

// Return ptr must be manually freed with alt_CKeyboardEvent_free()
CAPI struct alt_CKeyboardEvent* alt_CKeyboardEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CKeyboardEvent_Assign_constCEventRef(struct alt_CKeyboardEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CKeyboardEvent_free()
CAPI struct alt_CKeyboardEvent* alt_CKeyboardEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CKeyboardEvent_Assign_CEventRefRef(struct alt_CKeyboardEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CKeyboardEvent_free()
CAPI struct alt_CKeyboardEvent* alt_CKeyboardEvent_Create_3(unsigned int _keyCode, enum alt_CKeyboardEvent_KeyState state);

CAPI unsigned int alt_CKeyboardEvent_GetKeyCode(struct alt_CKeyboardEvent* _instance);

CAPI enum alt_CKeyboardEvent_KeyState alt_CKeyboardEvent_GetKeyState(struct alt_CKeyboardEvent* _instance);

// Return ptr must be manually freed with alt_CKeyboardEvent_free()
CAPI struct alt_CKeyboardEvent* alt_CKeyboardEvent_Create_4(struct alt_CKeyboardEvent* _p0);

CAPI void alt_CKeyboardEvent_Assign_constCKeyboardEventRef(struct alt_CKeyboardEvent* _instance, struct alt_CKeyboardEvent* _p0);


typedef enum alt_CKeyboardEvent_KeyState {
    ALT_CKEYBOARDEVENT_KEYSTATE_UP = 0,
    ALT_CKEYBOARDEVENT_KEYSTATE_DOWN = 1
};

typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 3,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 4,
    ALT_CEVENT_TYPE_META_CHANGE = 5,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 6,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 7,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 8,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 9,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 10,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 11,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 12,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 13,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 14,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 15,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 16,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 17,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 18,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 19,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 20,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 21,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 22,
    ALT_CEVENT_TYPE_ALL = 23,
    ALT_CEVENT_TYPE_SIZE = 24
};

typedef struct alt_CWebViewEvent {
    enum alt_CEvent_Type type;
    _Bool cancelled;
    struct CWebView* target;
    struct alt_String name;
    struct alt_MValueList args;
} alt_CWebViewEvent;

CAPI void alt_CWebViewEvent_free(struct alt_CWebViewEvent* ptr);

// Return ptr must be manually freed with alt_CWebViewEvent_free()
CAPI struct alt_CWebViewEvent* alt_CWebViewEvent_Create(enum alt_CEvent_Type _type);

CAPI enum alt_CEvent_Type alt_CWebViewEvent_GetType(struct alt_CWebViewEvent* _instance);

CAPI _Bool alt_CWebViewEvent_WasCancelled(struct alt_CWebViewEvent* _instance);

CAPI void alt_CWebViewEvent_Cancel(struct alt_CWebViewEvent* _instance);

// Return ptr must be manually freed with alt_CWebViewEvent_free()
CAPI struct alt_CWebViewEvent* alt_CWebViewEvent_Create_1(struct alt_CEvent* _p0);

CAPI void alt_CWebViewEvent_Assign_constCEventRef(struct alt_CWebViewEvent* _instance, struct alt_CEvent* _p0);

// Return ptr must be manually freed with alt_CWebViewEvent_free()
CAPI struct alt_CWebViewEvent* alt_CWebViewEvent_Create_2(struct alt_CEvent* _p0);

CAPI void alt_CWebViewEvent_Assign_CEventRefRef(struct alt_CWebViewEvent* _instance, struct alt_CEvent* _p0);


// Return ptr must be manually freed with alt_CWebViewEvent_free()
CAPI struct alt_CWebViewEvent* alt_CWebViewEvent_Create_3(struct CWebView* _target, struct alt_StringView* _name, struct alt_MValueList* _args);

CAPI struct CWebView* alt_CWebViewEvent_GetTarget(struct alt_CWebViewEvent* _instance);

// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CWebViewEvent_GetName(struct alt_CWebViewEvent* _instance);

// Return ptr must be manually freed with alt_MValueList_free()
CAPI struct alt_MValueList* alt_CWebViewEvent_GetArgs(struct alt_CWebViewEvent* _instance);

// Return ptr must be manually freed with alt_CWebViewEvent_free()
CAPI struct alt_CWebViewEvent* alt_CWebViewEvent_Create_4(struct alt_CWebViewEvent* _p0);

// Return ptr must be manually freed with alt_CWebViewEvent_free()
CAPI struct alt_CWebViewEvent* alt_CWebViewEvent_Create_5(struct alt_CWebViewEvent* _p0);

CAPI void alt_CWebViewEvent_Assign_constCWebViewEventRef(struct alt_CWebViewEvent* _instance, struct alt_CWebViewEvent* _p0);

CAPI void alt_CWebViewEvent_Assign_CWebViewEventRefRef(struct alt_CWebViewEvent* _instance, struct alt_CWebViewEvent* _p0);


typedef struct alt_IPackage alt_IPackage;

CAPI enum alt_IPackage_Mode alt_IPackage_GetMode(struct alt_IPackage* _instance);

CAPI _Bool alt_IPackage_FileExists(struct alt_IPackage* _instance, struct alt_StringView* path);

CAPI struct alt_IPackage_File* alt_IPackage_OpenFile(struct alt_IPackage* _instance, struct alt_StringView* path);

CAPI void alt_IPackage_CloseFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

CAPI unsigned long long alt_IPackage_GetFileSize(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

CAPI void alt_IPackage_SeekFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, unsigned long long offset, enum alt_IPackage_SeekOrigin origin);

CAPI unsigned long long alt_IPackage_TellFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

CAPI unsigned long long alt_IPackage_ReadFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void* buffer, unsigned long long size);

CAPI unsigned long long alt_IPackage_WriteFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void* buffer, unsigned long long size);


typedef enum alt_IPackage_Mode {
    ALT_IPACKAGE_MODE_READ = 0,
    ALT_IPACKAGE_MODE_WRITE = 1
};

typedef enum alt_IPackage_SeekOrigin {
    ALT_IPACKAGE_SEEKORIGIN_SET = 0,
    ALT_IPACKAGE_SEEKORIGIN_CUR = 1,
    ALT_IPACKAGE_SEEKORIGIN_END = 2
};

typedef struct alt_IPackage_File alt_IPackage_File;

CAPI void alt_IPackage_File_Assign_constIPackage_FileRef(struct alt_IPackage_File* _instance, struct alt_IPackage_File* _p0);


typedef struct alt_IScriptRuntime alt_IScriptRuntime;

CAPI struct alt_IResource* alt_IScriptRuntime_CreateResource(struct alt_IScriptRuntime* _instance, struct alt_IResource_CreationInfo* info);

CAPI void alt_IScriptRuntime_RemoveResource(struct alt_IScriptRuntime* _instance, struct alt_IResource* resource);

CAPI void alt_IScriptRuntime_OnTick(struct alt_IScriptRuntime* _instance);

CAPI void alt_IScriptRuntime_Assign_constIScriptRuntimeRef(struct alt_IScriptRuntime* _instance, struct alt_IScriptRuntime* _p0);


typedef struct alt_IClient alt_IClient;

CAPI void alt_IClient_free(struct alt_IClient* ptr);

CAPI void alt_IClient_LogInfo(struct alt_IClient* _instance, struct alt_StringView* str);

CAPI _Bool alt_IClient_RegisterScriptRuntime(struct alt_IClient* _instance, struct alt_StringView* resourceType, struct alt_IScriptRuntime* runtime);

CAPI void alt_IClient_Assign_constIClientRef(struct alt_IClient* _instance, struct alt_IClient* _p0);

CAPI void alt_IClient_Assign_IClientRefRef(struct alt_IClient* _instance, struct alt_IClient* _p0);




#include "../altv-capi-extra.h"

#endif // _CAPI_H_
