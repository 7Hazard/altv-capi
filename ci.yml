name: Continuous Integration and Delivery

on:
  push:
    branches:
      - master
      - ci

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
    - uses: rlespinasse/github-slug-action@2.0.0
      
    - run: |
        sudo chmod 777 /
        sudo chmod 777 /usr/bin
      
    - name: Cache windows build files
      id: cache-win
      uses: actions/cache@v1
      with:
        path: /WINDOWS
        key: /WINDOWS

    - name: Get windows build files
      if: steps.cache-win.outputs.cache-hit != 'true'
      working-directory: /
      run: |
        sudo bash -c "curl -sLc cookies.txt 'https://docs.google.com/uc?export=download&id='$fileid | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1/p' > confirm.txt"
        sudo curl -sLb cookies.txt -o $filename 'https://docs.google.com/uc?export=download&id='$fileid'&confirm='$(<confirm.txt)
        sudo tar -xvzf $filename -C . 1>/dev/null
        sudo rm -f confirm.txt cookies.txt $filename
      env:
        fileid: 1ZC-J5ttwrpKxnoWTrLNiTR7gqq9q1oGo
        filename: WINDOWS.tar.gz
    
      # clang
      # can't cache individual files
#     - name: Cache clang-cl
#       id: cache-clang-cl
#       uses: actions/cache@v1
#       with:
#         path: /usr/bin/*clang-cl /usr/bin/*lld-link
#         key: clang-cl-1
    - name: Install clang-cl & lld-link
#       if: steps.cache-clang-cl.outputs.cache-hit != 'true'
      run: |
        sudo apt install -y clang-tools-9
        sudo cp /usr/bin/clang-cl-9 /usr/bin/clang-cl
        sudo cp /usr/bin/lld-link-9 /usr/bin/lld-link

    # llvm-project
    - name: Cache LLVM Project files
      id: cache-llvm
      uses: actions/cache@v1
      with:
        path: llvm-project
        key: llvm-project
    - name: Fetch LLVM Project
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: "git pull https://github.com/llvm/llvm-project.git"

    - uses: actions/checkout@v2
      with:
        path: llvm-project/clang-tools-extra
    
    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v1
      
    - name: Setup Node.js environment
      uses: actions/setup-node@v1.4.2
        
    - name: Build tool
      run: "cmake -G Ninja llvm -BA-BUILD-NINJA-RelWithDebInfo -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra' -DLLVM_BUILD_TESTS=OFF -DLLVM_ENABLE_CXX1Z=ON -DCLANG_DEFAULT_CXX_STDLIB=libc++ -DLLVM_ENABLE_LIBCXX=ON -DLLVM_STATIC_LINK_CXX_STDLIB=OFF -DCMAKE_C_COMPILER='clang-9' -DCMAKE_ASM_COMPILER='clang-9' -DCMAKE_CXX_COMPILER='clang++-9' -DCLANG_DEFAULT_LINKER='ld.lld' -DLLVM_ENABLE_LLD=ON"
      working-directory: llvm-project
      
#     - name: Package win32
#       if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/dev'
#       uses: papeloto/action-zip@v1
#       with:
#         files: build/win32
#         dest: altv-jvm-module-win32.zip
    
#     - name: Package linux
#       if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/dev'
#       uses: papeloto/action-zip@v1
#       with:
#         files: build/linux
#         dest: altv-jvm-module-linux.zip

#     - name: Create Release
#       if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/dev'
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: ${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}
#         release_name: ${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}
#         draft: ${{ github.ref == 'refs/heads/dev' }}
#         prerelease: ${{ github.ref != 'refs/heads/release' }}

#     - name: Upload Win32 build
#       if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/dev'
#       id: upload-win32-build
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#         asset_path: altv-jvm-module-win32.zip
#         asset_name: altv-jvm-module-win32.zip
#         asset_content_type: application/zip

#     - name: Upload Linux build
#       if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/dev'
#       id: upload-linux-build
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#         asset_path: altv-jvm-module-linux.zip
#         asset_name: altv-jvm-module-linux.zip
#         asset_content_type: application/zip
        
